From 5f62f814ccb17c2a5803997b82606f30a4be1065 Mon Sep 17 00:00:00 2001
From: Jarek Jarcec Cecho <jarcec@apache.org>
Date: Thu, 31 Oct 2013 12:54:10 -0700
Subject: [PATCH 53/56] FLUME-2229. Backoff period gets reset too often in OrderSelector

(Hari Shreedharan via Jarek Jarcec Cecho)
---
 .../java/org/apache/flume/util/OrderSelector.java  |   18 +++++++++++-------
 1 files changed, 11 insertions(+), 7 deletions(-)

diff --git a/flume-ng-sdk/src/main/java/org/apache/flume/util/OrderSelector.java b/flume-ng-sdk/src/main/java/org/apache/flume/util/OrderSelector.java
index e869930..fd9e81f 100644
--- a/flume-ng-sdk/src/main/java/org/apache/flume/util/OrderSelector.java
+++ b/flume-ng-sdk/src/main/java/org/apache/flume/util/OrderSelector.java
@@ -22,6 +22,7 @@ import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.TimeUnit;
 
 /**
  * A basic implementation of an order selector that implements a simple
@@ -39,7 +40,8 @@ import java.util.Map;
 public abstract class OrderSelector<T> {
 
   private static final int EXP_BACKOFF_COUNTER_LIMIT = 16;
-  private static final long CONSIDER_SEQUENTIAL_RANGE = 2000l;
+  private static final long CONSIDER_SEQUENTIAL_RANGE = TimeUnit.HOURS
+    .toMillis(1);
   private static final long MAX_TIMEOUT = 30000l;
   private final Map<T, FailureState> stateMap =
           new LinkedHashMap<T, FailureState>();
@@ -92,12 +94,14 @@ public abstract class OrderSelector<T> {
     long now = System.currentTimeMillis();
     long delta = now - state.lastFail;
 
-    //Should we consider this as a new failure? If the failure happened
-    //within backoff length + a grace period (failed within
-    //grace period after the component started up again, don't consider this
-    //a new sequential failure - the component might have failed again while
-    //trying to recover. If the failure is outside backedoff time + grace period
-    //consider it a new failure and increase the backoff length.
+    /*
+     * When do we increase the backoff period?
+     * We basically calculate the time difference between the last failure
+     * and the current one. If this failure happened within one hour of the
+     * last backoff period getting over, then we increase the timeout,
+     * since the object did not recover yet. Else we assume this is a fresh
+     * failure and reset the count.
+     */
     long lastBackoffLength = Math.min(maxTimeout, 1000 * (1 << state.sequentialFails));
     long allowableDiff = lastBackoffLength + CONSIDER_SEQUENTIAL_RANGE;
     if (allowableDiff > delta) {
-- 
1.7.0.4

