lua_package_path    "/etc/nginx/?.lua";
lua_shared_dict     log_dict    1M;

server {
  
  listen 80;
  server_name assets.getrockerbox.com;

  root /home/ubuntu/bidder/;

  log_format main '$request $time_local $arg_auction_id';
  log_format track_formatted '$arg_price $arg_ecp $arg_creative $arg_height $arg_width $arg_uid $arg_auction_id $arg_seller $arg_tag $arg_venue $arg_auction_id $arg_ip_address "$ref"';
	log_format arb_result '$ref $arg_auction_id $arg_uid $arg_creative $arg_price $new_auction_id $buyer_id $creative_id $brand_id $bid_price $alpha $time_local $is_arb $is_user';

	log_format ab '$arg_auction_id $new_auction_id $buyer_id $bid $clear $creative_id "$ref" $is_arb';
	log_format viewability '$request $time_local $arg_auction_id $is_arb';

  location ~ /track {
    default_type text/html;
    set $new_auction_id '-';
    set $buyer_id '-';
    set $creative_id '-';
    set $bid_price '-';
    set $brand_id '-';
    set $alpha '-';
    set $ref '-';
		set $is_arb 'false';
		set $is_user 'true';
    
    resolver 8.8.8.8;
    content_by_lua '
      ngx.var.ref = ngx.unescape_uri(ngx.var.arg_referrer)

      local args = ngx.req.get_uri_args()
      local http = require "resty.http"
      local cjson = require "cjson"
      local redis = require "resty.redis"

      if string.len(args["uid"]) > 0 and tonumber(args["uid"]) > 0 then

				local red2 = redis:new()
				red2:set_timeout(100)
				local ok, err = red2:connect("162.243.123.240", 6379)
				local user, err = red2:get(args["uid"])
				if (user ~= ngx.null) then 
					ngx.var.is_user = "true"
					
					local hc = http:new()
					local foobar = {
						an_placement_id = 2261194,
						an_user_id = "user_id",
						page_url = args["referrer"],
						ad_format = "iframe",
						width = tonumber(args["width"]),
						ext_auction_id = "db" .. args["auction_id"],
						ip_address = args["ip_address"],
						height = tonumber(args["height"])
					}
					local json_text = cjson.encode(foobar)
					json_text = string.gsub(json_text,"\\\"user_id\\\"",args["uid"])
					json_text = string.gsub(json_text,"\\\\/","/")
					local ok, code, headers, status, body  = hc:request {
						url = "http://ib.adnxs.com/asi?member_id=2024",
						method = "POST",
						body = json_text
					}
					local response = cjson.decode(body)
					local old_price = tonumber(args["price"])
					if response["bid"]  then
						ngx.var.alpha = response["bid"] - old_price
						
						ngx.var.new_auction_id = string.match(body,"appnexus_auction_id\\\":%s?(%d+),") 
						ngx.var.buyer_id = response["buyer_member_id"]
						ngx.var.creative_id = response["creative_id"]
						ngx.var.brand_id = response["brand_id"]
						ngx.var.bid_price = response["bid"]

						if response["bid"]*0.7 > old_price then
							ngx.var.is_arb = "true"
							local red = redis:new()
							red:set_timeout(20)
							local ok, err = red:connect("162.243.121.234", 6379)
							ok, err = red:setex("db" .. args["auction_id"],60,body)  
							
							ngx.say("db" .. args["auction_id"])  
						end
					end
				end
      end
      
    ';
    access_log  /var/log/nginx/raw.log main;
    access_log  /var/log/nginx/formatted.log track_formatted;
		access_log  /var/log/nginx/arb.log arb_result;

  }

  location ~ /assets/ {
    access_log  /var/log/nginx/asset.log main;
  }


  location ~ /getviewability {
		set $ref '-';
		set $is_arb 'false';
		set $new_auction_id '-';
		set $buyer_id '-';
		set $bid '-';
		set $clear '-';
		set $creative_id '-';

		

    content_by_lua '
			local args = ngx.req.get_uri_args()

			local redis = require "resty.redis"
			local cjson = require "cjson"
			local red = redis:new()
			local red2 = redis:new()

			red:set_timeout(100)
 			red2:set_timeout(100)

      local ok, err = red:connect("162.243.121.234", 6379)
			local ok, err = red2:connect("162.243.123.240", 6379)

      local auction, err = red:get("db" .. args["auction_id"])
      local user, err = red2:get(args["uid"])

			if (auction ~= ngx.null and user ~= ngx.null) then
				ngx.var.new_auction_id = string.match(auction,"appnexus_auction_id\\\":%s?(%d+),")
        auction = cjson.decode(auction)
        local tag = auction["ad_tag"]
				
        tag = string.gsub(tag,"%%%%pricepaid%%%%",auction["bid"]*0.8)
				ngx.var.ref = string.match(tag,"SRC=\'(.*)\' FR")
				ngx.var.buyer_id = auction["buyer_member_id"]
				ngx.var.bid = auction["bid"]
				ngx.var.creative_id = auction["creative_id"]
				ngx.var.clear = auction["bid"]*0.8
				ngx.var.is_arb = "true"

        local creative = args["creative"]
        ngx.say("var ecalper = document.getElementById(\\\"cr_" .. creative .. "\\\")")
        ngx.say("var tnemecalper = document.createElement(\\\"div\\\")")
        ngx.say("tnemecalper.innerHTML = \\\"" .. tag .. "\\\"")
        ngx.say("ecalper.parentNode.replaceChild(tnemecalper,ecalper)")
      else
        local response = ngx.location.capture("/assets" .. ngx.var.request_uri)
        ngx.status = response.status
        ngx.say(response.body)
      end
    ';

    access_log  /var/log/nginx/getviewability.log main2;
		access_log  /var/log/nginx/ab.log ab;	
		
  }

  location ~ /viewability { 
    default_type image/gif; 
    set $ref '-';
    set $parent '-';

    log_format viewability_tracking '$request $time_local'; 
    log_format view_formatted '$arg_auction_id $arg_uid $arg_seller $arg_tag $arg_pub $arg_venue $arg_ecp $arg_price $arg_creative $arg_visible $arg_elapsed $arg_action "$ref" "$parent"';
    
    access_log  /var/log/nginx/view_raw.log main; 
    content_by_lua '
      ngx.var.ref = ngx.unescape_uri(ngx.var.arg_referrer)
      ngx.var.parent = ngx.unescape_uri(ngx.var.arg_parent)
      ngx.say(".")
    ';

    access_log  /var/log/nginx/viewability.log main;
    if ($args ~ 'auction') { 
      access_log /var/log/nginx/view_formatted.log view_formatted;
    } 
  }

  location ~ /{
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_pass http://tornado_server;
  }
}
