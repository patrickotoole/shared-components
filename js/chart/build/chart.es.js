function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);
  
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  return returnValue;
}

var classCallCheck = function classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var d3_updateable = function d3_updateable(target, selector, type, data, joiner) {
  var type = type || "div";
  var updateable = target.selectAll(selector).data(function (x) {
    return data ? [data] : [x];
  }, joiner || function (x) {
    return [x];
  });

  updateable.enter().append(type);

  return updateable;
};

var d3_splat = function d3_splat(target, selector, type, data, joiner) {
  var type = type || "div";
  var updateable = target.selectAll(selector).data(data || function (x) {
    return x;
  }, joiner || function (x) {
    return x;
  });

  updateable.enter().append(type);

  return updateable;
};

function d3_class(target, cls, type, data) {
  return d3_updateable(target, "." + cls, type || "div", data).classed(cls, true);
}

function noop() {}
function accessor(attr, val) {
  if (val === undefined) return this["_" + attr];
  this["_" + attr] = val;
  return this;
}

var D3ComponentBase = function () {
  function D3ComponentBase(target) {
    var _this = this;

    classCallCheck(this, D3ComponentBase);

    this._target = target;
    this._on = {};
    this.props().map(function (x) {
      _this[x] = accessor.bind(_this, x);
    });
  }

  createClass(D3ComponentBase, [{
    key: "props",
    value: function props() {
      return ["data"];
    }
  }, {
    key: "on",
    value: function on(action, fn) {
      if (fn === undefined) return this._on[action] || noop;
      this._on[action] = fn;
      return this;
    }
  }]);
  return D3ComponentBase;
}();

function simpleTimeseries(target, data, w, h, min) {
  var width = w || 120,
      height = h || 30;

  var x = d3.scale.ordinal().domain(d3.range(0, data.length)).range(d3.range(0, width, width / data.length));
  var y = d3.scale.linear().range([4, height]).domain([min || d3.min(data), d3.max(data)]);

  var wrap = d3_updateable(target, "g", "g", data, function (x, i) {
    return 1;
  });

  d3_splat(wrap, "rect", "rect", function (x) {
    return x;
  }, function (x, i) {
    return i;
  }).attr("x", function (z, i) {
    return x(i);
  }).attr("width", width / data.length - 1.2).attr("y", function (z) {
    return height - y(z);
  }).attr("height", function (z) {
    return z ? y(z) : 0;
  });

  return wrap;
}

var classCallCheck$1 = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$1 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();









var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

function before_after_timeseries(target) {
  return new BeforeAfterTimeseries(target);
}

var BeforeAfterTimeseries = function (_D3ComponentBase) {
  inherits(BeforeAfterTimeseries, _D3ComponentBase);

  function BeforeAfterTimeseries(target) {
    classCallCheck$1(this, BeforeAfterTimeseries);

    var _this = possibleConstructorReturn(this, (BeforeAfterTimeseries.__proto__ || Object.getPrototypeOf(BeforeAfterTimeseries)).call(this, target));

    _this._wrapper_class = "ba-timeseries-wrap";
    return _this;
  }

  createClass$1(BeforeAfterTimeseries, [{
    key: 'props',
    value: function props() {
      return ["data", "before", "after", "wrapper_class"];
    }
  }, {
    key: 'draw',
    value: function draw() {

      var tsw = 250,
          unit_size = tsw / this.data().length,
          before_pos = this.before(),
          after_pos = this.after();

      var timeseries = d3_class(this._target, this.wrapper_class(), "svg").style("display", "block").style("margin", "auto").style("margin-bottom", "30px").attr("width", tsw + "px").attr("height", "70px");

      simpleTimeseries(timeseries, this.data(), tsw);

      // add decorations

      d3_class(timeseries, "middle", "line").style("stroke-dasharray", "1,5").attr("stroke-width", 1).attr("stroke", "black").attr("y1", 0).attr("y2", 55).attr("x1", tsw / 2).attr("x2", tsw / 2);

      d3_class(timeseries, "middle-text", "text").attr("x", tsw / 2).attr("y", 67).style("text-anchor", "middle").text("On-site");

      d3_class(timeseries, "before", "line").style("stroke-dasharray", "1,5").attr("stroke-width", 1).attr("stroke", "black").attr("y1", 39).attr("y2", 45).attr("x1", unit_size * before_pos).attr("x2", unit_size * before_pos);

      d3_class(timeseries, "before-text", "text").attr("x", unit_size * before_pos - 8).attr("y", 48).style("text-anchor", "end").text("Consideration");

      d3_class(timeseries, "window", "line").style("stroke-dasharray", "1,5").attr("stroke-width", 1).attr("stroke", "black").attr("y1", 45).attr("y2", 45).attr("x1", unit_size * before_pos).attr("x2", unit_size * (after_pos + 1) + 1);

      d3_class(timeseries, "after", "line").style("stroke-dasharray", "1,5").attr("stroke-width", 1).attr("stroke", "black").attr("y1", 39).attr("y2", 45).attr("x1", unit_size * (after_pos + 1)).attr("x2", unit_size * (after_pos + 1));

      d3_class(timeseries, "after-text", "text").attr("x", unit_size * (after_pos + 1) + 8).attr("y", 48).style("text-anchor", "start").text("Validation");

      return this;
    }
  }]);
  return BeforeAfterTimeseries;
}(D3ComponentBase);

function simpleBar(wrap, value, scale, color) {

  var height = 20,
      width = wrap.style("width").replace("px", "");

  var canvas = d3_updateable(wrap, "svg", "svg", [value], function () {
    return 1;
  }).style("width", width + "px").style("height", height + "px");

  var chart = d3_updateable(canvas, 'g.chart', 'g', false, function () {
    return 1;
  }).attr("class", "chart");

  var bars = d3_splat(chart, ".pop-bar", "rect", function (x) {
    return x;
  }, function (x, i) {
    return i;
  }).attr("class", "pop-bar").attr('height', height - 4).attr({ 'x': 0, 'y': 0 }).style('fill', color).attr("width", function (x) {
    return scale(x);
  });
}

function domain_bullet(target) {
  return new DomainBullet(target);
}

// data schema: [{pop_percent, sample_percent_norm}

var DomainBullet = function (_D3ComponentBase) {
  inherits(DomainBullet, _D3ComponentBase);

  function DomainBullet(target) {
    classCallCheck$1(this, DomainBullet);

    var _this = possibleConstructorReturn(this, (DomainBullet.__proto__ || Object.getPrototypeOf(DomainBullet)).call(this));

    _this.target = target;
    return _this;
  }

  createClass$1(DomainBullet, [{
    key: "props",
    value: function props() {
      return ["data", "max"];
    }
  }, {
    key: "draw",
    value: function draw() {
      var width = (this.target.style("width").replace("px", "") || this.offsetWidth) - 50,
          height = 28;

      var x = d3.scale.linear().range([0, width]).domain([0, this.max()]);

      if (this.target.text()) this.target.text("");

      var bullet = d3_updateable(this.target, ".bullet", "div", this.data(), function (x) {
        return 1;
      }).classed("bullet", true).style("margin-top", "3px");

      var svg = d3_updateable(bullet, "svg", "svg", false, function (x) {
        return 1;
      }).attr("width", width).attr("height", height);

      d3_updateable(svg, ".bar-1", "rect", false, function (x) {
        return 1;
      }).classed("bar-1", true).attr("x", 0).attr("width", function (d) {
        return x(d.pop_percent);
      }).attr("height", height).attr("fill", "#888");

      d3_updateable(svg, ".bar-2", "rect", false, function (x) {
        return 1;
      }).classed("bar-2", true).attr("x", 0).attr("y", height / 4).attr("width", function (d) {
        return x(d.sample_percent_norm);
      }).attr("height", height / 2).attr("fill", "rgb(8, 29, 88)");

      return this;
    }
  }]);
  return DomainBullet;
}(D3ComponentBase);

var version = "0.0.1";

export { version, before_after_timeseries, simpleTimeseries, simpleBar, domain_bullet };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
