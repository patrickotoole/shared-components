(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define('component', ['exports'], factory) :
	(factory((global.component = global.component || {})));
}(this, (function (exports) { 'use strict';

function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);
  
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  return returnValue;
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();









var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var d3_updateable = function d3_updateable(target, selector, type, data, joiner) {
  var type = type || "div";
  var updateable = target.selectAll(selector).data(function (x) {
    return data ? [data] : [x];
  }, joiner || function (x) {
    return [x];
  });

  updateable.enter().append(type);

  return updateable;
};

var d3_splat = function d3_splat(target, selector, type, data, joiner) {
  var type = type || "div";
  var updateable = target.selectAll(selector).data(data || function (x) {
    return x;
  }, joiner || function (x) {
    return x;
  });

  updateable.enter().append(type);

  return updateable;
};

function d3_class(target, cls, type, data) {
  return d3_updateable(target, "." + cls, type || "div", data).classed(cls, true);
}

function noop() {}



function accessor(attr, val) {
  if (val === undefined) return this["_" + attr];
  this["_" + attr] = val;
  return this;
}

var D3ComponentBase = function () {
  function D3ComponentBase(target) {
    var _this = this;

    classCallCheck(this, D3ComponentBase);

    this._target = target;
    this._on = {};
    this.props().map(function (x) {
      _this[x] = accessor.bind(_this, x);
    });
  }

  createClass(D3ComponentBase, [{
    key: "props",
    value: function props() {
      return ["data"];
    }
  }, {
    key: "on",
    value: function on(action, fn) {
      if (fn === undefined) return this._on[action] || noop;
      this._on[action] = fn;
      return this;
    }
  }]);
  return D3ComponentBase;
}();

var TabularHeader = function (_D3ComponentBase) {
  inherits(TabularHeader, _D3ComponentBase);

  function TabularHeader(target) {
    classCallCheck(this, TabularHeader);

    var _this = possibleConstructorReturn(this, (TabularHeader.__proto__ || Object.getPrototypeOf(TabularHeader)).call(this));

    _this._target = target;
    _this.WIDTH = 144;
    _this._label = "URL";
    _this._headers = ["12am", "12pm", "12am"];
    _this._xs = [0, _this.WIDTH / 2, _this.WIDTH];
    _this._anchors = ["start", "middle", "end"];
    return _this;
  }

  createClass(TabularHeader, [{
    key: "props",
    value: function props() {
      return ["label", "headers"];
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this2 = this;

      var euh = d3_class(this._target, "expansion-urls-title");

      d3_class(euh, "title").text(this.label());
      d3_class(euh, "view").text("Views");

      var svg_legend = d3_class(euh, "legend", "svg");

      if (this.headers().length == 2) {
        this._xs = [this.WIDTH / 2 - this.WIDTH / 4, this.WIDTH / 2 + this.WIDTH / 4];
        this._anchors = ["middle", "middle"];
      }

      d3_splat(svg_legend, "text", "text", this.headers(), function (x, i) {
        return i;
      }).attr("y", "20").attr("x", function (x, i) {
        return _this2._xs[i];
      }).style("text-anchor", function (x, i) {
        return _this2._anchors[i];
      }).text(String);

      d3_splat(svg_legend, "line", "line", this.headers(), function (x, i) {
        return i;
      }).style("stroke-dasharray", "1,5").attr("stroke-width", 1).attr("stroke", "black").attr("y1", this.headers().length == 2 ? 0 : 25).attr("y2", 35).attr("x1", function (x, i) {
        return _this2.headers().length == 2 ? _this2.WIDTH / 2 : _this2._xs[i];
      }).attr("x2", function (x, i) {
        return _this2.headers().length == 2 ? _this2.WIDTH / 2 : _this2._xs[i];
      });
    }
  }]);
  return TabularHeader;
}(D3ComponentBase);

var classCallCheck$1 = function classCallCheck$$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$1 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var d3_updateable$1 = function d3_updateable(target, selector, type, data, joiner) {
  var type = type || "div";
  var updateable = target.selectAll(selector).data(function (x) {
    return data ? [data] : [x];
  }, joiner || function (x) {
    return [x];
  });

  updateable.enter().append(type);

  return updateable;
};

var d3_splat$1 = function d3_splat(target, selector, type, data, joiner) {
  var type = type || "div";
  var updateable = target.selectAll(selector).data(data || function (x) {
    return x;
  }, joiner || function (x) {
    return x;
  });

  updateable.enter().append(type);

  return updateable;
};

function d3_class$1(target, cls, type, data) {
  return d3_updateable$1(target, "." + cls, type || "div", data).classed(cls, true);
}

function noop$1() {}
function accessor$1(attr, val) {
  if (val === undefined) return this["_" + attr];
  this["_" + attr] = val;
  return this;
}

var D3ComponentBase$1 = function () {
  function D3ComponentBase(target) {
    var _this = this;

    classCallCheck$1(this, D3ComponentBase);

    this._target = target;
    this._on = {};
    this.props().map(function (x) {
      _this[x] = accessor$1.bind(_this, x);
    });
  }

  createClass$1(D3ComponentBase, [{
    key: "props",
    value: function props() {
      return ["data"];
    }
  }, {
    key: "on",
    value: function on(action, fn) {
      if (fn === undefined) return this._on[action] || noop$1;
      this._on[action] = fn;
      return this;
    }
  }]);
  return D3ComponentBase;
}();

function simpleTimeseries(target, data, w, h, min) {
  var width = w || 120,
      height = h || 30;

  var x = d3.scale.ordinal().domain(d3.range(0, data.length)).range(d3.range(0, width, width / data.length));
  var y = d3.scale.linear().range([4, height]).domain([min || d3.min(data), d3.max(data)]);

  var wrap = d3_updateable$1(target, "g", "g", data, function (x, i) {
    return 1;
  });

  d3_splat$1(wrap, "rect", "rect", function (x) {
    return x;
  }, function (x, i) {
    return i;
  }).attr("x", function (z, i) {
    return x(i);
  }).attr("width", width / data.length - 1.2).attr("y", function (z) {
    return height - y(z);
  }).attr("height", function (z) {
    return z ? y(z) : 0;
  });

  return wrap;
}

var classCallCheck$1$1 = function classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$1$1 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits$1 = function inherits$$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn$1 = function possibleConstructorReturn$$1(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
};

var BeforeAfterTimeseries = function (_D3ComponentBase) {
  inherits$1(BeforeAfterTimeseries, _D3ComponentBase);

  function BeforeAfterTimeseries(target) {
    classCallCheck$1$1(this, BeforeAfterTimeseries);

    var _this = possibleConstructorReturn$1(this, (BeforeAfterTimeseries.__proto__ || Object.getPrototypeOf(BeforeAfterTimeseries)).call(this, target));

    _this._wrapper_class = "ba-timeseries-wrap";
    return _this;
  }

  createClass$1$1(BeforeAfterTimeseries, [{
    key: 'props',
    value: function props() {
      return ["data", "before", "after", "wrapper_class"];
    }
  }, {
    key: 'draw',
    value: function draw() {

      var tsw = 250,
          unit_size = tsw / this.data().length,
          before_pos = this.before(),
          after_pos = this.after();

      var timeseries = d3_class$1(this._target, this.wrapper_class(), "svg").style("display", "block").style("margin", "auto").style("margin-bottom", "30px").attr("width", tsw + "px").attr("height", "70px");

      simpleTimeseries(timeseries, this.data(), tsw);

      // add decorations

      d3_class$1(timeseries, "middle", "line").style("stroke-dasharray", "1,5").attr("stroke-width", 1).attr("stroke", "black").attr("y1", 0).attr("y2", 55).attr("x1", tsw / 2).attr("x2", tsw / 2);

      d3_class$1(timeseries, "middle-text", "text").attr("x", tsw / 2).attr("y", 67).style("text-anchor", "middle").text("On-site");

      d3_class$1(timeseries, "before", "line").style("stroke-dasharray", "1,5").attr("stroke-width", 1).attr("stroke", "black").attr("y1", 39).attr("y2", 45).attr("x1", unit_size * before_pos).attr("x2", unit_size * before_pos);

      d3_class$1(timeseries, "before-text", "text").attr("x", unit_size * before_pos - 8).attr("y", 48).style("text-anchor", "end").text("Consideration");

      d3_class$1(timeseries, "window", "line").style("stroke-dasharray", "1,5").attr("stroke-width", 1).attr("stroke", "black").attr("y1", 45).attr("y2", 45).attr("x1", unit_size * before_pos).attr("x2", unit_size * (after_pos + 1) + 1);

      d3_class$1(timeseries, "after", "line").style("stroke-dasharray", "1,5").attr("stroke-width", 1).attr("stroke", "black").attr("y1", 39).attr("y2", 45).attr("x1", unit_size * (after_pos + 1)).attr("x2", unit_size * (after_pos + 1));

      d3_class$1(timeseries, "after-text", "text").attr("x", unit_size * (after_pos + 1) + 8).attr("y", 48).style("text-anchor", "start").text("Validation");

      return this;
    }
  }]);
  return BeforeAfterTimeseries;
}(D3ComponentBase$1);

// data schema: [{pop_percent, sample_percent_norm}

var DomainBullet = function (_D3ComponentBase) {
  inherits$1(DomainBullet, _D3ComponentBase);

  function DomainBullet(target) {
    classCallCheck$1$1(this, DomainBullet);

    var _this = possibleConstructorReturn$1(this, (DomainBullet.__proto__ || Object.getPrototypeOf(DomainBullet)).call(this));

    _this.target = target;
    return _this;
  }

  createClass$1$1(DomainBullet, [{
    key: "props",
    value: function props() {
      return ["data", "max"];
    }
  }, {
    key: "draw",
    value: function draw() {
      var width = (this.target.style("width").replace("px", "") || this.offsetWidth) - 50,
          height = 28;

      var x = d3.scale.linear().range([0, width]).domain([0, this.max()]);

      if (this.target.text()) this.target.text("");

      var bullet = d3_updateable$1(this.target, ".bullet", "div", this.data(), function (x) {
        return 1;
      }).classed("bullet", true).style("margin-top", "3px");

      var svg = d3_updateable$1(bullet, "svg", "svg", false, function (x) {
        return 1;
      }).attr("width", width).attr("height", height);

      d3_updateable$1(svg, ".bar-1", "rect", false, function (x) {
        return 1;
      }).classed("bar-1", true).attr("x", 0).attr("width", function (d) {
        return x(d.pop_percent);
      }).attr("height", height).attr("fill", "#888");

      d3_updateable$1(svg, ".bar-2", "rect", false, function (x) {
        return 1;
      }).classed("bar-2", true).attr("x", 0).attr("y", height / 4).attr("width", function (d) {
        return x(d.sample_percent_norm);
      }).attr("height", height / 2).attr("fill", "rgb(8, 29, 88)");

      return this;
    }
  }]);
  return DomainBullet;
}(D3ComponentBase$1);

var TabularBody = function (_D3ComponentBase) {
  inherits(TabularBody, _D3ComponentBase);

  function TabularBody(target) {
    classCallCheck(this, TabularBody);

    var _this = possibleConstructorReturn(this, (TabularBody.__proto__ || Object.getPrototypeOf(TabularBody)).call(this));

    _this._target = target;
    return _this;
  }

  createClass(TabularBody, [{
    key: 'props',
    value: function props() {
      return ["data", "split"];
    }
  }, {
    key: 'draw',
    value: function draw() {
      var _this2 = this;

      var self = this;

      var expansion_row = this._target;

      var expansion = d3_class(expansion_row, "expansion-urls").classed("scrollbox", true);

      expansion.html("");

      var url_row = d3_splat(expansion, ".url-row", "div", this.data().slice(0, 500), function (x) {
        return x.key;
      }).classed("url-row", true);

      var url_name = d3_updateable(url_row, ".name", "div").classed("name", true);

      d3_updateable(url_name, "input", "input").attr("type", "checkbox").on("click", self.on("stage-filter"));

      d3_class(url_name, "url", "a").text(function (x) {
        return _this2.split() ? x.key.split(_this2.split())[1] || x.key : x.key;
      }).attr("href", function (x) {
        return x.url ? x.url : undefined;
      }).attr("target", "_blank");

      d3_updateable(url_row, ".number", "div").classed("number", true).text(function (x) {
        return x.total;
      });

      d3_updateable(url_row, ".plot", "svg").classed("plot", true).each(function (x) {
        var dthis = d3.select(this);
        var values = x.values || x.value;
        simpleTimeseries(dthis, values, 144, 20);
      });
    }
  }]);
  return TabularBody;
}(D3ComponentBase);

__$styleInject(".expansion-urls-title {\n  height:36px;\n  line-height:36px;\n  display:inline-block;\n  vertical-align:top;\n}\n.expansion-urls-title .title {\n  width:265px;\n  font-weight:bold;\n  display:inline-block;\n  vertical-align:top;\n}\n\n.expansion-urls-title .view {\n  width:40px;\n  margin-left:20px;\n  margin-right:20px;\n  font-weight:bold;\n  display:inline-block;\n  vertical-align:top;\n}\n.expansion-urls-title .legend {\n  width:144px;\n  height:36px;\n  vertical-align:top;\n}\n\n.scrollbox {\n  display:inline-block;\n  vertical-align:top;\n  max-height:250px;\n  overflow:scroll;\n}\n\n.url-row .name {\n  width:260px;\n  overflow:hidden;\n  line-height:20px;\n  height:20px;\n  display:inline-block;\n}\n\n.url-row input {\n      margin-right:10px;\n      display:inline-block;\n      vertical-align:top;\n}\n\n.url-row .url {\n      display:inline-block;\n      text-overflow:ellipsis;\n      width:205px;\n}\n\n.url-row .number {\n      width:40px;\n      height:20px;\n      line-height:20px;\n      vertical-align:top;\n      text-align:center;\n      font-size:13px;\n      font-weight:bold;\n      margin-left:20px;\n      margin-right:20px;\n      display:inline-block;\n}\n\n.url-row .plot {\n      width:144px;\n      height:20px;\n      display:inline-block;\n}\n", undefined);

function tabular_timeseries(target) {
  return new TabularTimeseries(target);
}

var TabularTimeseries = function (_D3ComponentBase) {
  inherits(TabularTimeseries, _D3ComponentBase);

  function TabularTimeseries(target) {
    classCallCheck(this, TabularTimeseries);

    var _this = possibleConstructorReturn(this, (TabularTimeseries.__proto__ || Object.getPrototypeOf(TabularTimeseries)).call(this));

    _this._target = target;
    _this._headers = ["12am", "12pm", "12am"];
    return _this;
  }

  createClass(TabularTimeseries, [{
    key: 'props',
    value: function props() {
      return ["data", "label", "split", "headers"];
    }
  }, {
    key: 'draw',
    value: function draw() {
      var td = this._target;

      var title_row = d3_class(td, "title-row");
      var expansion_row = d3_class(td, "expansion-row");

      var header = new TabularHeader(title_row).label(this.label()).headers(this.headers()).draw();

      var body = new TabularBody(expansion_row).data(this.data()).split(this.split() || false).on("stage-filter", this.on("stage-filter")).draw();
    }
  }]);
  return TabularTimeseries;
}(D3ComponentBase);

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var d3$1 = createCommonjsModule(function (module) {
  !function () {
    var d3 = {
      version: "3.5.12"
    };
    var d3_arraySlice = [].slice,
        d3_array = function d3_array(list) {
      return d3_arraySlice.call(list);
    };
    var d3_document = this.document;
    function d3_documentElement(node) {
      return node && (node.ownerDocument || node.document || node).documentElement;
    }
    function d3_window(node) {
      return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
    }
    if (d3_document) {
      try {
        d3_array(d3_document.documentElement.childNodes)[0].nodeType;
      } catch (e) {
        d3_array = function d3_array(list) {
          var i = list.length,
              array = new Array(i);
          while (i--) {
            array[i] = list[i];
          }return array;
        };
      }
    }
    if (!Date.now) Date.now = function () {
      return +new Date();
    };
    if (d3_document) {
      try {
        d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
      } catch (error) {
        var d3_element_prototype = this.Element.prototype,
            d3_element_setAttribute = d3_element_prototype.setAttribute,
            d3_element_setAttributeNS = d3_element_prototype.setAttributeNS,
            d3_style_prototype = this.CSSStyleDeclaration.prototype,
            d3_style_setProperty = d3_style_prototype.setProperty;
        d3_element_prototype.setAttribute = function (name, value) {
          d3_element_setAttribute.call(this, name, value + "");
        };
        d3_element_prototype.setAttributeNS = function (space, local, value) {
          d3_element_setAttributeNS.call(this, space, local, value + "");
        };
        d3_style_prototype.setProperty = function (name, value, priority) {
          d3_style_setProperty.call(this, name, value + "", priority);
        };
      }
    }
    d3.ascending = d3_ascending;
    function d3_ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }
    d3.descending = function (a, b) {
      return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    };
    d3.min = function (array, f) {
      var i = -1,
          n = array.length,
          a,
          b;
      if (arguments.length === 1) {
        while (++i < n) {
          if ((b = array[i]) != null && b >= b) {
            a = b;
            break;
          }
        }while (++i < n) {
          if ((b = array[i]) != null && a > b) a = b;
        }
      } else {
        while (++i < n) {
          if ((b = f.call(array, array[i], i)) != null && b >= b) {
            a = b;
            break;
          }
        }while (++i < n) {
          if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
        }
      }
      return a;
    };
    d3.max = function (array, f) {
      var i = -1,
          n = array.length,
          a,
          b;
      if (arguments.length === 1) {
        while (++i < n) {
          if ((b = array[i]) != null && b >= b) {
            a = b;
            break;
          }
        }while (++i < n) {
          if ((b = array[i]) != null && b > a) a = b;
        }
      } else {
        while (++i < n) {
          if ((b = f.call(array, array[i], i)) != null && b >= b) {
            a = b;
            break;
          }
        }while (++i < n) {
          if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
        }
      }
      return a;
    };
    d3.extent = function (array, f) {
      var i = -1,
          n = array.length,
          a,
          b,
          c;
      if (arguments.length === 1) {
        while (++i < n) {
          if ((b = array[i]) != null && b >= b) {
            a = c = b;
            break;
          }
        }while (++i < n) {
          if ((b = array[i]) != null) {
            if (a > b) a = b;
            if (c < b) c = b;
          }
        }
      } else {
        while (++i < n) {
          if ((b = f.call(array, array[i], i)) != null && b >= b) {
            a = c = b;
            break;
          }
        }while (++i < n) {
          if ((b = f.call(array, array[i], i)) != null) {
            if (a > b) a = b;
            if (c < b) c = b;
          }
        }
      }
      return [a, c];
    };
    function d3_number(x) {
      return x === null ? NaN : +x;
    }
    function d3_numeric(x) {
      return !isNaN(x);
    }
    d3.sum = function (array, f) {
      var s = 0,
          n = array.length,
          a,
          i = -1;
      if (arguments.length === 1) {
        while (++i < n) {
          if (d3_numeric(a = +array[i])) s += a;
        }
      } else {
        while (++i < n) {
          if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
        }
      }
      return s;
    };
    d3.mean = function (array, f) {
      var s = 0,
          n = array.length,
          a,
          i = -1,
          j = n;
      if (arguments.length === 1) {
        while (++i < n) {
          if (d3_numeric(a = d3_number(array[i]))) s += a;else --j;
        }
      } else {
        while (++i < n) {
          if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a;else --j;
        }
      }
      if (j) return s / j;
    };
    d3.quantile = function (values, p) {
      var H = (values.length - 1) * p + 1,
          h = Math.floor(H),
          v = +values[h - 1],
          e = H - h;
      return e ? v + e * (values[h] - v) : v;
    };
    d3.median = function (array, f) {
      var numbers = [],
          n = array.length,
          a,
          i = -1;
      if (arguments.length === 1) {
        while (++i < n) {
          if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
        }
      } else {
        while (++i < n) {
          if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
        }
      }
      if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
    };
    d3.variance = function (array, f) {
      var n = array.length,
          m = 0,
          a,
          d,
          s = 0,
          i = -1,
          j = 0;
      if (arguments.length === 1) {
        while (++i < n) {
          if (d3_numeric(a = d3_number(array[i]))) {
            d = a - m;
            m += d / ++j;
            s += d * (a - m);
          }
        }
      } else {
        while (++i < n) {
          if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
            d = a - m;
            m += d / ++j;
            s += d * (a - m);
          }
        }
      }
      if (j > 1) return s / (j - 1);
    };
    d3.deviation = function () {
      var v = d3.variance.apply(this, arguments);
      return v ? Math.sqrt(v) : v;
    };
    function d3_bisector(compare) {
      return {
        left: function left(a, x, lo, hi) {
          if (arguments.length < 3) lo = 0;
          if (arguments.length < 4) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
          }
          return lo;
        },
        right: function right(a, x, lo, hi) {
          if (arguments.length < 3) lo = 0;
          if (arguments.length < 4) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
          }
          return lo;
        }
      };
    }
    var d3_bisect = d3_bisector(d3_ascending);
    d3.bisectLeft = d3_bisect.left;
    d3.bisect = d3.bisectRight = d3_bisect.right;
    d3.bisector = function (f) {
      return d3_bisector(f.length === 1 ? function (d, x) {
        return d3_ascending(f(d), x);
      } : f);
    };
    d3.shuffle = function (array, i0, i1) {
      if ((m = arguments.length) < 3) {
        i1 = array.length;
        if (m < 2) i0 = 0;
      }
      var m = i1 - i0,
          t,
          i;
      while (m) {
        i = Math.random() * m-- | 0;
        t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
      }
      return array;
    };
    d3.permute = function (array, indexes) {
      var i = indexes.length,
          permutes = new Array(i);
      while (i--) {
        permutes[i] = array[indexes[i]];
      }return permutes;
    };
    d3.pairs = function (array) {
      var i = 0,
          n = array.length - 1,
          p0,
          p1 = array[0],
          pairs = new Array(n < 0 ? 0 : n);
      while (i < n) {
        pairs[i] = [p0 = p1, p1 = array[++i]];
      }return pairs;
    };
    d3.zip = function () {
      if (!(n = arguments.length)) return [];
      for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m;) {
        for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n;) {
          zip[j] = arguments[j][i];
        }
      }
      return zips;
    };
    function d3_zipLength(d) {
      return d.length;
    }
    d3.transpose = function (matrix) {
      return d3.zip.apply(d3, matrix);
    };
    d3.keys = function (map) {
      var keys = [];
      for (var key in map) {
        keys.push(key);
      }return keys;
    };
    d3.values = function (map) {
      var values = [];
      for (var key in map) {
        values.push(map[key]);
      }return values;
    };
    d3.entries = function (map) {
      var entries = [];
      for (var key in map) {
        entries.push({
          key: key,
          value: map[key]
        });
      }return entries;
    };
    d3.merge = function (arrays) {
      var n = arrays.length,
          m,
          i = -1,
          j = 0,
          merged,
          array;
      while (++i < n) {
        j += arrays[i].length;
      }merged = new Array(j);
      while (--n >= 0) {
        array = arrays[n];
        m = array.length;
        while (--m >= 0) {
          merged[--j] = array[m];
        }
      }
      return merged;
    };
    var abs = Math.abs;
    d3.range = function (start, stop, step) {
      if (arguments.length < 3) {
        step = 1;
        if (arguments.length < 2) {
          stop = start;
          start = 0;
        }
      }
      if ((stop - start) / step === Infinity) throw new Error("infinite range");
      var range = [],
          k = d3_range_integerScale(abs(step)),
          i = -1,
          j;
      start *= k, stop *= k, step *= k;
      if (step < 0) while ((j = start + step * ++i) > stop) {
        range.push(j / k);
      } else while ((j = start + step * ++i) < stop) {
        range.push(j / k);
      }return range;
    };
    function d3_range_integerScale(x) {
      var k = 1;
      while (x * k % 1) {
        k *= 10;
      }return k;
    }
    function d3_class(ctor, properties) {
      for (var key in properties) {
        Object.defineProperty(ctor.prototype, key, {
          value: properties[key],
          enumerable: false
        });
      }
    }
    d3.map = function (object, f) {
      var map = new d3_Map();
      if (object instanceof d3_Map) {
        object.forEach(function (key, value) {
          map.set(key, value);
        });
      } else if (Array.isArray(object)) {
        var i = -1,
            n = object.length,
            o;
        if (arguments.length === 1) while (++i < n) {
          map.set(i, object[i]);
        } else while (++i < n) {
          map.set(f.call(object, o = object[i], i), o);
        }
      } else {
        for (var key in object) {
          map.set(key, object[key]);
        }
      }
      return map;
    };
    function d3_Map() {
      this._ = Object.create(null);
    }
    var d3_map_proto = "__proto__",
        d3_map_zero = "\x00";
    d3_class(d3_Map, {
      has: d3_map_has,
      get: function get$$1(key) {
        return this._[d3_map_escape(key)];
      },
      set: function set$$1(key, value) {
        return this._[d3_map_escape(key)] = value;
      },
      remove: d3_map_remove,
      keys: d3_map_keys,
      values: function values() {
        var values = [];
        for (var key in this._) {
          values.push(this._[key]);
        }return values;
      },
      entries: function entries() {
        var entries = [];
        for (var key in this._) {
          entries.push({
            key: d3_map_unescape(key),
            value: this._[key]
          });
        }return entries;
      },
      size: d3_map_size,
      empty: d3_map_empty,
      forEach: function forEach(f) {
        for (var key in this._) {
          f.call(this, d3_map_unescape(key), this._[key]);
        }
      }
    });
    function d3_map_escape(key) {
      return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
    }
    function d3_map_unescape(key) {
      return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
    }
    function d3_map_has(key) {
      return d3_map_escape(key) in this._;
    }
    function d3_map_remove(key) {
      return (key = d3_map_escape(key)) in this._ && delete this._[key];
    }
    function d3_map_keys() {
      var keys = [];
      for (var key in this._) {
        keys.push(d3_map_unescape(key));
      }return keys;
    }
    function d3_map_size() {
      var size = 0;
      for (var key in this._) {
        ++size;
      }return size;
    }
    function d3_map_empty() {
      for (var key in this._) {
        return false;
      }return true;
    }
    d3.nest = function () {
      var nest = {},
          keys = [],
          sortKeys = [],
          sortValues,
          rollup;
      function map(mapType, array, depth) {
        if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
        var i = -1,
            n = array.length,
            key = keys[depth++],
            keyValue,
            object,
            setter,
            valuesByKey = new d3_Map(),
            values;
        while (++i < n) {
          if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
            values.push(object);
          } else {
            valuesByKey.set(keyValue, [object]);
          }
        }
        if (mapType) {
          object = mapType();
          setter = function setter(keyValue, values) {
            object.set(keyValue, map(mapType, values, depth));
          };
        } else {
          object = {};
          setter = function setter(keyValue, values) {
            object[keyValue] = map(mapType, values, depth);
          };
        }
        valuesByKey.forEach(setter);
        return object;
      }
      function entries(map, depth) {
        if (depth >= keys.length) return map;
        var array = [],
            sortKey = sortKeys[depth++];
        map.forEach(function (key, keyMap) {
          array.push({
            key: key,
            values: entries(keyMap, depth)
          });
        });
        return sortKey ? array.sort(function (a, b) {
          return sortKey(a.key, b.key);
        }) : array;
      }
      nest.map = function (array, mapType) {
        return map(mapType, array, 0);
      };
      nest.entries = function (array) {
        return entries(map(d3.map, array, 0), 0);
      };
      nest.key = function (d) {
        keys.push(d);
        return nest;
      };
      nest.sortKeys = function (order) {
        sortKeys[keys.length - 1] = order;
        return nest;
      };
      nest.sortValues = function (order) {
        sortValues = order;
        return nest;
      };
      nest.rollup = function (f) {
        rollup = f;
        return nest;
      };
      return nest;
    };
    d3.set = function (array) {
      var set$$1 = new d3_Set();
      if (array) for (var i = 0, n = array.length; i < n; ++i) {
        set$$1.add(array[i]);
      }return set$$1;
    };
    function d3_Set() {
      this._ = Object.create(null);
    }
    d3_class(d3_Set, {
      has: d3_map_has,
      add: function add(key) {
        this._[d3_map_escape(key += "")] = true;
        return key;
      },
      remove: d3_map_remove,
      values: d3_map_keys,
      size: d3_map_size,
      empty: d3_map_empty,
      forEach: function forEach(f) {
        for (var key in this._) {
          f.call(this, d3_map_unescape(key));
        }
      }
    });
    d3.behavior = {};
    function d3_identity(d) {
      return d;
    }
    d3.rebind = function (target, source) {
      var i = 1,
          n = arguments.length,
          method;
      while (++i < n) {
        target[method = arguments[i]] = d3_rebind(target, source, source[method]);
      }return target;
    };
    function d3_rebind(target, source, method) {
      return function () {
        var value = method.apply(source, arguments);
        return value === source ? target : value;
      };
    }
    function d3_vendorSymbol(object, name) {
      if (name in object) return name;
      name = name.charAt(0).toUpperCase() + name.slice(1);
      for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
        var prefixName = d3_vendorPrefixes[i] + name;
        if (prefixName in object) return prefixName;
      }
    }
    var d3_vendorPrefixes = ["webkit", "ms", "moz", "Moz", "o", "O"];
    function d3_noop() {}
    d3.dispatch = function () {
      var dispatch = new d3_dispatch(),
          i = -1,
          n = arguments.length;
      while (++i < n) {
        dispatch[arguments[i]] = d3_dispatch_event(dispatch);
      }return dispatch;
    };
    function d3_dispatch() {}
    d3_dispatch.prototype.on = function (type, listener) {
      var i = type.indexOf("."),
          name = "";
      if (i >= 0) {
        name = type.slice(i + 1);
        type = type.slice(0, i);
      }
      if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
      if (arguments.length === 2) {
        if (listener == null) for (type in this) {
          if (this.hasOwnProperty(type)) this[type].on(name, null);
        }
        return this;
      }
    };
    function d3_dispatch_event(dispatch) {
      var listeners = [],
          listenerByName = new d3_Map();
      function event() {
        var z = listeners,
            i = -1,
            n = z.length,
            l;
        while (++i < n) {
          if (l = z[i].on) l.apply(this, arguments);
        }return dispatch;
      }
      event.on = function (name, listener) {
        var l = listenerByName.get(name),
            i;
        if (arguments.length < 2) return l && l.on;
        if (l) {
          l.on = null;
          listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
          listenerByName.remove(name);
        }
        if (listener) listeners.push(listenerByName.set(name, {
          on: listener
        }));
        return dispatch;
      };
      return event;
    }
    d3.event = null;
    function d3_eventPreventDefault() {
      d3.event.preventDefault();
    }
    function d3_eventSource() {
      var e = d3.event,
          s;
      while (s = e.sourceEvent) {
        e = s;
      }return e;
    }
    function d3_eventDispatch(target) {
      var dispatch = new d3_dispatch(),
          i = 0,
          n = arguments.length;
      while (++i < n) {
        dispatch[arguments[i]] = d3_dispatch_event(dispatch);
      }dispatch.of = function (thiz, argumentz) {
        return function (e1) {
          try {
            var e0 = e1.sourceEvent = d3.event;
            e1.target = target;
            d3.event = e1;
            dispatch[e1.type].apply(thiz, argumentz);
          } finally {
            d3.event = e0;
          }
        };
      };
      return dispatch;
    }
    d3.requote = function (s) {
      return s.replace(d3_requote_re, "\\$&");
    };
    var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    var d3_subclass = {}.__proto__ ? function (object, prototype) {
      object.__proto__ = prototype;
    } : function (object, prototype) {
      for (var property in prototype) {
        object[property] = prototype[property];
      }
    };
    function d3_selection(groups) {
      d3_subclass(groups, d3_selectionPrototype);
      return groups;
    }
    var d3_select = function d3_select(s, n) {
      return n.querySelector(s);
    },
        d3_selectAll = function d3_selectAll(s, n) {
      return n.querySelectorAll(s);
    },
        _d3_selectMatches = function d3_selectMatches(n, s) {
      var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
      _d3_selectMatches = function d3_selectMatches(n, s) {
        return d3_selectMatcher.call(n, s);
      };
      return _d3_selectMatches(n, s);
    };
    if (typeof Sizzle === "function") {
      d3_select = function d3_select(s, n) {
        return Sizzle(s, n)[0] || null;
      };
      d3_selectAll = Sizzle;
      _d3_selectMatches = Sizzle.matchesSelector;
    }
    d3.selection = function () {
      return d3.select(d3_document.documentElement);
    };
    var d3_selectionPrototype = d3.selection.prototype = [];
    d3_selectionPrototype.select = function (selector) {
      var subgroups = [],
          subgroup,
          subnode,
          group,
          node;
      selector = d3_selection_selector(selector);
      for (var j = -1, m = this.length; ++j < m;) {
        subgroups.push(subgroup = []);
        subgroup.parentNode = (group = this[j]).parentNode;
        for (var i = -1, n = group.length; ++i < n;) {
          if (node = group[i]) {
            subgroup.push(subnode = selector.call(node, node.__data__, i, j));
            if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
          } else {
            subgroup.push(null);
          }
        }
      }
      return d3_selection(subgroups);
    };
    function d3_selection_selector(selector) {
      return typeof selector === "function" ? selector : function () {
        return d3_select(selector, this);
      };
    }
    d3_selectionPrototype.selectAll = function (selector) {
      var subgroups = [],
          subgroup,
          node;
      selector = d3_selection_selectorAll(selector);
      for (var j = -1, m = this.length; ++j < m;) {
        for (var group = this[j], i = -1, n = group.length; ++i < n;) {
          if (node = group[i]) {
            subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
            subgroup.parentNode = node;
          }
        }
      }
      return d3_selection(subgroups);
    };
    function d3_selection_selectorAll(selector) {
      return typeof selector === "function" ? selector : function () {
        return d3_selectAll(selector, this);
      };
    }
    var d3_nsPrefix = {
      svg: "http://www.w3.org/2000/svg",
      xhtml: "http://www.w3.org/1999/xhtml",
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };
    d3.ns = {
      prefix: d3_nsPrefix,
      qualify: function qualify(name) {
        var i = name.indexOf(":"),
            prefix = name;
        if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
        return d3_nsPrefix.hasOwnProperty(prefix) ? {
          space: d3_nsPrefix[prefix],
          local: name
        } : name;
      }
    };
    d3_selectionPrototype.attr = function (name, value) {
      if (arguments.length < 2) {
        if (typeof name === "string") {
          var node = this.node();
          name = d3.ns.qualify(name);
          return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
        }
        for (value in name) {
          this.each(d3_selection_attr(value, name[value]));
        }return this;
      }
      return this.each(d3_selection_attr(name, value));
    };
    function d3_selection_attr(name, value) {
      name = d3.ns.qualify(name);
      function attrNull() {
        this.removeAttribute(name);
      }
      function attrNullNS() {
        this.removeAttributeNS(name.space, name.local);
      }
      function attrConstant() {
        this.setAttribute(name, value);
      }
      function attrConstantNS() {
        this.setAttributeNS(name.space, name.local, value);
      }
      function attrFunction() {
        var x = value.apply(this, arguments);
        if (x == null) this.removeAttribute(name);else this.setAttribute(name, x);
      }
      function attrFunctionNS() {
        var x = value.apply(this, arguments);
        if (x == null) this.removeAttributeNS(name.space, name.local);else this.setAttributeNS(name.space, name.local, x);
      }
      return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
    }
    function d3_collapse(s) {
      return s.trim().replace(/\s+/g, " ");
    }
    d3_selectionPrototype.classed = function (name, value) {
      if (arguments.length < 2) {
        if (typeof name === "string") {
          var node = this.node(),
              n = (name = d3_selection_classes(name)).length,
              i = -1;
          if (value = node.classList) {
            while (++i < n) {
              if (!value.contains(name[i])) return false;
            }
          } else {
            value = node.getAttribute("class");
            while (++i < n) {
              if (!d3_selection_classedRe(name[i]).test(value)) return false;
            }
          }
          return true;
        }
        for (value in name) {
          this.each(d3_selection_classed(value, name[value]));
        }return this;
      }
      return this.each(d3_selection_classed(name, value));
    };
    function d3_selection_classedRe(name) {
      return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
    }
    function d3_selection_classes(name) {
      return (name + "").trim().split(/^|\s+/);
    }
    function d3_selection_classed(name, value) {
      name = d3_selection_classes(name).map(d3_selection_classedName);
      var n = name.length;
      function classedConstant() {
        var i = -1;
        while (++i < n) {
          name[i](this, value);
        }
      }
      function classedFunction() {
        var i = -1,
            x = value.apply(this, arguments);
        while (++i < n) {
          name[i](this, x);
        }
      }
      return typeof value === "function" ? classedFunction : classedConstant;
    }
    function d3_selection_classedName(name) {
      var re = d3_selection_classedRe(name);
      return function (node, value) {
        if (c = node.classList) return value ? c.add(name) : c.remove(name);
        var c = node.getAttribute("class") || "";
        if (value) {
          re.lastIndex = 0;
          if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
        } else {
          node.setAttribute("class", d3_collapse(c.replace(re, " ")));
        }
      };
    }
    d3_selectionPrototype.style = function (name, value, priority) {
      var n = arguments.length;
      if (n < 3) {
        if (typeof name !== "string") {
          if (n < 2) value = "";
          for (priority in name) {
            this.each(d3_selection_style(priority, name[priority], value));
          }return this;
        }
        if (n < 2) {
          var node = this.node();
          return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
        }
        priority = "";
      }
      return this.each(d3_selection_style(name, value, priority));
    };
    function d3_selection_style(name, value, priority) {
      function styleNull() {
        this.style.removeProperty(name);
      }
      function styleConstant() {
        this.style.setProperty(name, value, priority);
      }
      function styleFunction() {
        var x = value.apply(this, arguments);
        if (x == null) this.style.removeProperty(name);else this.style.setProperty(name, x, priority);
      }
      return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
    }
    d3_selectionPrototype.property = function (name, value) {
      if (arguments.length < 2) {
        if (typeof name === "string") return this.node()[name];
        for (value in name) {
          this.each(d3_selection_property(value, name[value]));
        }return this;
      }
      return this.each(d3_selection_property(name, value));
    };
    function d3_selection_property(name, value) {
      function propertyNull() {
        delete this[name];
      }
      function propertyConstant() {
        this[name] = value;
      }
      function propertyFunction() {
        var x = value.apply(this, arguments);
        if (x == null) delete this[name];else this[name] = x;
      }
      return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
    }
    d3_selectionPrototype.text = function (value) {
      return arguments.length ? this.each(typeof value === "function" ? function () {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
      } : value == null ? function () {
        this.textContent = "";
      } : function () {
        this.textContent = value;
      }) : this.node().textContent;
    };
    d3_selectionPrototype.html = function (value) {
      return arguments.length ? this.each(typeof value === "function" ? function () {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
      } : value == null ? function () {
        this.innerHTML = "";
      } : function () {
        this.innerHTML = value;
      }) : this.node().innerHTML;
    };
    d3_selectionPrototype.append = function (name) {
      name = d3_selection_creator(name);
      return this.select(function () {
        return this.appendChild(name.apply(this, arguments));
      });
    };
    function d3_selection_creator(name) {
      function create() {
        var document = this.ownerDocument,
            namespace = this.namespaceURI;
        return namespace ? document.createElementNS(namespace, name) : document.createElement(name);
      }
      function createNS() {
        return this.ownerDocument.createElementNS(name.space, name.local);
      }
      return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
    }
    d3_selectionPrototype.insert = function (name, before) {
      name = d3_selection_creator(name);
      before = d3_selection_selector(before);
      return this.select(function () {
        return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
      });
    };
    d3_selectionPrototype.remove = function () {
      return this.each(d3_selectionRemove);
    };
    function d3_selectionRemove() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    }
    d3_selectionPrototype.data = function (value, key) {
      var i = -1,
          n = this.length,
          group,
          node;
      if (!arguments.length) {
        value = new Array(n = (group = this[0]).length);
        while (++i < n) {
          if (node = group[i]) {
            value[i] = node.__data__;
          }
        }
        return value;
      }
      function bind(group, groupData) {
        var i,
            n = group.length,
            m = groupData.length,
            n0 = Math.min(n, m),
            updateNodes = new Array(m),
            enterNodes = new Array(m),
            exitNodes = new Array(n),
            node,
            nodeData;
        if (key) {
          var nodeByKeyValue = new d3_Map(),
              keyValues = new Array(n),
              keyValue;
          for (i = -1; ++i < n;) {
            if (node = group[i]) {
              if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
                exitNodes[i] = node;
              } else {
                nodeByKeyValue.set(keyValue, node);
              }
              keyValues[i] = keyValue;
            }
          }
          for (i = -1; ++i < m;) {
            if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
              enterNodes[i] = d3_selection_dataNode(nodeData);
            } else if (node !== true) {
              updateNodes[i] = node;
              node.__data__ = nodeData;
            }
            nodeByKeyValue.set(keyValue, true);
          }
          for (i = -1; ++i < n;) {
            if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
              exitNodes[i] = group[i];
            }
          }
        } else {
          for (i = -1; ++i < n0;) {
            node = group[i];
            nodeData = groupData[i];
            if (node) {
              node.__data__ = nodeData;
              updateNodes[i] = node;
            } else {
              enterNodes[i] = d3_selection_dataNode(nodeData);
            }
          }
          for (; i < m; ++i) {
            enterNodes[i] = d3_selection_dataNode(groupData[i]);
          }
          for (; i < n; ++i) {
            exitNodes[i] = group[i];
          }
        }
        enterNodes.update = updateNodes;
        enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
        enter.push(enterNodes);
        update.push(updateNodes);
        exit.push(exitNodes);
      }
      var enter = d3_selection_enter([]),
          update = d3_selection([]),
          exit = d3_selection([]);
      if (typeof value === "function") {
        while (++i < n) {
          bind(group = this[i], value.call(group, group.parentNode.__data__, i));
        }
      } else {
        while (++i < n) {
          bind(group = this[i], value);
        }
      }
      update.enter = function () {
        return enter;
      };
      update.exit = function () {
        return exit;
      };
      return update;
    };
    function d3_selection_dataNode(data) {
      return {
        __data__: data
      };
    }
    d3_selectionPrototype.datum = function (value) {
      return arguments.length ? this.property("__data__", value) : this.property("__data__");
    };
    d3_selectionPrototype.filter = function (filter) {
      var subgroups = [],
          subgroup,
          group,
          node;
      if (typeof filter !== "function") filter = d3_selection_filter(filter);
      for (var j = 0, m = this.length; j < m; j++) {
        subgroups.push(subgroup = []);
        subgroup.parentNode = (group = this[j]).parentNode;
        for (var i = 0, n = group.length; i < n; i++) {
          if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
            subgroup.push(node);
          }
        }
      }
      return d3_selection(subgroups);
    };
    function d3_selection_filter(selector) {
      return function () {
        return _d3_selectMatches(this, selector);
      };
    }
    d3_selectionPrototype.order = function () {
      for (var j = -1, m = this.length; ++j < m;) {
        for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
          if (node = group[i]) {
            if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
            next = node;
          }
        }
      }
      return this;
    };
    d3_selectionPrototype.sort = function (comparator) {
      comparator = d3_selection_sortComparator.apply(this, arguments);
      for (var j = -1, m = this.length; ++j < m;) {
        this[j].sort(comparator);
      }return this.order();
    };
    function d3_selection_sortComparator(comparator) {
      if (!arguments.length) comparator = d3_ascending;
      return function (a, b) {
        return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
      };
    }
    d3_selectionPrototype.each = function (callback) {
      return d3_selection_each(this, function (node, i, j) {
        callback.call(node, node.__data__, i, j);
      });
    };
    function d3_selection_each(groups, callback) {
      for (var j = 0, m = groups.length; j < m; j++) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
          if (node = group[i]) callback(node, i, j);
        }
      }
      return groups;
    }
    d3_selectionPrototype.call = function (callback) {
      var args = d3_array(arguments);
      callback.apply(args[0] = this, args);
      return this;
    };
    d3_selectionPrototype.empty = function () {
      return !this.node();
    };
    d3_selectionPrototype.node = function () {
      for (var j = 0, m = this.length; j < m; j++) {
        for (var group = this[j], i = 0, n = group.length; i < n; i++) {
          var node = group[i];
          if (node) return node;
        }
      }
      return null;
    };
    d3_selectionPrototype.size = function () {
      var n = 0;
      d3_selection_each(this, function () {
        ++n;
      });
      return n;
    };
    function d3_selection_enter(selection) {
      d3_subclass(selection, d3_selection_enterPrototype);
      return selection;
    }
    var d3_selection_enterPrototype = [];
    d3.selection.enter = d3_selection_enter;
    d3.selection.enter.prototype = d3_selection_enterPrototype;
    d3_selection_enterPrototype.append = d3_selectionPrototype.append;
    d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
    d3_selection_enterPrototype.node = d3_selectionPrototype.node;
    d3_selection_enterPrototype.call = d3_selectionPrototype.call;
    d3_selection_enterPrototype.size = d3_selectionPrototype.size;
    d3_selection_enterPrototype.select = function (selector) {
      var subgroups = [],
          subgroup,
          subnode,
          upgroup,
          group,
          node;
      for (var j = -1, m = this.length; ++j < m;) {
        upgroup = (group = this[j]).update;
        subgroups.push(subgroup = []);
        subgroup.parentNode = group.parentNode;
        for (var i = -1, n = group.length; ++i < n;) {
          if (node = group[i]) {
            subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
            subnode.__data__ = node.__data__;
          } else {
            subgroup.push(null);
          }
        }
      }
      return d3_selection(subgroups);
    };
    d3_selection_enterPrototype.insert = function (name, before) {
      if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
      return d3_selectionPrototype.insert.call(this, name, before);
    };
    function d3_selection_enterInsertBefore(enter) {
      var i0, j0;
      return function (d, i, j) {
        var group = enter[j].update,
            n = group.length,
            node;
        if (j != j0) j0 = j, i0 = 0;
        if (i >= i0) i0 = i + 1;
        while (!(node = group[i0]) && ++i0 < n) {}
        return node;
      };
    }
    d3.select = function (node) {
      var group;
      if (typeof node === "string") {
        group = [d3_select(node, d3_document)];
        group.parentNode = d3_document.documentElement;
      } else {
        group = [node];
        group.parentNode = d3_documentElement(node);
      }
      return d3_selection([group]);
    };
    d3.selectAll = function (nodes) {
      var group;
      if (typeof nodes === "string") {
        group = d3_array(d3_selectAll(nodes, d3_document));
        group.parentNode = d3_document.documentElement;
      } else {
        group = d3_array(nodes);
        group.parentNode = null;
      }
      return d3_selection([group]);
    };
    d3_selectionPrototype.on = function (type, listener, capture) {
      var n = arguments.length;
      if (n < 3) {
        if (typeof type !== "string") {
          if (n < 2) listener = false;
          for (capture in type) {
            this.each(d3_selection_on(capture, type[capture], listener));
          }return this;
        }
        if (n < 2) return (n = this.node()["__on" + type]) && n._;
        capture = false;
      }
      return this.each(d3_selection_on(type, listener, capture));
    };
    function d3_selection_on(type, listener, capture) {
      var name = "__on" + type,
          i = type.indexOf("."),
          wrap = d3_selection_onListener;
      if (i > 0) type = type.slice(0, i);
      var filter = d3_selection_onFilters.get(type);
      if (filter) type = filter, wrap = d3_selection_onFilter;
      function onRemove() {
        var l = this[name];
        if (l) {
          this.removeEventListener(type, l, l.$);
          delete this[name];
        }
      }
      function onAdd() {
        var l = wrap(listener, d3_array(arguments));
        onRemove.call(this);
        this.addEventListener(type, this[name] = l, l.$ = capture);
        l._ = listener;
      }
      function removeAll() {
        var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"),
            match;
        for (var name in this) {
          if (match = name.match(re)) {
            var l = this[name];
            this.removeEventListener(match[1], l, l.$);
            delete this[name];
          }
        }
      }
      return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
    }
    var d3_selection_onFilters = d3.map({
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    });
    if (d3_document) {
      d3_selection_onFilters.forEach(function (k) {
        if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
      });
    }
    function d3_selection_onListener(listener, argumentz) {
      return function (e) {
        var o = d3.event;
        d3.event = e;
        argumentz[0] = this.__data__;
        try {
          listener.apply(this, argumentz);
        } finally {
          d3.event = o;
        }
      };
    }
    function d3_selection_onFilter(listener, argumentz) {
      var l = d3_selection_onListener(listener, argumentz);
      return function (e) {
        var target = this,
            related = e.relatedTarget;
        if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
          l.call(target, e);
        }
      };
    }
    var d3_event_dragSelect,
        d3_event_dragId = 0;
    function d3_event_dragSuppress(node) {
      var name = ".dragsuppress-" + ++d3_event_dragId,
          click = "click" + name,
          w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
      if (d3_event_dragSelect == null) {
        d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
      }
      if (d3_event_dragSelect) {
        var style = d3_documentElement(node).style,
            select = style[d3_event_dragSelect];
        style[d3_event_dragSelect] = "none";
      }
      return function (suppressClick) {
        w.on(name, null);
        if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
        if (suppressClick) {
          var off = function off() {
            w.on(click, null);
          };
          w.on(click, function () {
            d3_eventPreventDefault();
            off();
          }, true);
          setTimeout(off, 0);
        }
      };
    }
    d3.mouse = function (container) {
      return d3_mousePoint(container, d3_eventSource());
    };
    var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
    function d3_mousePoint(container, e) {
      if (e.changedTouches) e = e.changedTouches[0];
      var svg = container.ownerSVGElement || container;
      if (svg.createSVGPoint) {
        var point = svg.createSVGPoint();
        if (d3_mouse_bug44083 < 0) {
          var window = d3_window(container);
          if (window.scrollX || window.scrollY) {
            svg = d3.select("body").append("svg").style({
              position: "absolute",
              top: 0,
              left: 0,
              margin: 0,
              padding: 0,
              border: "none"
            }, "important");
            var ctm = svg[0][0].getScreenCTM();
            d3_mouse_bug44083 = !(ctm.f || ctm.e);
            svg.remove();
          }
        }
        if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY;else point.x = e.clientX, point.y = e.clientY;
        point = point.matrixTransform(container.getScreenCTM().inverse());
        return [point.x, point.y];
      }
      var rect = container.getBoundingClientRect();
      return [e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop];
    }
    d3.touch = function (container, touches, identifier) {
      if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
      if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
        if ((touch = touches[i]).identifier === identifier) {
          return d3_mousePoint(container, touch);
        }
      }
    };
    d3.behavior.drag = function () {
      var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"),
          origin = null,
          mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"),
          touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
      function drag() {
        this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
      }
      function dragstart(id, position, subject, move, end) {
        return function () {
          var that = this,
              target = d3.event.target,
              parent = that.parentNode,
              dispatch = event.of(that, arguments),
              dragged = 0,
              dragId = id(),
              dragName = ".drag" + (dragId == null ? "" : "-" + dragId),
              dragOffset,
              dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended),
              dragRestore = d3_event_dragSuppress(target),
              position0 = position(parent, dragId);
          if (origin) {
            dragOffset = origin.apply(that, arguments);
            dragOffset = [dragOffset.x - position0[0], dragOffset.y - position0[1]];
          } else {
            dragOffset = [0, 0];
          }
          dispatch({
            type: "dragstart"
          });
          function moved() {
            var position1 = position(parent, dragId),
                dx,
                dy;
            if (!position1) return;
            dx = position1[0] - position0[0];
            dy = position1[1] - position0[1];
            dragged |= dx | dy;
            position0 = position1;
            dispatch({
              type: "drag",
              x: position1[0] + dragOffset[0],
              y: position1[1] + dragOffset[1],
              dx: dx,
              dy: dy
            });
          }
          function ended() {
            if (!position(parent, dragId)) return;
            dragSubject.on(move + dragName, null).on(end + dragName, null);
            dragRestore(dragged);
            dispatch({
              type: "dragend"
            });
          }
        };
      }
      drag.origin = function (x) {
        if (!arguments.length) return origin;
        origin = x;
        return drag;
      };
      return d3.rebind(drag, event, "on");
    };
    function d3_behavior_dragTouchId() {
      return d3.event.changedTouches[0].identifier;
    }
    d3.touches = function (container, touches) {
      if (arguments.length < 2) touches = d3_eventSource().touches;
      return touches ? d3_array(touches).map(function (touch) {
        var point = d3_mousePoint(container, touch);
        point.identifier = touch.identifier;
        return point;
      }) : [];
    };
    var ε = 1e-6,
        ε2 = ε * ε,
        π = Math.PI,
        τ = 2 * π,
        τε = τ - ε,
        halfπ = π / 2,
        d3_radians = π / 180,
        d3_degrees = 180 / π;
    function d3_sgn(x) {
      return x > 0 ? 1 : x < 0 ? -1 : 0;
    }
    function d3_cross2d(a, b, c) {
      return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
    }
    function d3_acos(x) {
      return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
    }
    function d3_asin(x) {
      return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
    }
    function d3_sinh(x) {
      return ((x = Math.exp(x)) - 1 / x) / 2;
    }
    function d3_cosh(x) {
      return ((x = Math.exp(x)) + 1 / x) / 2;
    }
    function d3_tanh(x) {
      return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }
    function d3_haversin(x) {
      return (x = Math.sin(x / 2)) * x;
    }
    var ρ = Math.SQRT2,
        ρ2 = 2,
        ρ4 = 4;
    d3.interpolateZoom = function (p0, p1) {
      var ux0 = p0[0],
          uy0 = p0[1],
          w0 = p0[2],
          ux1 = p1[0],
          uy1 = p1[1],
          w1 = p1[2],
          dx = ux1 - ux0,
          dy = uy1 - uy0,
          d2 = dx * dx + dy * dy,
          i,
          S;
      if (d2 < ε2) {
        S = Math.log(w1 / w0) / ρ;
        i = function i(t) {
          return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S)];
        };
      } else {
        var d1 = Math.sqrt(d2),
            b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1),
            b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1),
            r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
            r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / ρ;
        i = function i(t) {
          var s = t * S,
              coshr0 = d3_cosh(r0),
              u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
          return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0)];
        };
      }
      i.duration = S * 1e3;
      return i;
    };
    d3.behavior.zoom = function () {
      var view = {
        x: 0,
        y: 0,
        k: 1
      },
          translate0,
          center0,
          center,
          size = [960, 500],
          scaleExtent = d3_behavior_zoomInfinity,
          duration = 250,
          zooming = 0,
          mousedown = "mousedown.zoom",
          mousemove = "mousemove.zoom",
          mouseup = "mouseup.zoom",
          mousewheelTimer,
          touchstart = "touchstart.zoom",
          touchtime,
          event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"),
          x0,
          x1,
          y0,
          y1;
      if (!d3_behavior_zoomWheel) {
        d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function d3_behavior_zoomDelta() {
          return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
        }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function d3_behavior_zoomDelta() {
          return d3.event.wheelDelta;
        }, "mousewheel") : (d3_behavior_zoomDelta = function d3_behavior_zoomDelta() {
          return -d3.event.detail;
        }, "MozMousePixelScroll");
      }
      function zoom(g) {
        g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
      }
      zoom.event = function (g) {
        g.each(function () {
          var dispatch = event.of(this, arguments),
              view1 = view;
          if (d3_transitionInheritId) {
            d3.select(this).transition().each("start.zoom", function () {
              view = this.__chart__ || {
                x: 0,
                y: 0,
                k: 1
              };
              zoomstarted(dispatch);
            }).tween("zoom:zoom", function () {
              var dx = size[0],
                  dy = size[1],
                  cx = center0 ? center0[0] : dx / 2,
                  cy = center0 ? center0[1] : dy / 2,
                  i = d3.interpolateZoom([(cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k], [(cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k]);
              return function (t) {
                var l = i(t),
                    k = dx / l[2];
                this.__chart__ = view = {
                  x: cx - l[0] * k,
                  y: cy - l[1] * k,
                  k: k
                };
                zoomed(dispatch);
              };
            }).each("interrupt.zoom", function () {
              zoomended(dispatch);
            }).each("end.zoom", function () {
              zoomended(dispatch);
            });
          } else {
            this.__chart__ = view;
            zoomstarted(dispatch);
            zoomed(dispatch);
            zoomended(dispatch);
          }
        });
      };
      zoom.translate = function (_) {
        if (!arguments.length) return [view.x, view.y];
        view = {
          x: +_[0],
          y: +_[1],
          k: view.k
        };
        rescale();
        return zoom;
      };
      zoom.scale = function (_) {
        if (!arguments.length) return view.k;
        view = {
          x: view.x,
          y: view.y,
          k: null
        };
        scaleTo(+_);
        rescale();
        return zoom;
      };
      zoom.scaleExtent = function (_) {
        if (!arguments.length) return scaleExtent;
        scaleExtent = _ == null ? d3_behavior_zoomInfinity : [+_[0], +_[1]];
        return zoom;
      };
      zoom.center = function (_) {
        if (!arguments.length) return center;
        center = _ && [+_[0], +_[1]];
        return zoom;
      };
      zoom.size = function (_) {
        if (!arguments.length) return size;
        size = _ && [+_[0], +_[1]];
        return zoom;
      };
      zoom.duration = function (_) {
        if (!arguments.length) return duration;
        duration = +_;
        return zoom;
      };
      zoom.x = function (z) {
        if (!arguments.length) return x1;
        x1 = z;
        x0 = z.copy();
        view = {
          x: 0,
          y: 0,
          k: 1
        };
        return zoom;
      };
      zoom.y = function (z) {
        if (!arguments.length) return y1;
        y1 = z;
        y0 = z.copy();
        view = {
          x: 0,
          y: 0,
          k: 1
        };
        return zoom;
      };
      function location(p) {
        return [(p[0] - view.x) / view.k, (p[1] - view.y) / view.k];
      }
      function point(l) {
        return [l[0] * view.k + view.x, l[1] * view.k + view.y];
      }
      function scaleTo(s) {
        view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
      }
      function translateTo(p, l) {
        l = point(l);
        view.x += p[0] - l[0];
        view.y += p[1] - l[1];
      }
      function zoomTo(that, p, l, k) {
        that.__chart__ = {
          x: view.x,
          y: view.y,
          k: view.k
        };
        scaleTo(Math.pow(2, k));
        translateTo(center0 = p, l);
        that = d3.select(that);
        if (duration > 0) that = that.transition().duration(duration);
        that.call(zoom.event);
      }
      function rescale() {
        if (x1) x1.domain(x0.range().map(function (x) {
          return (x - view.x) / view.k;
        }).map(x0.invert));
        if (y1) y1.domain(y0.range().map(function (y) {
          return (y - view.y) / view.k;
        }).map(y0.invert));
      }
      function zoomstarted(dispatch) {
        if (!zooming++) dispatch({
          type: "zoomstart"
        });
      }
      function zoomed(dispatch) {
        rescale();
        dispatch({
          type: "zoom",
          scale: view.k,
          translate: [view.x, view.y]
        });
      }
      function zoomended(dispatch) {
        if (! --zooming) dispatch({
          type: "zoomend"
        }), center0 = null;
      }
      function mousedowned() {
        var that = this,
            dispatch = event.of(that, arguments),
            dragged = 0,
            subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended),
            location0 = location(d3.mouse(that)),
            dragRestore = d3_event_dragSuppress(that);
        d3_selection_interrupt.call(that);
        zoomstarted(dispatch);
        function moved() {
          dragged = 1;
          translateTo(d3.mouse(that), location0);
          zoomed(dispatch);
        }
        function ended() {
          subject.on(mousemove, null).on(mouseup, null);
          dragRestore(dragged);
          zoomended(dispatch);
        }
      }
      function touchstarted() {
        var that = this,
            dispatch = event.of(that, arguments),
            locations0 = {},
            distance0 = 0,
            scale0,
            zoomName = ".zoom-" + d3.event.changedTouches[0].identifier,
            touchmove = "touchmove" + zoomName,
            touchend = "touchend" + zoomName,
            targets = [],
            subject = d3.select(that),
            dragRestore = d3_event_dragSuppress(that);
        started();
        zoomstarted(dispatch);
        subject.on(mousedown, null).on(touchstart, started);
        function relocate() {
          var touches = d3.touches(that);
          scale0 = view.k;
          touches.forEach(function (t) {
            if (t.identifier in locations0) locations0[t.identifier] = location(t);
          });
          return touches;
        }
        function started() {
          var target = d3.event.target;
          d3.select(target).on(touchmove, moved).on(touchend, ended);
          targets.push(target);
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            locations0[changed[i].identifier] = null;
          }
          var touches = relocate(),
              now = Date.now();
          if (touches.length === 1) {
            if (now - touchtime < 500) {
              var p = touches[0];
              zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
              d3_eventPreventDefault();
            }
            touchtime = now;
          } else if (touches.length > 1) {
            var p = touches[0],
                q = touches[1],
                dx = p[0] - q[0],
                dy = p[1] - q[1];
            distance0 = dx * dx + dy * dy;
          }
        }
        function moved() {
          var touches = d3.touches(that),
              p0,
              l0,
              p1,
              l1;
          d3_selection_interrupt.call(that);
          for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
            p1 = touches[i];
            if (l1 = locations0[p1.identifier]) {
              if (l0) break;
              p0 = p1, l0 = l1;
            }
          }
          if (l1) {
            var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1,
                scale1 = distance0 && Math.sqrt(distance1 / distance0);
            p0 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
            l0 = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
            scaleTo(scale1 * scale0);
          }
          touchtime = null;
          translateTo(p0, l0);
          zoomed(dispatch);
        }
        function ended() {
          if (d3.event.touches.length) {
            var changed = d3.event.changedTouches;
            for (var i = 0, n = changed.length; i < n; ++i) {
              delete locations0[changed[i].identifier];
            }
            for (var identifier in locations0) {
              return void relocate();
            }
          }
          d3.selectAll(targets).on(zoomName, null);
          subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
          dragRestore();
          zoomended(dispatch);
        }
      }
      function mousewheeled() {
        var dispatch = event.of(this, arguments);
        if (mousewheelTimer) clearTimeout(mousewheelTimer);else d3_selection_interrupt.call(this), translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
        mousewheelTimer = setTimeout(function () {
          mousewheelTimer = null;
          zoomended(dispatch);
        }, 50);
        d3_eventPreventDefault();
        scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
        translateTo(center0, translate0);
        zoomed(dispatch);
      }
      function dblclicked() {
        var p = d3.mouse(this),
            k = Math.log(view.k) / Math.LN2;
        zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
      }
      return d3.rebind(zoom, event, "on");
    };
    var d3_behavior_zoomInfinity = [0, Infinity],
        d3_behavior_zoomDelta,
        d3_behavior_zoomWheel;
    d3.color = d3_color;
    function d3_color() {}
    d3_color.prototype.toString = function () {
      return this.rgb() + "";
    };
    d3.hsl = d3_hsl;
    function d3_hsl(h, s, l) {
      return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
    }
    var d3_hslPrototype = d3_hsl.prototype = new d3_color();
    d3_hslPrototype.brighter = function (k) {
      k = Math.pow(.7, arguments.length ? k : 1);
      return new d3_hsl(this.h, this.s, this.l / k);
    };
    d3_hslPrototype.darker = function (k) {
      k = Math.pow(.7, arguments.length ? k : 1);
      return new d3_hsl(this.h, this.s, k * this.l);
    };
    d3_hslPrototype.rgb = function () {
      return d3_hsl_rgb(this.h, this.s, this.l);
    };
    function d3_hsl_rgb(h, s, l) {
      var m1, m2;
      h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
      s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
      l = l < 0 ? 0 : l > 1 ? 1 : l;
      m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
      m1 = 2 * l - m2;
      function v(h) {
        if (h > 360) h -= 360;else if (h < 0) h += 360;
        if (h < 60) return m1 + (m2 - m1) * h / 60;
        if (h < 180) return m2;
        if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
        return m1;
      }
      function vv(h) {
        return Math.round(v(h) * 255);
      }
      return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
    }
    d3.hcl = d3_hcl;
    function d3_hcl(h, c, l) {
      return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
    }
    var d3_hclPrototype = d3_hcl.prototype = new d3_color();
    d3_hclPrototype.brighter = function (k) {
      return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
    };
    d3_hclPrototype.darker = function (k) {
      return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
    };
    d3_hclPrototype.rgb = function () {
      return d3_hcl_lab(this.h, this.c, this.l).rgb();
    };
    function d3_hcl_lab(h, c, l) {
      if (isNaN(h)) h = 0;
      if (isNaN(c)) c = 0;
      return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
    }
    d3.lab = d3_lab;
    function d3_lab(l, a, b) {
      return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
    }
    var d3_lab_K = 18;
    var d3_lab_X = .95047,
        d3_lab_Y = 1,
        d3_lab_Z = 1.08883;
    var d3_labPrototype = d3_lab.prototype = new d3_color();
    d3_labPrototype.brighter = function (k) {
      return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
    };
    d3_labPrototype.darker = function (k) {
      return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
    };
    d3_labPrototype.rgb = function () {
      return d3_lab_rgb(this.l, this.a, this.b);
    };
    function d3_lab_rgb(l, a, b) {
      var y = (l + 16) / 116,
          x = y + a / 500,
          z = y - b / 200;
      x = d3_lab_xyz(x) * d3_lab_X;
      y = d3_lab_xyz(y) * d3_lab_Y;
      z = d3_lab_xyz(z) * d3_lab_Z;
      return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
    }
    function d3_lab_hcl(l, a, b) {
      return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
    }
    function d3_lab_xyz(x) {
      return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
    }
    function d3_xyz_lab(x) {
      return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
    }
    function d3_xyz_rgb(r) {
      return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
    }
    d3.rgb = d3_rgb;
    function d3_rgb(r, g, b) {
      return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
    }
    function d3_rgbNumber(value) {
      return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
    }
    function d3_rgbString(value) {
      return d3_rgbNumber(value) + "";
    }
    var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
    d3_rgbPrototype.brighter = function (k) {
      k = Math.pow(.7, arguments.length ? k : 1);
      var r = this.r,
          g = this.g,
          b = this.b,
          i = 30;
      if (!r && !g && !b) return new d3_rgb(i, i, i);
      if (r && r < i) r = i;
      if (g && g < i) g = i;
      if (b && b < i) b = i;
      return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
    };
    d3_rgbPrototype.darker = function (k) {
      k = Math.pow(.7, arguments.length ? k : 1);
      return new d3_rgb(k * this.r, k * this.g, k * this.b);
    };
    d3_rgbPrototype.hsl = function () {
      return d3_rgb_hsl(this.r, this.g, this.b);
    };
    d3_rgbPrototype.toString = function () {
      return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
    };
    function d3_rgb_hex(v) {
      return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
    }
    function d3_rgb_parse(format, rgb, hsl) {
      var r = 0,
          g = 0,
          b = 0,
          m1,
          m2,
          color;
      m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
      if (m1) {
        m2 = m1[2].split(",");
        switch (m1[1]) {
          case "hsl":
            {
              return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
            }

          case "rgb":
            {
              return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
            }
        }
      }
      if (color = d3_rgb_names.get(format)) {
        return rgb(color.r, color.g, color.b);
      }
      if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
        if (format.length === 4) {
          r = (color & 3840) >> 4;
          r = r >> 4 | r;
          g = color & 240;
          g = g >> 4 | g;
          b = color & 15;
          b = b << 4 | b;
        } else if (format.length === 7) {
          r = (color & 16711680) >> 16;
          g = (color & 65280) >> 8;
          b = color & 255;
        }
      }
      return rgb(r, g, b);
    }
    function d3_rgb_hsl(r, g, b) {
      var min = Math.min(r /= 255, g /= 255, b /= 255),
          max = Math.max(r, g, b),
          d = max - min,
          h,
          s,
          l = (max + min) / 2;
      if (d) {
        s = l < .5 ? d / (max + min) : d / (2 - max - min);
        if (r == max) h = (g - b) / d + (g < b ? 6 : 0);else if (g == max) h = (b - r) / d + 2;else h = (r - g) / d + 4;
        h *= 60;
      } else {
        h = NaN;
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new d3_hsl(h, s, l);
    }
    function d3_rgb_lab(r, g, b) {
      r = d3_rgb_xyz(r);
      g = d3_rgb_xyz(g);
      b = d3_rgb_xyz(b);
      var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X),
          y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y),
          z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
      return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
    }
    function d3_rgb_xyz(r) {
      return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
    }
    function d3_rgb_parseNumber(c) {
      var f = parseFloat(c);
      return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
    }
    var d3_rgb_names = d3.map({
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    });
    d3_rgb_names.forEach(function (key, value) {
      d3_rgb_names.set(key, d3_rgbNumber(value));
    });
    function d3_functor(v) {
      return typeof v === "function" ? v : function () {
        return v;
      };
    }
    d3.functor = d3_functor;
    d3.xhr = d3_xhrType(d3_identity);
    function d3_xhrType(response) {
      return function (url, mimeType, callback) {
        if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, mimeType = null;
        return d3_xhr(url, mimeType, response, callback);
      };
    }
    function d3_xhr(url, mimeType, response, callback) {
      var xhr = {},
          dispatch = d3.dispatch("beforesend", "progress", "load", "error"),
          headers = {},
          request = new XMLHttpRequest(),
          responseType = null;
      if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
      "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function () {
        request.readyState > 3 && respond();
      };
      function respond() {
        var status = request.status,
            result;
        if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
          try {
            result = response.call(xhr, request);
          } catch (e) {
            dispatch.error.call(xhr, e);
            return;
          }
          dispatch.load.call(xhr, result);
        } else {
          dispatch.error.call(xhr, request);
        }
      }
      request.onprogress = function (event) {
        var o = d3.event;
        d3.event = event;
        try {
          dispatch.progress.call(xhr, request);
        } finally {
          d3.event = o;
        }
      };
      xhr.header = function (name, value) {
        name = (name + "").toLowerCase();
        if (arguments.length < 2) return headers[name];
        if (value == null) delete headers[name];else headers[name] = value + "";
        return xhr;
      };
      xhr.mimeType = function (value) {
        if (!arguments.length) return mimeType;
        mimeType = value == null ? null : value + "";
        return xhr;
      };
      xhr.responseType = function (value) {
        if (!arguments.length) return responseType;
        responseType = value;
        return xhr;
      };
      xhr.response = function (value) {
        response = value;
        return xhr;
      };
      ["get", "post"].forEach(function (method) {
        xhr[method] = function () {
          return xhr.send.apply(xhr, [method].concat(d3_array(arguments)));
        };
      });
      xhr.send = function (method, data, callback) {
        if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
        request.open(method, url, true);
        if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
        if (request.setRequestHeader) for (var name in headers) {
          request.setRequestHeader(name, headers[name]);
        }if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
        if (responseType != null) request.responseType = responseType;
        if (callback != null) xhr.on("error", callback).on("load", function (request) {
          callback(null, request);
        });
        dispatch.beforesend.call(xhr, request);
        request.send(data == null ? null : data);
        return xhr;
      };
      xhr.abort = function () {
        request.abort();
        return xhr;
      };
      d3.rebind(xhr, dispatch, "on");
      return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
    }
    function d3_xhr_fixCallback(callback) {
      return callback.length === 1 ? function (error, request) {
        callback(error == null ? request : null);
      } : callback;
    }
    function d3_xhrHasResponse(request) {
      var type = request.responseType;
      return type && type !== "text" ? request.response : request.responseText;
    }
    d3.dsv = function (delimiter, mimeType) {
      var reFormat = new RegExp('["' + delimiter + "\n]"),
          delimiterCode = delimiter.charCodeAt(0);
      function dsv(url, row, callback) {
        if (arguments.length < 3) callback = row, row = null;
        var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
        xhr.row = function (_) {
          return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
        };
        return xhr;
      }
      function response(request) {
        return dsv.parse(request.responseText);
      }
      function typedResponse(f) {
        return function (request) {
          return dsv.parse(request.responseText, f);
        };
      }
      dsv.parse = function (text, f) {
        var o;
        return dsv.parseRows(text, function (row, i) {
          if (o) return o(row, i - 1);
          var a = new Function("d", "return {" + row.map(function (name, i) {
            return JSON.stringify(name) + ": d[" + i + "]";
          }).join(",") + "}");
          o = f ? function (row, i) {
            return f(a(row), i);
          } : a;
        });
      };
      dsv.parseRows = function (text, f) {
        var EOL = {},
            EOF = {},
            rows = [],
            N = text.length,
            I = 0,
            n = 0,
            t,
            eol;
        function token() {
          if (I >= N) return EOF;
          if (eol) return eol = false, EOL;
          var j = I;
          if (text.charCodeAt(j) === 34) {
            var i = j;
            while (i++ < N) {
              if (text.charCodeAt(i) === 34) {
                if (text.charCodeAt(i + 1) !== 34) break;
                ++i;
              }
            }
            I = i + 2;
            var c = text.charCodeAt(i + 1);
            if (c === 13) {
              eol = true;
              if (text.charCodeAt(i + 2) === 10) ++I;
            } else if (c === 10) {
              eol = true;
            }
            return text.slice(j + 1, i).replace(/""/g, '"');
          }
          while (I < N) {
            var c = text.charCodeAt(I++),
                k = 1;
            if (c === 10) eol = true;else if (c === 13) {
              eol = true;
              if (text.charCodeAt(I) === 10) ++I, ++k;
            } else if (c !== delimiterCode) continue;
            return text.slice(j, I - k);
          }
          return text.slice(j);
        }
        while ((t = token()) !== EOF) {
          var a = [];
          while (t !== EOL && t !== EOF) {
            a.push(t);
            t = token();
          }
          if (f && (a = f(a, n++)) == null) continue;
          rows.push(a);
        }
        return rows;
      };
      dsv.format = function (rows) {
        if (Array.isArray(rows[0])) return dsv.formatRows(rows);
        var fieldSet = new d3_Set(),
            fields = [];
        rows.forEach(function (row) {
          for (var field in row) {
            if (!fieldSet.has(field)) {
              fields.push(fieldSet.add(field));
            }
          }
        });
        return [fields.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
          return fields.map(function (field) {
            return formatValue(row[field]);
          }).join(delimiter);
        })).join("\n");
      };
      dsv.formatRows = function (rows) {
        return rows.map(formatRow).join("\n");
      };
      function formatRow(row) {
        return row.map(formatValue).join(delimiter);
      }
      function formatValue(text) {
        return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
      }
      return dsv;
    };
    d3.csv = d3.dsv(",", "text/csv");
    d3.tsv = d3.dsv("	", "text/tab-separated-values");
    var d3_timer_queueHead,
        d3_timer_queueTail,
        d3_timer_interval,
        d3_timer_timeout,
        d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function (callback) {
      setTimeout(callback, 17);
    };
    d3.timer = function () {
      d3_timer.apply(this, arguments);
    };
    function d3_timer(callback, delay, then) {
      var n = arguments.length;
      if (n < 2) delay = 0;
      if (n < 3) then = Date.now();
      var time = then + delay,
          timer = {
        c: callback,
        t: time,
        n: null
      };
      if (d3_timer_queueTail) d3_timer_queueTail.n = timer;else d3_timer_queueHead = timer;
      d3_timer_queueTail = timer;
      if (!d3_timer_interval) {
        d3_timer_timeout = clearTimeout(d3_timer_timeout);
        d3_timer_interval = 1;
        d3_timer_frame(d3_timer_step);
      }
      return timer;
    }
    function d3_timer_step() {
      var now = d3_timer_mark(),
          delay = d3_timer_sweep() - now;
      if (delay > 24) {
        if (isFinite(delay)) {
          clearTimeout(d3_timer_timeout);
          d3_timer_timeout = setTimeout(d3_timer_step, delay);
        }
        d3_timer_interval = 0;
      } else {
        d3_timer_interval = 1;
        d3_timer_frame(d3_timer_step);
      }
    }
    d3.timer.flush = function () {
      d3_timer_mark();
      d3_timer_sweep();
    };
    function d3_timer_mark() {
      var now = Date.now(),
          timer = d3_timer_queueHead;
      while (timer) {
        if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
        timer = timer.n;
      }
      return now;
    }
    function d3_timer_sweep() {
      var t0,
          t1 = d3_timer_queueHead,
          time = Infinity;
      while (t1) {
        if (t1.c) {
          if (t1.t < time) time = t1.t;
          t1 = (t0 = t1).n;
        } else {
          t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
        }
      }
      d3_timer_queueTail = t0;
      return time;
    }
    function d3_format_precision(x, p) {
      return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
    }
    d3.round = function (x, n) {
      return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
    };
    var d3_formatPrefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"].map(d3_formatPrefix);
    d3.formatPrefix = function (value, precision) {
      var i = 0;
      if (value = +value) {
        if (value < 0) value *= -1;
        if (precision) value = d3.round(value, d3_format_precision(value, precision));
        i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
        i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
      }
      return d3_formatPrefixes[8 + i / 3];
    };
    function d3_formatPrefix(d, i) {
      var k = Math.pow(10, abs(8 - i) * 3);
      return {
        scale: i > 8 ? function (d) {
          return d / k;
        } : function (d) {
          return d * k;
        },
        symbol: d
      };
    }
    function d3_locale_numberFormat(locale) {
      var locale_decimal = locale.decimal,
          locale_thousands = locale.thousands,
          locale_grouping = locale.grouping,
          locale_currency = locale.currency,
          formatGroup = locale_grouping && locale_thousands ? function (value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = locale_grouping[0],
            length = 0;
        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = locale_grouping[j = (j + 1) % locale_grouping.length];
        }
        return t.reverse().join(locale_thousands);
      } : d3_identity;
      return function (specifier) {
        var match = d3_format_re.exec(specifier),
            fill = match[1] || " ",
            align = match[2] || ">",
            sign = match[3] || "-",
            symbol = match[4] || "",
            zfill = match[5],
            width = +match[6],
            comma = match[7],
            precision = match[8],
            type = match[9],
            scale = 1,
            prefix = "",
            suffix = "",
            integer = false,
            exponent = true;
        if (precision) precision = +precision.substring(1);
        if (zfill || fill === "0" && align === "=") {
          zfill = fill = "0";
          align = "=";
        }
        switch (type) {
          case "n":
            comma = true;
            type = "g";
            break;

          case "%":
            scale = 100;
            suffix = "%";
            type = "f";
            break;

          case "p":
            scale = 100;
            suffix = "%";
            type = "r";
            break;

          case "b":
          case "o":
          case "x":
          case "X":
            if (symbol === "#") prefix = "0" + type.toLowerCase();

          case "c":
            exponent = false;

          case "d":
            integer = true;
            precision = 0;
            break;

          case "s":
            scale = -1;
            type = "r";
            break;
        }
        if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
        if (type == "r" && !precision) type = "g";
        if (precision != null) {
          if (type == "g") precision = Math.max(1, Math.min(21, precision));else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
        }
        type = d3_format_types.get(type) || d3_format_typeDefault;
        var zcomma = zfill && comma;
        return function (value) {
          var fullSuffix = suffix;
          if (integer && value % 1) return "";
          var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
          if (scale < 0) {
            var unit = d3.formatPrefix(value, precision);
            value = unit.scale(value);
            fullSuffix = unit.symbol + suffix;
          } else {
            value *= scale;
          }
          value = type(value, precision);
          var i = value.lastIndexOf("."),
              before,
              after;
          if (i < 0) {
            var j = exponent ? value.lastIndexOf("e") : -1;
            if (j < 0) before = value, after = "";else before = value.substring(0, j), after = value.substring(j);
          } else {
            before = value.substring(0, i);
            after = locale_decimal + value.substring(i + 1);
          }
          if (!zfill && comma) before = formatGroup(before, Infinity);
          var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length),
              padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
          if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
          negative += prefix;
          value = before + after;
          return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
        };
      };
    }
    var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
    var d3_format_types = d3.map({
      b: function b(x) {
        return x.toString(2);
      },
      c: function c(x) {
        return String.fromCharCode(x);
      },
      o: function o(x) {
        return x.toString(8);
      },
      x: function x(_x) {
        return _x.toString(16);
      },
      X: function X(x) {
        return x.toString(16).toUpperCase();
      },
      g: function g(x, p) {
        return x.toPrecision(p);
      },
      e: function e(x, p) {
        return x.toExponential(p);
      },
      f: function f(x, p) {
        return x.toFixed(p);
      },
      r: function r(x, p) {
        return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
      }
    });
    function d3_format_typeDefault(x) {
      return x + "";
    }
    var d3_time = d3.time = {},
        d3_date = Date;
    function d3_date_utc() {
      this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
    }
    d3_date_utc.prototype = {
      getDate: function getDate() {
        return this._.getUTCDate();
      },
      getDay: function getDay() {
        return this._.getUTCDay();
      },
      getFullYear: function getFullYear() {
        return this._.getUTCFullYear();
      },
      getHours: function getHours() {
        return this._.getUTCHours();
      },
      getMilliseconds: function getMilliseconds() {
        return this._.getUTCMilliseconds();
      },
      getMinutes: function getMinutes() {
        return this._.getUTCMinutes();
      },
      getMonth: function getMonth() {
        return this._.getUTCMonth();
      },
      getSeconds: function getSeconds() {
        return this._.getUTCSeconds();
      },
      getTime: function getTime() {
        return this._.getTime();
      },
      getTimezoneOffset: function getTimezoneOffset() {
        return 0;
      },
      valueOf: function valueOf() {
        return this._.valueOf();
      },
      setDate: function setDate() {
        d3_time_prototype.setUTCDate.apply(this._, arguments);
      },
      setDay: function setDay() {
        d3_time_prototype.setUTCDay.apply(this._, arguments);
      },
      setFullYear: function setFullYear() {
        d3_time_prototype.setUTCFullYear.apply(this._, arguments);
      },
      setHours: function setHours() {
        d3_time_prototype.setUTCHours.apply(this._, arguments);
      },
      setMilliseconds: function setMilliseconds() {
        d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
      },
      setMinutes: function setMinutes() {
        d3_time_prototype.setUTCMinutes.apply(this._, arguments);
      },
      setMonth: function setMonth() {
        d3_time_prototype.setUTCMonth.apply(this._, arguments);
      },
      setSeconds: function setSeconds() {
        d3_time_prototype.setUTCSeconds.apply(this._, arguments);
      },
      setTime: function setTime() {
        d3_time_prototype.setTime.apply(this._, arguments);
      }
    };
    var d3_time_prototype = Date.prototype;
    function d3_time_interval(local, step, number) {
      function round(date) {
        var d0 = local(date),
            d1 = offset(d0, 1);
        return date - d0 < d1 - date ? d0 : d1;
      }
      function ceil(date) {
        step(date = local(new d3_date(date - 1)), 1);
        return date;
      }
      function offset(date, k) {
        step(date = new d3_date(+date), k);
        return date;
      }
      function range(t0, t1, dt) {
        var time = ceil(t0),
            times = [];
        if (dt > 1) {
          while (time < t1) {
            if (!(number(time) % dt)) times.push(new Date(+time));
            step(time, 1);
          }
        } else {
          while (time < t1) {
            times.push(new Date(+time)), step(time, 1);
          }
        }
        return times;
      }
      function range_utc(t0, t1, dt) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date_utc();
          utc._ = t0;
          return range(utc, t1, dt);
        } finally {
          d3_date = Date;
        }
      }
      local.floor = local;
      local.round = round;
      local.ceil = ceil;
      local.offset = offset;
      local.range = range;
      var utc = local.utc = d3_time_interval_utc(local);
      utc.floor = utc;
      utc.round = d3_time_interval_utc(round);
      utc.ceil = d3_time_interval_utc(ceil);
      utc.offset = d3_time_interval_utc(offset);
      utc.range = range_utc;
      return local;
    }
    function d3_time_interval_utc(method) {
      return function (date, k) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date_utc();
          utc._ = date;
          return method(utc, k)._;
        } finally {
          d3_date = Date;
        }
      };
    }
    d3_time.year = d3_time_interval(function (date) {
      date = d3_time.day(date);
      date.setMonth(0, 1);
      return date;
    }, function (date, offset) {
      date.setFullYear(date.getFullYear() + offset);
    }, function (date) {
      return date.getFullYear();
    });
    d3_time.years = d3_time.year.range;
    d3_time.years.utc = d3_time.year.utc.range;
    d3_time.day = d3_time_interval(function (date) {
      var day = new d3_date(2e3, 0);
      day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
      return day;
    }, function (date, offset) {
      date.setDate(date.getDate() + offset);
    }, function (date) {
      return date.getDate() - 1;
    });
    d3_time.days = d3_time.day.range;
    d3_time.days.utc = d3_time.day.utc.range;
    d3_time.dayOfYear = function (date) {
      var year = d3_time.year(date);
      return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
    };
    ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"].forEach(function (day, i) {
      i = 7 - i;
      var interval = d3_time[day] = d3_time_interval(function (date) {
        (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
        return date;
      }, function (date, offset) {
        date.setDate(date.getDate() + Math.floor(offset) * 7);
      }, function (date) {
        var day = d3_time.year(date).getDay();
        return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
      });
      d3_time[day + "s"] = interval.range;
      d3_time[day + "s"].utc = interval.utc.range;
      d3_time[day + "OfYear"] = function (date) {
        var day = d3_time.year(date).getDay();
        return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
      };
    });
    d3_time.week = d3_time.sunday;
    d3_time.weeks = d3_time.sunday.range;
    d3_time.weeks.utc = d3_time.sunday.utc.range;
    d3_time.weekOfYear = d3_time.sundayOfYear;
    function d3_locale_timeFormat(locale) {
      var locale_dateTime = locale.dateTime,
          locale_date = locale.date,
          locale_time = locale.time,
          locale_periods = locale.periods,
          locale_days = locale.days,
          locale_shortDays = locale.shortDays,
          locale_months = locale.months,
          locale_shortMonths = locale.shortMonths;
      function d3_time_format(template) {
        var n = template.length;
        function format(date) {
          var string = [],
              i = -1,
              j = 0,
              c,
              p,
              f;
          while (++i < n) {
            if (template.charCodeAt(i) === 37) {
              string.push(template.slice(j, i));
              if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
              if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
              string.push(c);
              j = i + 1;
            }
          }
          string.push(template.slice(j, i));
          return string.join("");
        }
        format.parse = function (string) {
          var d = {
            y: 1900,
            m: 0,
            d: 1,
            H: 0,
            M: 0,
            S: 0,
            L: 0,
            Z: null
          },
              i = d3_time_parse(d, template, string, 0);
          if (i != string.length) return null;
          if ("p" in d) d.H = d.H % 12 + d.p * 12;
          var localZ = d.Z != null && d3_date !== d3_date_utc,
              date = new (localZ ? d3_date_utc : d3_date)();
          if ("j" in d) date.setFullYear(d.y, 0, d.j);else if ("W" in d || "U" in d) {
            if (!("w" in d)) d.w = "W" in d ? 1 : 0;
            date.setFullYear(d.y, 0, 1);
            date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
          } else date.setFullYear(d.y, d.m, d.d);
          date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
          return localZ ? date._ : date;
        };
        format.toString = function () {
          return template;
        };
        return format;
      }
      function d3_time_parse(date, template, string, j) {
        var c,
            p,
            t,
            i = 0,
            n = template.length,
            m = string.length;
        while (i < n) {
          if (j >= m) return -1;
          c = template.charCodeAt(i++);
          if (c === 37) {
            t = template.charAt(i++);
            p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
            if (!p || (j = p(date, string, j)) < 0) return -1;
          } else if (c != string.charCodeAt(j++)) {
            return -1;
          }
        }
        return j;
      }
      d3_time_format.utc = function (template) {
        var local = d3_time_format(template);
        function format(date) {
          try {
            d3_date = d3_date_utc;
            var utc = new d3_date();
            utc._ = date;
            return local(utc);
          } finally {
            d3_date = Date;
          }
        }
        format.parse = function (string) {
          try {
            d3_date = d3_date_utc;
            var date = local.parse(string);
            return date && date._;
          } finally {
            d3_date = Date;
          }
        };
        format.toString = local.toString;
        return format;
      };
      d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
      var d3_time_periodLookup = d3.map(),
          d3_time_dayRe = d3_time_formatRe(locale_days),
          d3_time_dayLookup = d3_time_formatLookup(locale_days),
          d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays),
          d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays),
          d3_time_monthRe = d3_time_formatRe(locale_months),
          d3_time_monthLookup = d3_time_formatLookup(locale_months),
          d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths),
          d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
      locale_periods.forEach(function (p, i) {
        d3_time_periodLookup.set(p.toLowerCase(), i);
      });
      var d3_time_formats = {
        a: function a(d) {
          return locale_shortDays[d.getDay()];
        },
        A: function A(d) {
          return locale_days[d.getDay()];
        },
        b: function b(d) {
          return locale_shortMonths[d.getMonth()];
        },
        B: function B(d) {
          return locale_months[d.getMonth()];
        },
        c: d3_time_format(locale_dateTime),
        d: function d(_d, p) {
          return d3_time_formatPad(_d.getDate(), p, 2);
        },
        e: function e(d, p) {
          return d3_time_formatPad(d.getDate(), p, 2);
        },
        H: function H(d, p) {
          return d3_time_formatPad(d.getHours(), p, 2);
        },
        I: function I(d, p) {
          return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
        },
        j: function j(d, p) {
          return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
        },
        L: function L(d, p) {
          return d3_time_formatPad(d.getMilliseconds(), p, 3);
        },
        m: function m(d, p) {
          return d3_time_formatPad(d.getMonth() + 1, p, 2);
        },
        M: function M(d, p) {
          return d3_time_formatPad(d.getMinutes(), p, 2);
        },
        p: function p(d) {
          return locale_periods[+(d.getHours() >= 12)];
        },
        S: function S(d, p) {
          return d3_time_formatPad(d.getSeconds(), p, 2);
        },
        U: function U(d, p) {
          return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
        },
        w: function w(d) {
          return d.getDay();
        },
        W: function W(d, p) {
          return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
        },
        x: d3_time_format(locale_date),
        X: d3_time_format(locale_time),
        y: function y(d, p) {
          return d3_time_formatPad(d.getFullYear() % 100, p, 2);
        },
        Y: function Y(d, p) {
          return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
        },
        Z: d3_time_zone,
        "%": function _() {
          return "%";
        }
      };
      var d3_time_parsers = {
        a: d3_time_parseWeekdayAbbrev,
        A: d3_time_parseWeekday,
        b: d3_time_parseMonthAbbrev,
        B: d3_time_parseMonth,
        c: d3_time_parseLocaleFull,
        d: d3_time_parseDay,
        e: d3_time_parseDay,
        H: d3_time_parseHour24,
        I: d3_time_parseHour24,
        j: d3_time_parseDayOfYear,
        L: d3_time_parseMilliseconds,
        m: d3_time_parseMonthNumber,
        M: d3_time_parseMinutes,
        p: d3_time_parseAmPm,
        S: d3_time_parseSeconds,
        U: d3_time_parseWeekNumberSunday,
        w: d3_time_parseWeekdayNumber,
        W: d3_time_parseWeekNumberMonday,
        x: d3_time_parseLocaleDate,
        X: d3_time_parseLocaleTime,
        y: d3_time_parseYear,
        Y: d3_time_parseFullYear,
        Z: d3_time_parseZone,
        "%": d3_time_parseLiteralPercent
      };
      function d3_time_parseWeekdayAbbrev(date, string, i) {
        d3_time_dayAbbrevRe.lastIndex = 0;
        var n = d3_time_dayAbbrevRe.exec(string.slice(i));
        return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }
      function d3_time_parseWeekday(date, string, i) {
        d3_time_dayRe.lastIndex = 0;
        var n = d3_time_dayRe.exec(string.slice(i));
        return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }
      function d3_time_parseMonthAbbrev(date, string, i) {
        d3_time_monthAbbrevRe.lastIndex = 0;
        var n = d3_time_monthAbbrevRe.exec(string.slice(i));
        return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }
      function d3_time_parseMonth(date, string, i) {
        d3_time_monthRe.lastIndex = 0;
        var n = d3_time_monthRe.exec(string.slice(i));
        return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }
      function d3_time_parseLocaleFull(date, string, i) {
        return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
      }
      function d3_time_parseLocaleDate(date, string, i) {
        return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
      }
      function d3_time_parseLocaleTime(date, string, i) {
        return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
      }
      function d3_time_parseAmPm(date, string, i) {
        var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
        return n == null ? -1 : (date.p = n, i);
      }
      return d3_time_format;
    }
    var d3_time_formatPads = {
      "-": "",
      _: " ",
      "0": "0"
    },
        d3_time_numberRe = /^\s*\d+/,
        d3_time_percentRe = /^%/;
    function d3_time_formatPad(value, fill, width) {
      var sign = value < 0 ? "-" : "",
          string = (sign ? -value : value) + "",
          length = string.length;
      return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }
    function d3_time_formatRe(names) {
      return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
    }
    function d3_time_formatLookup(names) {
      var map = new d3_Map(),
          i = -1,
          n = names.length;
      while (++i < n) {
        map.set(names[i].toLowerCase(), i);
      }return map;
    }
    function d3_time_parseWeekdayNumber(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i, i + 1));
      return n ? (date.w = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseWeekNumberSunday(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i));
      return n ? (date.U = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseWeekNumberMonday(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i));
      return n ? (date.W = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseFullYear(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i, i + 4));
      return n ? (date.y = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseYear(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i, i + 2));
      return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
    }
    function d3_time_parseZone(date, string, i) {
      return (/^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, i + 5) : -1
      );
    }
    function d3_time_expandYear(d) {
      return d + (d > 68 ? 1900 : 2e3);
    }
    function d3_time_parseMonthNumber(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i, i + 2));
      return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
    }
    function d3_time_parseDay(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i, i + 2));
      return n ? (date.d = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseDayOfYear(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i, i + 3));
      return n ? (date.j = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseHour24(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i, i + 2));
      return n ? (date.H = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseMinutes(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i, i + 2));
      return n ? (date.M = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseSeconds(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i, i + 2));
      return n ? (date.S = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseMilliseconds(date, string, i) {
      d3_time_numberRe.lastIndex = 0;
      var n = d3_time_numberRe.exec(string.slice(i, i + 3));
      return n ? (date.L = +n[0], i + n[0].length) : -1;
    }
    function d3_time_zone(d) {
      var z = d.getTimezoneOffset(),
          zs = z > 0 ? "-" : "+",
          zh = abs(z) / 60 | 0,
          zm = abs(z) % 60;
      return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
    }
    function d3_time_parseLiteralPercent(date, string, i) {
      d3_time_percentRe.lastIndex = 0;
      var n = d3_time_percentRe.exec(string.slice(i, i + 1));
      return n ? i + n[0].length : -1;
    }
    function d3_time_formatMulti(formats) {
      var n = formats.length,
          i = -1;
      while (++i < n) {
        formats[i][0] = this(formats[i][0]);
      }return function (date) {
        var i = 0,
            f = formats[i];
        while (!f[1](date)) {
          f = formats[++i];
        }return f[0](date);
      };
    }
    d3.locale = function (locale) {
      return {
        numberFormat: d3_locale_numberFormat(locale),
        timeFormat: d3_locale_timeFormat(locale)
      };
    };
    var d3_locale_enUS = d3.locale({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["$", ""],
      dateTime: "%a %b %e %X %Y",
      date: "%m/%d/%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
    d3.format = d3_locale_enUS.numberFormat;
    d3.geo = {};
    function d3_adder() {}
    d3_adder.prototype = {
      s: 0,
      t: 0,
      add: function add(y) {
        d3_adderSum(y, this.t, d3_adderTemp);
        d3_adderSum(d3_adderTemp.s, this.s, this);
        if (this.s) this.t += d3_adderTemp.t;else this.s = d3_adderTemp.t;
      },
      reset: function reset() {
        this.s = this.t = 0;
      },
      valueOf: function valueOf() {
        return this.s;
      }
    };
    var d3_adderTemp = new d3_adder();
    function d3_adderSum(a, b, o) {
      var x = o.s = a + b,
          bv = x - a,
          av = x - bv;
      o.t = a - av + (b - bv);
    }
    d3.geo.stream = function (object, listener) {
      if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
        d3_geo_streamObjectType[object.type](object, listener);
      } else {
        d3_geo_streamGeometry(object, listener);
      }
    };
    function d3_geo_streamGeometry(geometry, listener) {
      if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
        d3_geo_streamGeometryType[geometry.type](geometry, listener);
      }
    }
    var d3_geo_streamObjectType = {
      Feature: function Feature(feature, listener) {
        d3_geo_streamGeometry(feature.geometry, listener);
      },
      FeatureCollection: function FeatureCollection(object, listener) {
        var features = object.features,
            i = -1,
            n = features.length;
        while (++i < n) {
          d3_geo_streamGeometry(features[i].geometry, listener);
        }
      }
    };
    var d3_geo_streamGeometryType = {
      Sphere: function Sphere(object, listener) {
        listener.sphere();
      },
      Point: function Point(object, listener) {
        object = object.coordinates;
        listener.point(object[0], object[1], object[2]);
      },
      MultiPoint: function MultiPoint(object, listener) {
        var coordinates = object.coordinates,
            i = -1,
            n = coordinates.length;
        while (++i < n) {
          object = coordinates[i], listener.point(object[0], object[1], object[2]);
        }
      },
      LineString: function LineString(object, listener) {
        d3_geo_streamLine(object.coordinates, listener, 0);
      },
      MultiLineString: function MultiLineString(object, listener) {
        var coordinates = object.coordinates,
            i = -1,
            n = coordinates.length;
        while (++i < n) {
          d3_geo_streamLine(coordinates[i], listener, 0);
        }
      },
      Polygon: function Polygon(object, listener) {
        d3_geo_streamPolygon(object.coordinates, listener);
      },
      MultiPolygon: function MultiPolygon(object, listener) {
        var coordinates = object.coordinates,
            i = -1,
            n = coordinates.length;
        while (++i < n) {
          d3_geo_streamPolygon(coordinates[i], listener);
        }
      },
      GeometryCollection: function GeometryCollection(object, listener) {
        var geometries = object.geometries,
            i = -1,
            n = geometries.length;
        while (++i < n) {
          d3_geo_streamGeometry(geometries[i], listener);
        }
      }
    };
    function d3_geo_streamLine(coordinates, listener, closed) {
      var i = -1,
          n = coordinates.length - closed,
          coordinate;
      listener.lineStart();
      while (++i < n) {
        coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
      }listener.lineEnd();
    }
    function d3_geo_streamPolygon(coordinates, listener) {
      var i = -1,
          n = coordinates.length;
      listener.polygonStart();
      while (++i < n) {
        d3_geo_streamLine(coordinates[i], listener, 1);
      }listener.polygonEnd();
    }
    d3.geo.area = function (object) {
      d3_geo_areaSum = 0;
      d3.geo.stream(object, d3_geo_area);
      return d3_geo_areaSum;
    };
    var d3_geo_areaSum,
        d3_geo_areaRingSum = new d3_adder();
    var d3_geo_area = {
      sphere: function sphere() {
        d3_geo_areaSum += 4 * π;
      },
      point: d3_noop,
      lineStart: d3_noop,
      lineEnd: d3_noop,
      polygonStart: function polygonStart() {
        d3_geo_areaRingSum.reset();
        d3_geo_area.lineStart = d3_geo_areaRingStart;
      },
      polygonEnd: function polygonEnd() {
        var area = 2 * d3_geo_areaRingSum;
        d3_geo_areaSum += area < 0 ? 4 * π + area : area;
        d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
      }
    };
    function d3_geo_areaRingStart() {
      var λ00, φ00, λ0, cosφ0, sinφ0;
      d3_geo_area.point = function (λ, φ) {
        d3_geo_area.point = nextPoint;
        λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), sinφ0 = Math.sin(φ);
      };
      function nextPoint(λ, φ) {
        λ *= d3_radians;
        φ = φ * d3_radians / 2 + π / 4;
        var dλ = λ - λ0,
            sdλ = dλ >= 0 ? 1 : -1,
            adλ = sdλ * dλ,
            cosφ = Math.cos(φ),
            sinφ = Math.sin(φ),
            k = sinφ0 * sinφ,
            u = cosφ0 * cosφ + k * Math.cos(adλ),
            v = k * sdλ * Math.sin(adλ);
        d3_geo_areaRingSum.add(Math.atan2(v, u));
        λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
      }
      d3_geo_area.lineEnd = function () {
        nextPoint(λ00, φ00);
      };
    }
    function d3_geo_cartesian(spherical) {
      var λ = spherical[0],
          φ = spherical[1],
          cosφ = Math.cos(φ);
      return [cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ)];
    }
    function d3_geo_cartesianDot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    function d3_geo_cartesianCross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    }
    function d3_geo_cartesianAdd(a, b) {
      a[0] += b[0];
      a[1] += b[1];
      a[2] += b[2];
    }
    function d3_geo_cartesianScale(vector, k) {
      return [vector[0] * k, vector[1] * k, vector[2] * k];
    }
    function d3_geo_cartesianNormalize(d) {
      var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
      d[0] /= l;
      d[1] /= l;
      d[2] /= l;
    }
    function d3_geo_spherical(cartesian) {
      return [Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2])];
    }
    function d3_geo_sphericalEqual(a, b) {
      return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
    }
    d3.geo.bounds = function () {
      var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
      var bound = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function polygonStart() {
          bound.point = ringPoint;
          bound.lineStart = ringStart;
          bound.lineEnd = ringEnd;
          dλSum = 0;
          d3_geo_area.polygonStart();
        },
        polygonEnd: function polygonEnd() {
          d3_geo_area.polygonEnd();
          bound.point = point;
          bound.lineStart = lineStart;
          bound.lineEnd = lineEnd;
          if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90);else if (dλSum > ε) φ1 = 90;else if (dλSum < -ε) φ0 = -90;
          range[0] = λ0, range[1] = λ1;
        }
      };
      function point(λ, φ) {
        ranges.push(range = [λ0 = λ, λ1 = λ]);
        if (φ < φ0) φ0 = φ;
        if (φ > φ1) φ1 = φ;
      }
      function linePoint(λ, φ) {
        var p = d3_geo_cartesian([λ * d3_radians, φ * d3_radians]);
        if (p0) {
          var normal = d3_geo_cartesianCross(p0, p),
              equatorial = [normal[1], -normal[0], 0],
              inflection = d3_geo_cartesianCross(equatorial, normal);
          d3_geo_cartesianNormalize(inflection);
          inflection = d3_geo_spherical(inflection);
          var dλ = λ - λ_,
              s = dλ > 0 ? 1 : -1,
              λi = inflection[0] * d3_degrees * s,
              antimeridian = abs(dλ) > 180;
          if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
            var φi = inflection[1] * d3_degrees;
            if (φi > φ1) φ1 = φi;
          } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
            var φi = -inflection[1] * d3_degrees;
            if (φi < φ0) φ0 = φi;
          } else {
            if (φ < φ0) φ0 = φ;
            if (φ > φ1) φ1 = φ;
          }
          if (antimeridian) {
            if (λ < λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          } else {
            if (λ1 >= λ0) {
              if (λ < λ0) λ0 = λ;
              if (λ > λ1) λ1 = λ;
            } else {
              if (λ > λ_) {
                if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
              } else {
                if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
              }
            }
          }
        } else {
          point(λ, φ);
        }
        p0 = p, λ_ = λ;
      }
      function lineStart() {
        bound.point = linePoint;
      }
      function lineEnd() {
        range[0] = λ0, range[1] = λ1;
        bound.point = point;
        p0 = null;
      }
      function ringPoint(λ, φ) {
        if (p0) {
          var dλ = λ - λ_;
          dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
        } else λ__ = λ, φ__ = φ;
        d3_geo_area.point(λ, φ);
        linePoint(λ, φ);
      }
      function ringStart() {
        d3_geo_area.lineStart();
      }
      function ringEnd() {
        ringPoint(λ__, φ__);
        d3_geo_area.lineEnd();
        if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
        range[0] = λ0, range[1] = λ1;
        p0 = null;
      }
      function angle(λ0, λ1) {
        return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
      }
      function compareRanges(a, b) {
        return a[0] - b[0];
      }
      function withinRange(x, range) {
        return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
      }
      return function (feature) {
        φ1 = λ1 = -(λ0 = φ0 = Infinity);
        ranges = [];
        d3.geo.stream(feature, bound);
        var n = ranges.length;
        if (n) {
          ranges.sort(compareRanges);
          for (var i = 1, a = ranges[0], b, merged = [a]; i < n; ++i) {
            b = ranges[i];
            if (withinRange(b[0], a) || withinRange(b[1], a)) {
              if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
              if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
            } else {
              merged.push(a = b);
            }
          }
          var best = -Infinity,
              dλ;
          for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
            b = merged[i];
            if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
          }
        }
        ranges = range = null;
        return λ0 === Infinity || φ0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[λ0, φ0], [λ1, φ1]];
      };
    }();
    d3.geo.centroid = function (object) {
      d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, d3_geo_centroid);
      var x = d3_geo_centroidX2,
          y = d3_geo_centroidY2,
          z = d3_geo_centroidZ2,
          m = x * x + y * y + z * z;
      if (m < ε2) {
        x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
        if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
        m = x * x + y * y + z * z;
        if (m < ε2) return [NaN, NaN];
      }
      return [Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees];
    };
    var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
    var d3_geo_centroid = {
      sphere: d3_noop,
      point: d3_geo_centroidPoint,
      lineStart: d3_geo_centroidLineStart,
      lineEnd: d3_geo_centroidLineEnd,
      polygonStart: function polygonStart() {
        d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
      },
      polygonEnd: function polygonEnd() {
        d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
      }
    };
    function d3_geo_centroidPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
    }
    function d3_geo_centroidPointXYZ(x, y, z) {
      ++d3_geo_centroidW0;
      d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
      d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
      d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
    }
    function d3_geo_centroidLineStart() {
      var x0, y0, z0;
      d3_geo_centroid.point = function (λ, φ) {
        λ *= d3_radians;
        var cosφ = Math.cos(φ *= d3_radians);
        x0 = cosφ * Math.cos(λ);
        y0 = cosφ * Math.sin(λ);
        z0 = Math.sin(φ);
        d3_geo_centroid.point = nextPoint;
        d3_geo_centroidPointXYZ(x0, y0, z0);
      };
      function nextPoint(λ, φ) {
        λ *= d3_radians;
        var cosφ = Math.cos(φ *= d3_radians),
            x = cosφ * Math.cos(λ),
            y = cosφ * Math.sin(λ),
            z = Math.sin(φ),
            w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
        d3_geo_centroidW1 += w;
        d3_geo_centroidX1 += w * (x0 + (x0 = x));
        d3_geo_centroidY1 += w * (y0 + (y0 = y));
        d3_geo_centroidZ1 += w * (z0 + (z0 = z));
        d3_geo_centroidPointXYZ(x0, y0, z0);
      }
    }
    function d3_geo_centroidLineEnd() {
      d3_geo_centroid.point = d3_geo_centroidPoint;
    }
    function d3_geo_centroidRingStart() {
      var λ00, φ00, x0, y0, z0;
      d3_geo_centroid.point = function (λ, φ) {
        λ00 = λ, φ00 = φ;
        d3_geo_centroid.point = nextPoint;
        λ *= d3_radians;
        var cosφ = Math.cos(φ *= d3_radians);
        x0 = cosφ * Math.cos(λ);
        y0 = cosφ * Math.sin(λ);
        z0 = Math.sin(φ);
        d3_geo_centroidPointXYZ(x0, y0, z0);
      };
      d3_geo_centroid.lineEnd = function () {
        nextPoint(λ00, φ00);
        d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
        d3_geo_centroid.point = d3_geo_centroidPoint;
      };
      function nextPoint(λ, φ) {
        λ *= d3_radians;
        var cosφ = Math.cos(φ *= d3_radians),
            x = cosφ * Math.cos(λ),
            y = cosφ * Math.sin(λ),
            z = Math.sin(φ),
            cx = y0 * z - z0 * y,
            cy = z0 * x - x0 * z,
            cz = x0 * y - y0 * x,
            m = Math.sqrt(cx * cx + cy * cy + cz * cz),
            u = x0 * x + y0 * y + z0 * z,
            v = m && -d3_acos(u) / m,
            w = Math.atan2(m, u);
        d3_geo_centroidX2 += v * cx;
        d3_geo_centroidY2 += v * cy;
        d3_geo_centroidZ2 += v * cz;
        d3_geo_centroidW1 += w;
        d3_geo_centroidX1 += w * (x0 + (x0 = x));
        d3_geo_centroidY1 += w * (y0 + (y0 = y));
        d3_geo_centroidZ1 += w * (z0 + (z0 = z));
        d3_geo_centroidPointXYZ(x0, y0, z0);
      }
    }
    function d3_geo_compose(a, b) {
      function compose(x, y) {
        return x = a(x, y), b(x[0], x[1]);
      }
      if (a.invert && b.invert) compose.invert = function (x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
      };
      return compose;
    }
    function d3_true() {
      return true;
    }
    function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
      var subject = [],
          clip = [];
      segments.forEach(function (segment) {
        if ((n = segment.length - 1) <= 0) return;
        var n,
            p0 = segment[0],
            p1 = segment[n];
        if (d3_geo_sphericalEqual(p0, p1)) {
          listener.lineStart();
          for (var i = 0; i < n; ++i) {
            listener.point((p0 = segment[i])[0], p0[1]);
          }listener.lineEnd();
          return;
        }
        var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true),
            b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
        a.o = b;
        subject.push(a);
        clip.push(b);
        a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
        b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
        a.o = b;
        subject.push(a);
        clip.push(b);
      });
      clip.sort(compare);
      d3_geo_clipPolygonLinkCircular(subject);
      d3_geo_clipPolygonLinkCircular(clip);
      if (!subject.length) return;
      for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
        clip[i].e = entry = !entry;
      }
      var start = subject[0],
          points,
          point;
      while (1) {
        var current = start,
            isSubject = true;
        while (current.v) {
          if ((current = current.n) === start) return;
        }points = current.z;
        listener.lineStart();
        do {
          current.v = current.o.v = true;
          if (current.e) {
            if (isSubject) {
              for (var i = 0, n = points.length; i < n; ++i) {
                listener.point((point = points[i])[0], point[1]);
              }
            } else {
              interpolate(current.x, current.n.x, 1, listener);
            }
            current = current.n;
          } else {
            if (isSubject) {
              points = current.p.z;
              for (var i = points.length - 1; i >= 0; --i) {
                listener.point((point = points[i])[0], point[1]);
              }
            } else {
              interpolate(current.x, current.p.x, -1, listener);
            }
            current = current.p;
          }
          current = current.o;
          points = current.z;
          isSubject = !isSubject;
        } while (!current.v);
        listener.lineEnd();
      }
    }
    function d3_geo_clipPolygonLinkCircular(array) {
      if (!(n = array.length)) return;
      var n,
          i = 0,
          a = array[0],
          b;
      while (++i < n) {
        a.n = b = array[i];
        b.p = a;
        a = b;
      }
      a.n = b = array[0];
      b.p = a;
    }
    function d3_geo_clipPolygonIntersection(point, points, other, entry) {
      this.x = point;
      this.z = points;
      this.o = other;
      this.e = entry;
      this.v = false;
      this.n = this.p = null;
    }
    function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
      return function (rotate, listener) {
        var line = clipLine(listener),
            rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
        var clip = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function polygonStart() {
            clip.point = pointRing;
            clip.lineStart = ringStart;
            clip.lineEnd = ringEnd;
            segments = [];
            polygon = [];
          },
          polygonEnd: function polygonEnd() {
            clip.point = point;
            clip.lineStart = lineStart;
            clip.lineEnd = lineEnd;
            segments = d3.merge(segments);
            var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
            if (segments.length) {
              if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
              d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
            } else if (clipStartInside) {
              if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
            segments = polygon = null;
          },
          sphere: function sphere() {
            listener.polygonStart();
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
            listener.polygonEnd();
          }
        };
        function point(λ, φ) {
          var point = rotate(λ, φ);
          if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
        }
        function pointLine(λ, φ) {
          var point = rotate(λ, φ);
          line.point(point[0], point[1]);
        }
        function lineStart() {
          clip.point = pointLine;
          line.lineStart();
        }
        function lineEnd() {
          clip.point = point;
          line.lineEnd();
        }
        var segments;
        var buffer = d3_geo_clipBufferListener(),
            ringListener = clipLine(buffer),
            polygonStarted = false,
            polygon,
            ring;
        function pointRing(λ, φ) {
          ring.push([λ, φ]);
          var point = rotate(λ, φ);
          ringListener.point(point[0], point[1]);
        }
        function ringStart() {
          ringListener.lineStart();
          ring = [];
        }
        function ringEnd() {
          pointRing(ring[0][0], ring[0][1]);
          ringListener.lineEnd();
          var clean = ringListener.clean(),
              ringSegments = buffer.buffer(),
              segment,
              n = ringSegments.length;
          ring.pop();
          polygon.push(ring);
          ring = null;
          if (!n) return;
          if (clean & 1) {
            segment = ringSegments[0];
            var n = segment.length - 1,
                i = -1,
                point;
            if (n > 0) {
              if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
              listener.lineStart();
              while (++i < n) {
                listener.point((point = segment[i])[0], point[1]);
              }listener.lineEnd();
            }
            return;
          }
          if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
          segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
        }
        return clip;
      };
    }
    function d3_geo_clipSegmentLength1(segment) {
      return segment.length > 1;
    }
    function d3_geo_clipBufferListener() {
      var lines = [],
          line;
      return {
        lineStart: function lineStart() {
          lines.push(line = []);
        },
        point: function point(λ, φ) {
          line.push([λ, φ]);
        },
        lineEnd: d3_noop,
        buffer: function buffer() {
          var buffer = lines;
          lines = [];
          line = null;
          return buffer;
        },
        rejoin: function rejoin() {
          if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
        }
      };
    }
    function d3_geo_clipSort(a, b) {
      return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
    }
    var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [-π, -π / 2]);
    function d3_geo_clipAntimeridianLine(listener) {
      var λ0 = NaN,
          φ0 = NaN,
          sλ0 = NaN,
          _clean;
      return {
        lineStart: function lineStart() {
          listener.lineStart();
          _clean = 1;
        },
        point: function point(λ1, φ1) {
          var sλ1 = λ1 > 0 ? π : -π,
              dλ = abs(λ1 - λ0);
          if (abs(dλ - π) < ε) {
            listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
            listener.point(sλ0, φ0);
            listener.lineEnd();
            listener.lineStart();
            listener.point(sλ1, φ0);
            listener.point(λ1, φ0);
            _clean = 0;
          } else if (sλ0 !== sλ1 && dλ >= π) {
            if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
            if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
            φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
            listener.point(sλ0, φ0);
            listener.lineEnd();
            listener.lineStart();
            listener.point(sλ1, φ0);
            _clean = 0;
          }
          listener.point(λ0 = λ1, φ0 = φ1);
          sλ0 = sλ1;
        },
        lineEnd: function lineEnd() {
          listener.lineEnd();
          λ0 = φ0 = NaN;
        },
        clean: function clean() {
          return 2 - _clean;
        }
      };
    }
    function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
      var cosφ0,
          cosφ1,
          sinλ0_λ1 = Math.sin(λ0 - λ1);
      return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
    }
    function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
      var φ;
      if (from == null) {
        φ = direction * halfπ;
        listener.point(-π, φ);
        listener.point(0, φ);
        listener.point(π, φ);
        listener.point(π, 0);
        listener.point(π, -φ);
        listener.point(0, -φ);
        listener.point(-π, -φ);
        listener.point(-π, 0);
        listener.point(-π, φ);
      } else if (abs(from[0] - to[0]) > ε) {
        var s = from[0] < to[0] ? π : -π;
        φ = direction * s / 2;
        listener.point(-s, φ);
        listener.point(0, φ);
        listener.point(s, φ);
      } else {
        listener.point(to[0], to[1]);
      }
    }
    function d3_geo_pointInPolygon(point, polygon) {
      var meridian = point[0],
          parallel = point[1],
          meridianNormal = [Math.sin(meridian), -Math.cos(meridian), 0],
          polarAngle = 0,
          winding = 0;
      d3_geo_areaRingSum.reset();
      for (var i = 0, n = polygon.length; i < n; ++i) {
        var ring = polygon[i],
            m = ring.length;
        if (!m) continue;
        var point0 = ring[0],
            λ0 = point0[0],
            φ0 = point0[1] / 2 + π / 4,
            sinφ0 = Math.sin(φ0),
            cosφ0 = Math.cos(φ0),
            j = 1;
        while (true) {
          if (j === m) j = 0;
          point = ring[j];
          var λ = point[0],
              φ = point[1] / 2 + π / 4,
              sinφ = Math.sin(φ),
              cosφ = Math.cos(φ),
              dλ = λ - λ0,
              sdλ = dλ >= 0 ? 1 : -1,
              adλ = sdλ * dλ,
              antimeridian = adλ > π,
              k = sinφ0 * sinφ;
          d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
          polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
          if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
            var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
            d3_geo_cartesianNormalize(arc);
            var intersection = d3_geo_cartesianCross(meridianNormal, arc);
            d3_geo_cartesianNormalize(intersection);
            var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
            if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
              winding += antimeridian ^ dλ >= 0 ? 1 : -1;
            }
          }
          if (!j++) break;
          λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
        }
      }
      return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
    }
    function d3_geo_clipCircle(radius) {
      var cr = Math.cos(radius),
          smallRadius = cr > 0,
          notHemisphere = abs(cr) > ε,
          interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
      return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-π, radius - π]);
      function visible(λ, φ) {
        return Math.cos(λ) * Math.cos(φ) > cr;
      }
      function clipLine(listener) {
        var point0, c0, v0, v00, _clean2;
        return {
          lineStart: function lineStart() {
            v00 = v0 = false;
            _clean2 = 1;
          },
          point: function point(λ, φ) {
            var point1 = [λ, φ],
                point2,
                v = visible(λ, φ),
                c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
            if (!point0 && (v00 = v0 = v)) listener.lineStart();
            if (v !== v0) {
              point2 = intersect(point0, point1);
              if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
                point1[0] += ε;
                point1[1] += ε;
                v = visible(point1[0], point1[1]);
              }
            }
            if (v !== v0) {
              _clean2 = 0;
              if (v) {
                listener.lineStart();
                point2 = intersect(point1, point0);
                listener.point(point2[0], point2[1]);
              } else {
                point2 = intersect(point0, point1);
                listener.point(point2[0], point2[1]);
                listener.lineEnd();
              }
              point0 = point2;
            } else if (notHemisphere && point0 && smallRadius ^ v) {
              var t;
              if (!(c & c0) && (t = intersect(point1, point0, true))) {
                _clean2 = 0;
                if (smallRadius) {
                  listener.lineStart();
                  listener.point(t[0][0], t[0][1]);
                  listener.point(t[1][0], t[1][1]);
                  listener.lineEnd();
                } else {
                  listener.point(t[1][0], t[1][1]);
                  listener.lineEnd();
                  listener.lineStart();
                  listener.point(t[0][0], t[0][1]);
                }
              }
            }
            if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
              listener.point(point1[0], point1[1]);
            }
            point0 = point1, v0 = v, c0 = c;
          },
          lineEnd: function lineEnd() {
            if (v0) listener.lineEnd();
            point0 = null;
          },
          clean: function clean() {
            return _clean2 | (v00 && v0) << 1;
          }
        };
      }
      function intersect(a, b, two) {
        var pa = d3_geo_cartesian(a),
            pb = d3_geo_cartesian(b);
        var n1 = [1, 0, 0],
            n2 = d3_geo_cartesianCross(pa, pb),
            n2n2 = d3_geo_cartesianDot(n2, n2),
            n1n2 = n2[0],
            determinant = n2n2 - n1n2 * n1n2;
        if (!determinant) return !two && a;
        var c1 = cr * n2n2 / determinant,
            c2 = -cr * n1n2 / determinant,
            n1xn2 = d3_geo_cartesianCross(n1, n2),
            A = d3_geo_cartesianScale(n1, c1),
            B = d3_geo_cartesianScale(n2, c2);
        d3_geo_cartesianAdd(A, B);
        var u = n1xn2,
            w = d3_geo_cartesianDot(A, u),
            uu = d3_geo_cartesianDot(u, u),
            t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
        if (t2 < 0) return;
        var t = Math.sqrt(t2),
            q = d3_geo_cartesianScale(u, (-w - t) / uu);
        d3_geo_cartesianAdd(q, A);
        q = d3_geo_spherical(q);
        if (!two) return q;
        var λ0 = a[0],
            λ1 = b[0],
            φ0 = a[1],
            φ1 = b[1],
            z;
        if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
        var δλ = λ1 - λ0,
            polar = abs(δλ - π) < ε,
            meridian = polar || δλ < ε;
        if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
        if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
          var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
          d3_geo_cartesianAdd(q1, A);
          return [q, d3_geo_spherical(q1)];
        }
      }
      function code(λ, φ) {
        var r = smallRadius ? radius : π - radius,
            code = 0;
        if (λ < -r) code |= 1;else if (λ > r) code |= 2;
        if (φ < -r) code |= 4;else if (φ > r) code |= 8;
        return code;
      }
    }
    function d3_geom_clipLine(x0, y0, x1, y1) {
      return function (line) {
        var a = line.a,
            b = line.b,
            ax = a.x,
            ay = a.y,
            bx = b.x,
            by = b.y,
            t0 = 0,
            t1 = 1,
            dx = bx - ax,
            dy = by - ay,
            r;
        r = x0 - ax;
        if (!dx && r > 0) return;
        r /= dx;
        if (dx < 0) {
          if (r < t0) return;
          if (r < t1) t1 = r;
        } else if (dx > 0) {
          if (r > t1) return;
          if (r > t0) t0 = r;
        }
        r = x1 - ax;
        if (!dx && r < 0) return;
        r /= dx;
        if (dx < 0) {
          if (r > t1) return;
          if (r > t0) t0 = r;
        } else if (dx > 0) {
          if (r < t0) return;
          if (r < t1) t1 = r;
        }
        r = y0 - ay;
        if (!dy && r > 0) return;
        r /= dy;
        if (dy < 0) {
          if (r < t0) return;
          if (r < t1) t1 = r;
        } else if (dy > 0) {
          if (r > t1) return;
          if (r > t0) t0 = r;
        }
        r = y1 - ay;
        if (!dy && r < 0) return;
        r /= dy;
        if (dy < 0) {
          if (r > t1) return;
          if (r > t0) t0 = r;
        } else if (dy > 0) {
          if (r < t0) return;
          if (r < t1) t1 = r;
        }
        if (t0 > 0) line.a = {
          x: ax + t0 * dx,
          y: ay + t0 * dy
        };
        if (t1 < 1) line.b = {
          x: ax + t1 * dx,
          y: ay + t1 * dy
        };
        return line;
      };
    }
    var d3_geo_clipExtentMAX = 1e9;
    d3.geo.clipExtent = function () {
      var x0,
          y0,
          x1,
          y1,
          _stream,
          clip,
          clipExtent = {
        stream: function stream(output) {
          if (_stream) _stream.valid = false;
          _stream = clip(output);
          _stream.valid = true;
          return _stream;
        },
        extent: function extent(_) {
          if (!arguments.length) return [[x0, y0], [x1, y1]];
          clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
          if (_stream) _stream.valid = false, _stream = null;
          return clipExtent;
        }
      };
      return clipExtent.extent([[0, 0], [960, 500]]);
    };
    function d3_geo_clipExtent(x0, y0, x1, y1) {
      return function (listener) {
        var listener_ = listener,
            bufferListener = d3_geo_clipBufferListener(),
            clipLine = d3_geom_clipLine(x0, y0, x1, y1),
            segments,
            polygon,
            ring;
        var clip = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function polygonStart() {
            listener = bufferListener;
            segments = [];
            polygon = [];
            clean = true;
          },
          polygonEnd: function polygonEnd() {
            listener = listener_;
            segments = d3.merge(segments);
            var clipStartInside = insidePolygon([x0, y1]),
                inside = clean && clipStartInside,
                visible = segments.length;
            if (inside || visible) {
              listener.polygonStart();
              if (inside) {
                listener.lineStart();
                interpolate(null, null, 1, listener);
                listener.lineEnd();
              }
              if (visible) {
                d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
              }
              listener.polygonEnd();
            }
            segments = polygon = ring = null;
          }
        };
        function insidePolygon(p) {
          var wn = 0,
              n = polygon.length,
              y = p[1];
          for (var i = 0; i < n; ++i) {
            for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
              b = v[j];
              if (a[1] <= y) {
                if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
              } else {
                if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
              }
              a = b;
            }
          }
          return wn !== 0;
        }
        function interpolate(from, to, direction, listener) {
          var a = 0,
              a1 = 0;
          if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
            do {
              listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
            } while ((a = (a + direction + 4) % 4) !== a1);
          } else {
            listener.point(to[0], to[1]);
          }
        }
        function pointVisible(x, y) {
          return x0 <= x && x <= x1 && y0 <= y && y <= y1;
        }
        function point(x, y) {
          if (pointVisible(x, y)) listener.point(x, y);
        }
        var x__, y__, v__, x_, y_, v_, first, clean;
        function lineStart() {
          clip.point = linePoint;
          if (polygon) polygon.push(ring = []);
          first = true;
          v_ = false;
          x_ = y_ = NaN;
        }
        function lineEnd() {
          if (segments) {
            linePoint(x__, y__);
            if (v__ && v_) bufferListener.rejoin();
            segments.push(bufferListener.buffer());
          }
          clip.point = point;
          if (v_) listener.lineEnd();
        }
        function linePoint(x, y) {
          x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
          y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
          var v = pointVisible(x, y);
          if (polygon) ring.push([x, y]);
          if (first) {
            x__ = x, y__ = y, v__ = v;
            first = false;
            if (v) {
              listener.lineStart();
              listener.point(x, y);
            }
          } else {
            if (v && v_) listener.point(x, y);else {
              var l = {
                a: {
                  x: x_,
                  y: y_
                },
                b: {
                  x: x,
                  y: y
                }
              };
              if (clipLine(l)) {
                if (!v_) {
                  listener.lineStart();
                  listener.point(l.a.x, l.a.y);
                }
                listener.point(l.b.x, l.b.y);
                if (!v) listener.lineEnd();
                clean = false;
              } else if (v) {
                listener.lineStart();
                listener.point(x, y);
                clean = false;
              }
            }
          }
          x_ = x, y_ = y, v_ = v;
        }
        return clip;
      };
      function corner(p, direction) {
        return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
      }
      function compare(a, b) {
        return comparePoints(a.x, b.x);
      }
      function comparePoints(a, b) {
        var ca = corner(a, 1),
            cb = corner(b, 1);
        return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
      }
    }
    function d3_geo_conic(projectAt) {
      var φ0 = 0,
          φ1 = π / 3,
          m = d3_geo_projectionMutator(projectAt),
          p = m(φ0, φ1);
      p.parallels = function (_) {
        if (!arguments.length) return [φ0 / π * 180, φ1 / π * 180];
        return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
      };
      return p;
    }
    function d3_geo_conicEqualArea(φ0, φ1) {
      var sinφ0 = Math.sin(φ0),
          n = (sinφ0 + Math.sin(φ1)) / 2,
          C = 1 + sinφ0 * (2 * n - sinφ0),
          ρ0 = Math.sqrt(C) / n;
      function forward(λ, φ) {
        var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
        return [ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ)];
      }
      forward.invert = function (x, y) {
        var ρ0_y = ρ0 - y;
        return [Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n))];
      };
      return forward;
    }
    (d3.geo.conicEqualArea = function () {
      return d3_geo_conic(d3_geo_conicEqualArea);
    }).raw = d3_geo_conicEqualArea;
    d3.geo.albers = function () {
      return d3.geo.conicEqualArea().rotate([96, 0]).center([-.6, 38.7]).parallels([29.5, 45.5]).scale(1070);
    };
    d3.geo.albersUsa = function () {
      var lower48 = d3.geo.albers();
      var alaska = d3.geo.conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]);
      var hawaii = d3.geo.conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]);
      var _point,
          pointStream = {
        point: function point(x, y) {
          _point = [x, y];
        }
      },
          lower48Point,
          alaskaPoint,
          hawaiiPoint;
      function albersUsa(coordinates) {
        var x = coordinates[0],
            y = coordinates[1];
        _point = null;
        (lower48Point(x, y), _point) || (alaskaPoint(x, y), _point) || hawaiiPoint(x, y);
        return _point;
      }
      albersUsa.invert = function (coordinates) {
        var k = lower48.scale(),
            t = lower48.translate(),
            x = (coordinates[0] - t[0]) / k,
            y = (coordinates[1] - t[1]) / k;
        return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
      };
      albersUsa.stream = function (stream) {
        var lower48Stream = lower48.stream(stream),
            alaskaStream = alaska.stream(stream),
            hawaiiStream = hawaii.stream(stream);
        return {
          point: function point(x, y) {
            lower48Stream.point(x, y);
            alaskaStream.point(x, y);
            hawaiiStream.point(x, y);
          },
          sphere: function sphere() {
            lower48Stream.sphere();
            alaskaStream.sphere();
            hawaiiStream.sphere();
          },
          lineStart: function lineStart() {
            lower48Stream.lineStart();
            alaskaStream.lineStart();
            hawaiiStream.lineStart();
          },
          lineEnd: function lineEnd() {
            lower48Stream.lineEnd();
            alaskaStream.lineEnd();
            hawaiiStream.lineEnd();
          },
          polygonStart: function polygonStart() {
            lower48Stream.polygonStart();
            alaskaStream.polygonStart();
            hawaiiStream.polygonStart();
          },
          polygonEnd: function polygonEnd() {
            lower48Stream.polygonEnd();
            alaskaStream.polygonEnd();
            hawaiiStream.polygonEnd();
          }
        };
      };
      albersUsa.precision = function (_) {
        if (!arguments.length) return lower48.precision();
        lower48.precision(_);
        alaska.precision(_);
        hawaii.precision(_);
        return albersUsa;
      };
      albersUsa.scale = function (_) {
        if (!arguments.length) return lower48.scale();
        lower48.scale(_);
        alaska.scale(_ * .35);
        hawaii.scale(_);
        return albersUsa.translate(lower48.translate());
      };
      albersUsa.translate = function (_) {
        if (!arguments.length) return lower48.translate();
        var k = lower48.scale(),
            x = +_[0],
            y = +_[1];
        lower48Point = lower48.translate(_).clipExtent([[x - .455 * k, y - .238 * k], [x + .455 * k, y + .238 * k]]).stream(pointStream).point;
        alaskaPoint = alaska.translate([x - .307 * k, y + .201 * k]).clipExtent([[x - .425 * k + ε, y + .12 * k + ε], [x - .214 * k - ε, y + .234 * k - ε]]).stream(pointStream).point;
        hawaiiPoint = hawaii.translate([x - .205 * k, y + .212 * k]).clipExtent([[x - .214 * k + ε, y + .166 * k + ε], [x - .115 * k - ε, y + .234 * k - ε]]).stream(pointStream).point;
        return albersUsa;
      };
      return albersUsa.scale(1070);
    };
    var d3_geo_pathAreaSum,
        d3_geo_pathAreaPolygon,
        d3_geo_pathArea = {
      point: d3_noop,
      lineStart: d3_noop,
      lineEnd: d3_noop,
      polygonStart: function polygonStart() {
        d3_geo_pathAreaPolygon = 0;
        d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
      },
      polygonEnd: function polygonEnd() {
        d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
        d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
      }
    };
    function d3_geo_pathAreaRingStart() {
      var x00, y00, x0, y0;
      d3_geo_pathArea.point = function (x, y) {
        d3_geo_pathArea.point = nextPoint;
        x00 = x0 = x, y00 = y0 = y;
      };
      function nextPoint(x, y) {
        d3_geo_pathAreaPolygon += y0 * x - x0 * y;
        x0 = x, y0 = y;
      }
      d3_geo_pathArea.lineEnd = function () {
        nextPoint(x00, y00);
      };
    }
    var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
    var d3_geo_pathBounds = {
      point: d3_geo_pathBoundsPoint,
      lineStart: d3_noop,
      lineEnd: d3_noop,
      polygonStart: d3_noop,
      polygonEnd: d3_noop
    };
    function d3_geo_pathBoundsPoint(x, y) {
      if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
      if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
      if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
      if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
    }
    function d3_geo_pathBuffer() {
      var pointCircle = d3_geo_pathBufferCircle(4.5),
          buffer = [];
      var stream = {
        point: point,
        lineStart: function lineStart() {
          stream.point = pointLineStart;
        },
        lineEnd: lineEnd,
        polygonStart: function polygonStart() {
          stream.lineEnd = lineEndPolygon;
        },
        polygonEnd: function polygonEnd() {
          stream.lineEnd = lineEnd;
          stream.point = point;
        },
        pointRadius: function pointRadius(_) {
          pointCircle = d3_geo_pathBufferCircle(_);
          return stream;
        },
        result: function result() {
          if (buffer.length) {
            var result = buffer.join("");
            buffer = [];
            return result;
          }
        }
      };
      function point(x, y) {
        buffer.push("M", x, ",", y, pointCircle);
      }
      function pointLineStart(x, y) {
        buffer.push("M", x, ",", y);
        stream.point = pointLine;
      }
      function pointLine(x, y) {
        buffer.push("L", x, ",", y);
      }
      function lineEnd() {
        stream.point = point;
      }
      function lineEndPolygon() {
        buffer.push("Z");
      }
      return stream;
    }
    function d3_geo_pathBufferCircle(radius) {
      return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
    }
    var d3_geo_pathCentroid = {
      point: d3_geo_pathCentroidPoint,
      lineStart: d3_geo_pathCentroidLineStart,
      lineEnd: d3_geo_pathCentroidLineEnd,
      polygonStart: function polygonStart() {
        d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
      },
      polygonEnd: function polygonEnd() {
        d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
        d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
        d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
      }
    };
    function d3_geo_pathCentroidPoint(x, y) {
      d3_geo_centroidX0 += x;
      d3_geo_centroidY0 += y;
      ++d3_geo_centroidZ0;
    }
    function d3_geo_pathCentroidLineStart() {
      var x0, y0;
      d3_geo_pathCentroid.point = function (x, y) {
        d3_geo_pathCentroid.point = nextPoint;
        d3_geo_pathCentroidPoint(x0 = x, y0 = y);
      };
      function nextPoint(x, y) {
        var dx = x - x0,
            dy = y - y0,
            z = Math.sqrt(dx * dx + dy * dy);
        d3_geo_centroidX1 += z * (x0 + x) / 2;
        d3_geo_centroidY1 += z * (y0 + y) / 2;
        d3_geo_centroidZ1 += z;
        d3_geo_pathCentroidPoint(x0 = x, y0 = y);
      }
    }
    function d3_geo_pathCentroidLineEnd() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
    }
    function d3_geo_pathCentroidRingStart() {
      var x00, y00, x0, y0;
      d3_geo_pathCentroid.point = function (x, y) {
        d3_geo_pathCentroid.point = nextPoint;
        d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
      };
      function nextPoint(x, y) {
        var dx = x - x0,
            dy = y - y0,
            z = Math.sqrt(dx * dx + dy * dy);
        d3_geo_centroidX1 += z * (x0 + x) / 2;
        d3_geo_centroidY1 += z * (y0 + y) / 2;
        d3_geo_centroidZ1 += z;
        z = y0 * x - x0 * y;
        d3_geo_centroidX2 += z * (x0 + x);
        d3_geo_centroidY2 += z * (y0 + y);
        d3_geo_centroidZ2 += z * 3;
        d3_geo_pathCentroidPoint(x0 = x, y0 = y);
      }
      d3_geo_pathCentroid.lineEnd = function () {
        nextPoint(x00, y00);
      };
    }
    function d3_geo_pathContext(context) {
      var _pointRadius = 4.5;
      var stream = {
        point: point,
        lineStart: function lineStart() {
          stream.point = pointLineStart;
        },
        lineEnd: lineEnd,
        polygonStart: function polygonStart() {
          stream.lineEnd = lineEndPolygon;
        },
        polygonEnd: function polygonEnd() {
          stream.lineEnd = lineEnd;
          stream.point = point;
        },
        pointRadius: function pointRadius(_) {
          _pointRadius = _;
          return stream;
        },
        result: d3_noop
      };
      function point(x, y) {
        context.moveTo(x + _pointRadius, y);
        context.arc(x, y, _pointRadius, 0, τ);
      }
      function pointLineStart(x, y) {
        context.moveTo(x, y);
        stream.point = pointLine;
      }
      function pointLine(x, y) {
        context.lineTo(x, y);
      }
      function lineEnd() {
        stream.point = point;
      }
      function lineEndPolygon() {
        context.closePath();
      }
      return stream;
    }
    function d3_geo_resample(project) {
      var δ2 = .5,
          cosMinDistance = Math.cos(30 * d3_radians),
          maxDepth = 16;
      function resample(stream) {
        return (maxDepth ? resampleRecursive : resampleNone)(stream);
      }
      function resampleNone(stream) {
        return d3_geo_transformPoint(stream, function (x, y) {
          x = project(x, y);
          stream.point(x[0], x[1]);
        });
      }
      function resampleRecursive(stream) {
        var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
        var resample = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function polygonStart() {
            stream.polygonStart();
            resample.lineStart = ringStart;
          },
          polygonEnd: function polygonEnd() {
            stream.polygonEnd();
            resample.lineStart = lineStart;
          }
        };
        function point(x, y) {
          x = project(x, y);
          stream.point(x[0], x[1]);
        }
        function lineStart() {
          x0 = NaN;
          resample.point = linePoint;
          stream.lineStart();
        }
        function linePoint(λ, φ) {
          var c = d3_geo_cartesian([λ, φ]),
              p = project(λ, φ);
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
          stream.point(x0, y0);
        }
        function lineEnd() {
          resample.point = point;
          stream.lineEnd();
        }
        function ringStart() {
          lineStart();
          resample.point = ringPoint;
          resample.lineEnd = ringEnd;
        }
        function ringPoint(λ, φ) {
          linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
          resample.point = linePoint;
        }
        function ringEnd() {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
          resample.lineEnd = lineEnd;
          lineEnd();
        }
        return resample;
      }
      function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
        var dx = x1 - x0,
            dy = y1 - y0,
            d2 = dx * dx + dy * dy;
        if (d2 > 4 * δ2 && depth--) {
          var a = a0 + a1,
              b = b0 + b1,
              c = c0 + c1,
              m = Math.sqrt(a * a + b * b + c * c),
              φ2 = Math.asin(c /= m),
              λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a),
              p = project(λ2, φ2),
              x2 = p[0],
              y2 = p[1],
              dx2 = x2 - x0,
              dy2 = y2 - y0,
              dz = dy * dx2 - dx * dy2;
          if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
            resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
            stream.point(x2, y2);
            resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
          }
        }
      }
      resample.precision = function (_) {
        if (!arguments.length) return Math.sqrt(δ2);
        maxDepth = (δ2 = _ * _) > 0 && 16;
        return resample;
      };
      return resample;
    }
    d3.geo.path = function () {
      var pointRadius = 4.5,
          projection,
          context,
          projectStream,
          contextStream,
          cacheStream;
      function path(object) {
        if (object) {
          if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
          if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
          d3.geo.stream(object, cacheStream);
        }
        return contextStream.result();
      }
      path.area = function (object) {
        d3_geo_pathAreaSum = 0;
        d3.geo.stream(object, projectStream(d3_geo_pathArea));
        return d3_geo_pathAreaSum;
      };
      path.centroid = function (object) {
        d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
        d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
        return d3_geo_centroidZ2 ? [d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2] : d3_geo_centroidZ1 ? [d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1] : d3_geo_centroidZ0 ? [d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0] : [NaN, NaN];
      };
      path.bounds = function (object) {
        d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
        d3.geo.stream(object, projectStream(d3_geo_pathBounds));
        return [[d3_geo_pathBoundsX0, d3_geo_pathBoundsY0], [d3_geo_pathBoundsX1, d3_geo_pathBoundsY1]];
      };
      path.projection = function (_) {
        if (!arguments.length) return projection;
        projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
        return reset();
      };
      path.context = function (_) {
        if (!arguments.length) return context;
        contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
        if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
        return reset();
      };
      path.pointRadius = function (_) {
        if (!arguments.length) return pointRadius;
        pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
        return path;
      };
      function reset() {
        cacheStream = null;
        return path;
      }
      return path.projection(d3.geo.albersUsa()).context(null);
    };
    function d3_geo_pathProjectStream(project) {
      var resample = d3_geo_resample(function (x, y) {
        return project([x * d3_degrees, y * d3_degrees]);
      });
      return function (stream) {
        return d3_geo_projectionRadians(resample(stream));
      };
    }
    d3.geo.transform = function (methods) {
      return {
        stream: function stream(_stream2) {
          var transform = new d3_geo_transform(_stream2);
          for (var k in methods) {
            transform[k] = methods[k];
          }return transform;
        }
      };
    };
    function d3_geo_transform(stream) {
      this.stream = stream;
    }
    d3_geo_transform.prototype = {
      point: function point(x, y) {
        this.stream.point(x, y);
      },
      sphere: function sphere() {
        this.stream.sphere();
      },
      lineStart: function lineStart() {
        this.stream.lineStart();
      },
      lineEnd: function lineEnd() {
        this.stream.lineEnd();
      },
      polygonStart: function polygonStart() {
        this.stream.polygonStart();
      },
      polygonEnd: function polygonEnd() {
        this.stream.polygonEnd();
      }
    };
    function d3_geo_transformPoint(stream, point) {
      return {
        point: point,
        sphere: function sphere() {
          stream.sphere();
        },
        lineStart: function lineStart() {
          stream.lineStart();
        },
        lineEnd: function lineEnd() {
          stream.lineEnd();
        },
        polygonStart: function polygonStart() {
          stream.polygonStart();
        },
        polygonEnd: function polygonEnd() {
          stream.polygonEnd();
        }
      };
    }
    d3.geo.projection = d3_geo_projection;
    d3.geo.projectionMutator = d3_geo_projectionMutator;
    function d3_geo_projection(project) {
      return d3_geo_projectionMutator(function () {
        return project;
      })();
    }
    function d3_geo_projectionMutator(projectAt) {
      var project,
          rotate,
          projectRotate,
          projectResample = d3_geo_resample(function (x, y) {
        x = project(x, y);
        return [x[0] * k + δx, δy - x[1] * k];
      }),
          k = 150,
          x = 480,
          y = 250,
          λ = 0,
          φ = 0,
          δλ = 0,
          δφ = 0,
          δγ = 0,
          δx,
          δy,
          preclip = d3_geo_clipAntimeridian,
          postclip = d3_identity,
          clipAngle = null,
          clipExtent = null,
          stream;
      function projection(point) {
        point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
        return [point[0] * k + δx, δy - point[1] * k];
      }
      function invert(point) {
        point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
        return point && [point[0] * d3_degrees, point[1] * d3_degrees];
      }
      projection.stream = function (output) {
        if (stream) stream.valid = false;
        stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
        stream.valid = true;
        return stream;
      };
      projection.clipAngle = function (_) {
        if (!arguments.length) return clipAngle;
        preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
        return invalidate();
      };
      projection.clipExtent = function (_) {
        if (!arguments.length) return clipExtent;
        clipExtent = _;
        postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
        return invalidate();
      };
      projection.scale = function (_) {
        if (!arguments.length) return k;
        k = +_;
        return reset();
      };
      projection.translate = function (_) {
        if (!arguments.length) return [x, y];
        x = +_[0];
        y = +_[1];
        return reset();
      };
      projection.center = function (_) {
        if (!arguments.length) return [λ * d3_degrees, φ * d3_degrees];
        λ = _[0] % 360 * d3_radians;
        φ = _[1] % 360 * d3_radians;
        return reset();
      };
      projection.rotate = function (_) {
        if (!arguments.length) return [δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees];
        δλ = _[0] % 360 * d3_radians;
        δφ = _[1] % 360 * d3_radians;
        δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
        return reset();
      };
      d3.rebind(projection, projectResample, "precision");
      function reset() {
        projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
        var center = project(λ, φ);
        δx = x - center[0] * k;
        δy = y + center[1] * k;
        return invalidate();
      }
      function invalidate() {
        if (stream) stream.valid = false, stream = null;
        return projection;
      }
      return function () {
        project = projectAt.apply(this, arguments);
        projection.invert = project.invert && invert;
        return reset();
      };
    }
    function d3_geo_projectionRadians(stream) {
      return d3_geo_transformPoint(stream, function (x, y) {
        stream.point(x * d3_radians, y * d3_radians);
      });
    }
    function d3_geo_equirectangular(λ, φ) {
      return [λ, φ];
    }
    (d3.geo.equirectangular = function () {
      return d3_geo_projection(d3_geo_equirectangular);
    }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
    d3.geo.rotation = function (rotate) {
      rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
      function forward(coordinates) {
        coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
        return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
      }
      forward.invert = function (coordinates) {
        coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
        return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
      };
      return forward;
    };
    function d3_geo_identityRotation(λ, φ) {
      return [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ];
    }
    d3_geo_identityRotation.invert = d3_geo_equirectangular;
    function d3_geo_rotation(δλ, δφ, δγ) {
      return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
    }
    function d3_geo_forwardRotationλ(δλ) {
      return function (λ, φ) {
        return λ += δλ, [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ];
      };
    }
    function d3_geo_rotationλ(δλ) {
      var rotation = d3_geo_forwardRotationλ(δλ);
      rotation.invert = d3_geo_forwardRotationλ(-δλ);
      return rotation;
    }
    function d3_geo_rotationφγ(δφ, δγ) {
      var cosδφ = Math.cos(δφ),
          sinδφ = Math.sin(δφ),
          cosδγ = Math.cos(δγ),
          sinδγ = Math.sin(δγ);
      function rotation(λ, φ) {
        var cosφ = Math.cos(φ),
            x = Math.cos(λ) * cosφ,
            y = Math.sin(λ) * cosφ,
            z = Math.sin(φ),
            k = z * cosδφ + x * sinδφ;
        return [Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ)];
      }
      rotation.invert = function (λ, φ) {
        var cosφ = Math.cos(φ),
            x = Math.cos(λ) * cosφ,
            y = Math.sin(λ) * cosφ,
            z = Math.sin(φ),
            k = z * cosδγ - y * sinδγ;
        return [Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ)];
      };
      return rotation;
    }
    d3.geo.circle = function () {
      var origin = [0, 0],
          angle,
          precision = 6,
          interpolate;
      function circle() {
        var center = typeof origin === "function" ? origin.apply(this, arguments) : origin,
            rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert,
            ring = [];
        interpolate(null, null, 1, {
          point: function point(x, y) {
            ring.push(x = rotate(x, y));
            x[0] *= d3_degrees, x[1] *= d3_degrees;
          }
        });
        return {
          type: "Polygon",
          coordinates: [ring]
        };
      }
      circle.origin = function (x) {
        if (!arguments.length) return origin;
        origin = x;
        return circle;
      };
      circle.angle = function (x) {
        if (!arguments.length) return angle;
        interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
        return circle;
      };
      circle.precision = function (_) {
        if (!arguments.length) return precision;
        interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
        return circle;
      };
      return circle.angle(90);
    };
    function d3_geo_circleInterpolate(radius, precision) {
      var cr = Math.cos(radius),
          sr = Math.sin(radius);
      return function (from, to, direction, listener) {
        var step = direction * precision;
        if (from != null) {
          from = d3_geo_circleAngle(cr, from);
          to = d3_geo_circleAngle(cr, to);
          if (direction > 0 ? from < to : from > to) from += direction * τ;
        } else {
          from = radius + direction * τ;
          to = radius - .5 * step;
        }
        for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
          listener.point((point = d3_geo_spherical([cr, -sr * Math.cos(t), -sr * Math.sin(t)]))[0], point[1]);
        }
      };
    }
    function d3_geo_circleAngle(cr, point) {
      var a = d3_geo_cartesian(point);
      a[0] -= cr;
      d3_geo_cartesianNormalize(a);
      var angle = d3_acos(-a[1]);
      return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
    }
    d3.geo.distance = function (a, b) {
      var Δλ = (b[0] - a[0]) * d3_radians,
          φ0 = a[1] * d3_radians,
          φ1 = b[1] * d3_radians,
          sinΔλ = Math.sin(Δλ),
          cosΔλ = Math.cos(Δλ),
          sinφ0 = Math.sin(φ0),
          cosφ0 = Math.cos(φ0),
          sinφ1 = Math.sin(φ1),
          cosφ1 = Math.cos(φ1),
          t;
      return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
    };
    d3.geo.graticule = function () {
      var x1,
          x0,
          X1,
          X0,
          y1,
          y0,
          Y1,
          Y0,
          dx = 10,
          dy = dx,
          DX = 90,
          DY = 360,
          x,
          y,
          X,
          Y,
          precision = 2.5;
      function graticule() {
        return {
          type: "MultiLineString",
          coordinates: lines()
        };
      }
      function lines() {
        return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
          return abs(x % DX) > ε;
        }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
          return abs(y % DY) > ε;
        }).map(y));
      }
      graticule.lines = function () {
        return lines().map(function (coordinates) {
          return {
            type: "LineString",
            coordinates: coordinates
          };
        });
      };
      graticule.outline = function () {
        return {
          type: "Polygon",
          coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
        };
      };
      graticule.extent = function (_) {
        if (!arguments.length) return graticule.minorExtent();
        return graticule.majorExtent(_).minorExtent(_);
      };
      graticule.majorExtent = function (_) {
        if (!arguments.length) return [[X0, Y0], [X1, Y1]];
        X0 = +_[0][0], X1 = +_[1][0];
        Y0 = +_[0][1], Y1 = +_[1][1];
        if (X0 > X1) _ = X0, X0 = X1, X1 = _;
        if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
        return graticule.precision(precision);
      };
      graticule.minorExtent = function (_) {
        if (!arguments.length) return [[x0, y0], [x1, y1]];
        x0 = +_[0][0], x1 = +_[1][0];
        y0 = +_[0][1], y1 = +_[1][1];
        if (x0 > x1) _ = x0, x0 = x1, x1 = _;
        if (y0 > y1) _ = y0, y0 = y1, y1 = _;
        return graticule.precision(precision);
      };
      graticule.step = function (_) {
        if (!arguments.length) return graticule.minorStep();
        return graticule.majorStep(_).minorStep(_);
      };
      graticule.majorStep = function (_) {
        if (!arguments.length) return [DX, DY];
        DX = +_[0], DY = +_[1];
        return graticule;
      };
      graticule.minorStep = function (_) {
        if (!arguments.length) return [dx, dy];
        dx = +_[0], dy = +_[1];
        return graticule;
      };
      graticule.precision = function (_) {
        if (!arguments.length) return precision;
        precision = +_;
        x = d3_geo_graticuleX(y0, y1, 90);
        y = d3_geo_graticuleY(x0, x1, precision);
        X = d3_geo_graticuleX(Y0, Y1, 90);
        Y = d3_geo_graticuleY(X0, X1, precision);
        return graticule;
      };
      return graticule.majorExtent([[-180, -90 + ε], [180, 90 - ε]]).minorExtent([[-180, -80 - ε], [180, 80 + ε]]);
    };
    function d3_geo_graticuleX(y0, y1, dy) {
      var y = d3.range(y0, y1 - ε, dy).concat(y1);
      return function (x) {
        return y.map(function (y) {
          return [x, y];
        });
      };
    }
    function d3_geo_graticuleY(x0, x1, dx) {
      var x = d3.range(x0, x1 - ε, dx).concat(x1);
      return function (y) {
        return x.map(function (x) {
          return [x, y];
        });
      };
    }
    function d3_source(d) {
      return d.source;
    }
    function d3_target(d) {
      return d.target;
    }
    d3.geo.greatArc = function () {
      var source = d3_source,
          source_,
          target = d3_target,
          target_;
      function greatArc() {
        return {
          type: "LineString",
          coordinates: [source_ || source.apply(this, arguments), target_ || target.apply(this, arguments)]
        };
      }
      greatArc.distance = function () {
        return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
      };
      greatArc.source = function (_) {
        if (!arguments.length) return source;
        source = _, source_ = typeof _ === "function" ? null : _;
        return greatArc;
      };
      greatArc.target = function (_) {
        if (!arguments.length) return target;
        target = _, target_ = typeof _ === "function" ? null : _;
        return greatArc;
      };
      greatArc.precision = function () {
        return arguments.length ? greatArc : 0;
      };
      return greatArc;
    };
    d3.geo.interpolate = function (source, target) {
      return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
    };
    function d3_geo_interpolate(x0, y0, x1, y1) {
      var cy0 = Math.cos(y0),
          sy0 = Math.sin(y0),
          cy1 = Math.cos(y1),
          sy1 = Math.sin(y1),
          kx0 = cy0 * Math.cos(x0),
          ky0 = cy0 * Math.sin(x0),
          kx1 = cy1 * Math.cos(x1),
          ky1 = cy1 * Math.sin(x1),
          d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))),
          k = 1 / Math.sin(d);
      var interpolate = d ? function (t) {
        var B = Math.sin(t *= d) * k,
            A = Math.sin(d - t) * k,
            x = A * kx0 + B * kx1,
            y = A * ky0 + B * ky1,
            z = A * sy0 + B * sy1;
        return [Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees];
      } : function () {
        return [x0 * d3_degrees, y0 * d3_degrees];
      };
      interpolate.distance = d;
      return interpolate;
    }
    d3.geo.length = function (object) {
      d3_geo_lengthSum = 0;
      d3.geo.stream(object, d3_geo_length);
      return d3_geo_lengthSum;
    };
    var d3_geo_lengthSum;
    var d3_geo_length = {
      sphere: d3_noop,
      point: d3_noop,
      lineStart: d3_geo_lengthLineStart,
      lineEnd: d3_noop,
      polygonStart: d3_noop,
      polygonEnd: d3_noop
    };
    function d3_geo_lengthLineStart() {
      var λ0, sinφ0, cosφ0;
      d3_geo_length.point = function (λ, φ) {
        λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
        d3_geo_length.point = nextPoint;
      };
      d3_geo_length.lineEnd = function () {
        d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
      };
      function nextPoint(λ, φ) {
        var sinφ = Math.sin(φ *= d3_radians),
            cosφ = Math.cos(φ),
            t = abs((λ *= d3_radians) - λ0),
            cosΔλ = Math.cos(t);
        d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
      }
    }
    function d3_geo_azimuthal(scale, angle) {
      function azimuthal(λ, φ) {
        var cosλ = Math.cos(λ),
            cosφ = Math.cos(φ),
            k = scale(cosλ * cosφ);
        return [k * cosφ * Math.sin(λ), k * Math.sin(φ)];
      }
      azimuthal.invert = function (x, y) {
        var ρ = Math.sqrt(x * x + y * y),
            c = angle(ρ),
            sinc = Math.sin(c),
            cosc = Math.cos(c);
        return [Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ)];
      };
      return azimuthal;
    }
    var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function (cosλcosφ) {
      return Math.sqrt(2 / (1 + cosλcosφ));
    }, function (ρ) {
      return 2 * Math.asin(ρ / 2);
    });
    (d3.geo.azimuthalEqualArea = function () {
      return d3_geo_projection(d3_geo_azimuthalEqualArea);
    }).raw = d3_geo_azimuthalEqualArea;
    var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function (cosλcosφ) {
      var c = Math.acos(cosλcosφ);
      return c && c / Math.sin(c);
    }, d3_identity);
    (d3.geo.azimuthalEquidistant = function () {
      return d3_geo_projection(d3_geo_azimuthalEquidistant);
    }).raw = d3_geo_azimuthalEquidistant;
    function d3_geo_conicConformal(φ0, φ1) {
      var cosφ0 = Math.cos(φ0),
          t = function t(φ) {
        return Math.tan(π / 4 + φ / 2);
      },
          n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)),
          F = cosφ0 * Math.pow(t(φ0), n) / n;
      if (!n) return d3_geo_mercator;
      function forward(λ, φ) {
        if (F > 0) {
          if (φ < -halfπ + ε) φ = -halfπ + ε;
        } else {
          if (φ > halfπ - ε) φ = halfπ - ε;
        }
        var ρ = F / Math.pow(t(φ), n);
        return [ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ)];
      }
      forward.invert = function (x, y) {
        var ρ0_y = F - y,
            ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
        return [Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ];
      };
      return forward;
    }
    (d3.geo.conicConformal = function () {
      return d3_geo_conic(d3_geo_conicConformal);
    }).raw = d3_geo_conicConformal;
    function d3_geo_conicEquidistant(φ0, φ1) {
      var cosφ0 = Math.cos(φ0),
          n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0),
          G = cosφ0 / n + φ0;
      if (abs(n) < ε) return d3_geo_equirectangular;
      function forward(λ, φ) {
        var ρ = G - φ;
        return [ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ)];
      }
      forward.invert = function (x, y) {
        var ρ0_y = G - y;
        return [Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y)];
      };
      return forward;
    }
    (d3.geo.conicEquidistant = function () {
      return d3_geo_conic(d3_geo_conicEquidistant);
    }).raw = d3_geo_conicEquidistant;
    var d3_geo_gnomonic = d3_geo_azimuthal(function (cosλcosφ) {
      return 1 / cosλcosφ;
    }, Math.atan);
    (d3.geo.gnomonic = function () {
      return d3_geo_projection(d3_geo_gnomonic);
    }).raw = d3_geo_gnomonic;
    function d3_geo_mercator(λ, φ) {
      return [λ, Math.log(Math.tan(π / 4 + φ / 2))];
    }
    d3_geo_mercator.invert = function (x, y) {
      return [x, 2 * Math.atan(Math.exp(y)) - halfπ];
    };
    function d3_geo_mercatorProjection(project) {
      var m = d3_geo_projection(project),
          scale = m.scale,
          translate = m.translate,
          clipExtent = m.clipExtent,
          clipAuto;
      m.scale = function () {
        var v = scale.apply(m, arguments);
        return v === m ? clipAuto ? m.clipExtent(null) : m : v;
      };
      m.translate = function () {
        var v = translate.apply(m, arguments);
        return v === m ? clipAuto ? m.clipExtent(null) : m : v;
      };
      m.clipExtent = function (_) {
        var v = clipExtent.apply(m, arguments);
        if (v === m) {
          if (clipAuto = _ == null) {
            var k = π * scale(),
                t = translate();
            clipExtent([[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]]);
          }
        } else if (clipAuto) {
          v = null;
        }
        return v;
      };
      return m.clipExtent(null);
    }
    (d3.geo.mercator = function () {
      return d3_geo_mercatorProjection(d3_geo_mercator);
    }).raw = d3_geo_mercator;
    var d3_geo_orthographic = d3_geo_azimuthal(function () {
      return 1;
    }, Math.asin);
    (d3.geo.orthographic = function () {
      return d3_geo_projection(d3_geo_orthographic);
    }).raw = d3_geo_orthographic;
    var d3_geo_stereographic = d3_geo_azimuthal(function (cosλcosφ) {
      return 1 / (1 + cosλcosφ);
    }, function (ρ) {
      return 2 * Math.atan(ρ);
    });
    (d3.geo.stereographic = function () {
      return d3_geo_projection(d3_geo_stereographic);
    }).raw = d3_geo_stereographic;
    function d3_geo_transverseMercator(λ, φ) {
      return [Math.log(Math.tan(π / 4 + φ / 2)), -λ];
    }
    d3_geo_transverseMercator.invert = function (x, y) {
      return [-y, 2 * Math.atan(Math.exp(x)) - halfπ];
    };
    (d3.geo.transverseMercator = function () {
      var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator),
          center = projection.center,
          rotate = projection.rotate;
      projection.center = function (_) {
        return _ ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
      };
      projection.rotate = function (_) {
        return _ ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
      };
      return rotate([0, 0, 90]);
    }).raw = d3_geo_transverseMercator;
    d3.geom = {};
    function d3_geom_pointX(d) {
      return d[0];
    }
    function d3_geom_pointY(d) {
      return d[1];
    }
    d3.geom.hull = function (vertices) {
      var x = d3_geom_pointX,
          y = d3_geom_pointY;
      if (arguments.length) return hull(vertices);
      function hull(data) {
        if (data.length < 3) return [];
        var fx = d3_functor(x),
            fy = d3_functor(y),
            i,
            n = data.length,
            points = [],
            flippedPoints = [];
        for (i = 0; i < n; i++) {
          points.push([+fx.call(this, data[i], i), +fy.call(this, data[i], i), i]);
        }
        points.sort(d3_geom_hullOrder);
        for (i = 0; i < n; i++) {
          flippedPoints.push([points[i][0], -points[i][1]]);
        }var upper = d3_geom_hullUpper(points),
            lower = d3_geom_hullUpper(flippedPoints);
        var skipLeft = lower[0] === upper[0],
            skipRight = lower[lower.length - 1] === upper[upper.length - 1],
            polygon = [];
        for (i = upper.length - 1; i >= 0; --i) {
          polygon.push(data[points[upper[i]][2]]);
        }for (i = +skipLeft; i < lower.length - skipRight; ++i) {
          polygon.push(data[points[lower[i]][2]]);
        }return polygon;
      }
      hull.x = function (_) {
        return arguments.length ? (x = _, hull) : x;
      };
      hull.y = function (_) {
        return arguments.length ? (y = _, hull) : y;
      };
      return hull;
    };
    function d3_geom_hullUpper(points) {
      var n = points.length,
          hull = [0, 1],
          hs = 2;
      for (var i = 2; i < n; i++) {
        while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) {
          --hs;
        }hull[hs++] = i;
      }
      return hull.slice(0, hs);
    }
    function d3_geom_hullOrder(a, b) {
      return a[0] - b[0] || a[1] - b[1];
    }
    d3.geom.polygon = function (coordinates) {
      d3_subclass(coordinates, d3_geom_polygonPrototype);
      return coordinates;
    };
    var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
    d3_geom_polygonPrototype.area = function () {
      var i = -1,
          n = this.length,
          a,
          b = this[n - 1],
          area = 0;
      while (++i < n) {
        a = b;
        b = this[i];
        area += a[1] * b[0] - a[0] * b[1];
      }
      return area * .5;
    };
    d3_geom_polygonPrototype.centroid = function (k) {
      var i = -1,
          n = this.length,
          x = 0,
          y = 0,
          a,
          b = this[n - 1],
          c;
      if (!arguments.length) k = -1 / (6 * this.area());
      while (++i < n) {
        a = b;
        b = this[i];
        c = a[0] * b[1] - b[0] * a[1];
        x += (a[0] + b[0]) * c;
        y += (a[1] + b[1]) * c;
      }
      return [x * k, y * k];
    };
    d3_geom_polygonPrototype.clip = function (subject) {
      var input,
          closed = d3_geom_polygonClosed(subject),
          i = -1,
          n = this.length - d3_geom_polygonClosed(this),
          j,
          m,
          a = this[n - 1],
          b,
          c,
          d;
      while (++i < n) {
        input = subject.slice();
        subject.length = 0;
        b = this[i];
        c = input[(m = input.length - closed) - 1];
        j = -1;
        while (++j < m) {
          d = input[j];
          if (d3_geom_polygonInside(d, a, b)) {
            if (!d3_geom_polygonInside(c, a, b)) {
              subject.push(d3_geom_polygonIntersect(c, d, a, b));
            }
            subject.push(d);
          } else if (d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          c = d;
        }
        if (closed) subject.push(subject[0]);
        a = b;
      }
      return subject;
    };
    function d3_geom_polygonInside(p, a, b) {
      return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
    }
    function d3_geom_polygonIntersect(c, d, a, b) {
      var x1 = c[0],
          x3 = a[0],
          x21 = d[0] - x1,
          x43 = b[0] - x3,
          y1 = c[1],
          y3 = a[1],
          y21 = d[1] - y1,
          y43 = b[1] - y3,
          ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
      return [x1 + ua * x21, y1 + ua * y21];
    }
    function d3_geom_polygonClosed(coordinates) {
      var a = coordinates[0],
          b = coordinates[coordinates.length - 1];
      return !(a[0] - b[0] || a[1] - b[1]);
    }
    var d3_geom_voronoiEdges,
        d3_geom_voronoiCells,
        d3_geom_voronoiBeaches,
        d3_geom_voronoiBeachPool = [],
        d3_geom_voronoiFirstCircle,
        d3_geom_voronoiCircles,
        d3_geom_voronoiCirclePool = [];
    function d3_geom_voronoiBeach() {
      d3_geom_voronoiRedBlackNode(this);
      this.edge = this.site = this.circle = null;
    }
    function d3_geom_voronoiCreateBeach(site) {
      var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
      beach.site = site;
      return beach;
    }
    function d3_geom_voronoiDetachBeach(beach) {
      d3_geom_voronoiDetachCircle(beach);
      d3_geom_voronoiBeaches.remove(beach);
      d3_geom_voronoiBeachPool.push(beach);
      d3_geom_voronoiRedBlackNode(beach);
    }
    function d3_geom_voronoiRemoveBeach(beach) {
      var circle = beach.circle,
          x = circle.x,
          y = circle.cy,
          vertex = {
        x: x,
        y: y
      },
          previous = beach.P,
          next = beach.N,
          disappearing = [beach];
      d3_geom_voronoiDetachBeach(beach);
      var lArc = previous;
      while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
        previous = lArc.P;
        disappearing.unshift(lArc);
        d3_geom_voronoiDetachBeach(lArc);
        lArc = previous;
      }
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachCircle(lArc);
      var rArc = next;
      while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
        next = rArc.N;
        disappearing.push(rArc);
        d3_geom_voronoiDetachBeach(rArc);
        rArc = next;
      }
      disappearing.push(rArc);
      d3_geom_voronoiDetachCircle(rArc);
      var nArcs = disappearing.length,
          iArc;
      for (iArc = 1; iArc < nArcs; ++iArc) {
        rArc = disappearing[iArc];
        lArc = disappearing[iArc - 1];
        d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
      }
      lArc = disappearing[0];
      rArc = disappearing[nArcs - 1];
      rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
    }
    function d3_geom_voronoiAddBeach(site) {
      var x = site.x,
          directrix = site.y,
          lArc,
          rArc,
          dxl,
          dxr,
          node = d3_geom_voronoiBeaches._;
      while (node) {
        dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
        if (dxl > ε) node = node.L;else {
          dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
          if (dxr > ε) {
            if (!node.R) {
              lArc = node;
              break;
            }
            node = node.R;
          } else {
            if (dxl > -ε) {
              lArc = node.P;
              rArc = node;
            } else if (dxr > -ε) {
              lArc = node;
              rArc = node.N;
            } else {
              lArc = rArc = node;
            }
            break;
          }
        }
      }
      var newArc = d3_geom_voronoiCreateBeach(site);
      d3_geom_voronoiBeaches.insert(lArc, newArc);
      if (!lArc && !rArc) return;
      if (lArc === rArc) {
        d3_geom_voronoiDetachCircle(lArc);
        rArc = d3_geom_voronoiCreateBeach(lArc.site);
        d3_geom_voronoiBeaches.insert(newArc, rArc);
        newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
        d3_geom_voronoiAttachCircle(lArc);
        d3_geom_voronoiAttachCircle(rArc);
        return;
      }
      if (!rArc) {
        newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
        return;
      }
      d3_geom_voronoiDetachCircle(lArc);
      d3_geom_voronoiDetachCircle(rArc);
      var lSite = lArc.site,
          ax = lSite.x,
          ay = lSite.y,
          bx = site.x - ax,
          by = site.y - ay,
          rSite = rArc.site,
          cx = rSite.x - ax,
          cy = rSite.y - ay,
          d = 2 * (bx * cy - by * cx),
          hb = bx * bx + by * by,
          hc = cx * cx + cy * cy,
          vertex = {
        x: (cy * hb - by * hc) / d + ax,
        y: (bx * hc - cx * hb) / d + ay
      };
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
      newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
      rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
    }
    function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
      var site = arc.site,
          rfocx = site.x,
          rfocy = site.y,
          pby2 = rfocy - directrix;
      if (!pby2) return rfocx;
      var lArc = arc.P;
      if (!lArc) return -Infinity;
      site = lArc.site;
      var lfocx = site.x,
          lfocy = site.y,
          plby2 = lfocy - directrix;
      if (!plby2) return lfocx;
      var hl = lfocx - rfocx,
          aby2 = 1 / pby2 - 1 / plby2,
          b = hl / plby2;
      if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
      return (rfocx + lfocx) / 2;
    }
    function d3_geom_voronoiRightBreakPoint(arc, directrix) {
      var rArc = arc.N;
      if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
      var site = arc.site;
      return site.y === directrix ? site.x : Infinity;
    }
    function d3_geom_voronoiCell(site) {
      this.site = site;
      this.edges = [];
    }
    d3_geom_voronoiCell.prototype.prepare = function () {
      var halfEdges = this.edges,
          iHalfEdge = halfEdges.length,
          edge;
      while (iHalfEdge--) {
        edge = halfEdges[iHalfEdge].edge;
        if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
      }
      halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
      return halfEdges.length;
    };
    function d3_geom_voronoiCloseCells(extent) {
      var x0 = extent[0][0],
          x1 = extent[1][0],
          y0 = extent[0][1],
          y1 = extent[1][1],
          x2,
          y2,
          x3,
          y3,
          cells = d3_geom_voronoiCells,
          iCell = cells.length,
          cell,
          iHalfEdge,
          halfEdges,
          nHalfEdges,
          start,
          end;
      while (iCell--) {
        cell = cells[iCell];
        if (!cell || !cell.prepare()) continue;
        halfEdges = cell.edges;
        nHalfEdges = halfEdges.length;
        iHalfEdge = 0;
        while (iHalfEdge < nHalfEdges) {
          end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
          start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
          if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
            halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
              x: x0,
              y: abs(x2 - x0) < ε ? y2 : y1
            } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
              x: abs(y2 - y1) < ε ? x2 : x1,
              y: y1
            } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
              x: x1,
              y: abs(x2 - x1) < ε ? y2 : y0
            } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
              x: abs(y2 - y0) < ε ? x2 : x0,
              y: y0
            } : null), cell.site, null));
            ++nHalfEdges;
          }
        }
      }
    }
    function d3_geom_voronoiHalfEdgeOrder(a, b) {
      return b.angle - a.angle;
    }
    function d3_geom_voronoiCircle() {
      d3_geom_voronoiRedBlackNode(this);
      this.x = this.y = this.arc = this.site = this.cy = null;
    }
    function d3_geom_voronoiAttachCircle(arc) {
      var lArc = arc.P,
          rArc = arc.N;
      if (!lArc || !rArc) return;
      var lSite = lArc.site,
          cSite = arc.site,
          rSite = rArc.site;
      if (lSite === rSite) return;
      var bx = cSite.x,
          by = cSite.y,
          ax = lSite.x - bx,
          ay = lSite.y - by,
          cx = rSite.x - bx,
          cy = rSite.y - by;
      var d = 2 * (ax * cy - ay * cx);
      if (d >= -ε2) return;
      var ha = ax * ax + ay * ay,
          hc = cx * cx + cy * cy,
          x = (cy * ha - ay * hc) / d,
          y = (ax * hc - cx * ha) / d,
          cy = y + by;
      var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
      circle.arc = arc;
      circle.site = cSite;
      circle.x = x + bx;
      circle.y = cy + Math.sqrt(x * x + y * y);
      circle.cy = cy;
      arc.circle = circle;
      var before = null,
          node = d3_geom_voronoiCircles._;
      while (node) {
        if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
          if (node.L) node = node.L;else {
            before = node.P;
            break;
          }
        } else {
          if (node.R) node = node.R;else {
            before = node;
            break;
          }
        }
      }
      d3_geom_voronoiCircles.insert(before, circle);
      if (!before) d3_geom_voronoiFirstCircle = circle;
    }
    function d3_geom_voronoiDetachCircle(arc) {
      var circle = arc.circle;
      if (circle) {
        if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
        d3_geom_voronoiCircles.remove(circle);
        d3_geom_voronoiCirclePool.push(circle);
        d3_geom_voronoiRedBlackNode(circle);
        arc.circle = null;
      }
    }
    function d3_geom_voronoiClipEdges(extent) {
      var edges = d3_geom_voronoiEdges,
          clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]),
          i = edges.length,
          e;
      while (i--) {
        e = edges[i];
        if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
          e.a = e.b = null;
          edges.splice(i, 1);
        }
      }
    }
    function d3_geom_voronoiConnectEdge(edge, extent) {
      var vb = edge.b;
      if (vb) return true;
      var va = edge.a,
          x0 = extent[0][0],
          x1 = extent[1][0],
          y0 = extent[0][1],
          y1 = extent[1][1],
          lSite = edge.l,
          rSite = edge.r,
          lx = lSite.x,
          ly = lSite.y,
          rx = rSite.x,
          ry = rSite.y,
          fx = (lx + rx) / 2,
          fy = (ly + ry) / 2,
          fm,
          fb;
      if (ry === ly) {
        if (fx < x0 || fx >= x1) return;
        if (lx > rx) {
          if (!va) va = {
            x: fx,
            y: y0
          };else if (va.y >= y1) return;
          vb = {
            x: fx,
            y: y1
          };
        } else {
          if (!va) va = {
            x: fx,
            y: y1
          };else if (va.y < y0) return;
          vb = {
            x: fx,
            y: y0
          };
        }
      } else {
        fm = (lx - rx) / (ry - ly);
        fb = fy - fm * fx;
        if (fm < -1 || fm > 1) {
          if (lx > rx) {
            if (!va) va = {
              x: (y0 - fb) / fm,
              y: y0
            };else if (va.y >= y1) return;
            vb = {
              x: (y1 - fb) / fm,
              y: y1
            };
          } else {
            if (!va) va = {
              x: (y1 - fb) / fm,
              y: y1
            };else if (va.y < y0) return;
            vb = {
              x: (y0 - fb) / fm,
              y: y0
            };
          }
        } else {
          if (ly < ry) {
            if (!va) va = {
              x: x0,
              y: fm * x0 + fb
            };else if (va.x >= x1) return;
            vb = {
              x: x1,
              y: fm * x1 + fb
            };
          } else {
            if (!va) va = {
              x: x1,
              y: fm * x1 + fb
            };else if (va.x < x0) return;
            vb = {
              x: x0,
              y: fm * x0 + fb
            };
          }
        }
      }
      edge.a = va;
      edge.b = vb;
      return true;
    }
    function d3_geom_voronoiEdge(lSite, rSite) {
      this.l = lSite;
      this.r = rSite;
      this.a = this.b = null;
    }
    function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
      var edge = new d3_geom_voronoiEdge(lSite, rSite);
      d3_geom_voronoiEdges.push(edge);
      if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
      if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
      d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
      d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
      return edge;
    }
    function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
      var edge = new d3_geom_voronoiEdge(lSite, null);
      edge.a = va;
      edge.b = vb;
      d3_geom_voronoiEdges.push(edge);
      return edge;
    }
    function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
      if (!edge.a && !edge.b) {
        edge.a = vertex;
        edge.l = lSite;
        edge.r = rSite;
      } else if (edge.l === rSite) {
        edge.b = vertex;
      } else {
        edge.a = vertex;
      }
    }
    function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
      var va = edge.a,
          vb = edge.b;
      this.edge = edge;
      this.site = lSite;
      this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
    }
    d3_geom_voronoiHalfEdge.prototype = {
      start: function start() {
        return this.edge.l === this.site ? this.edge.a : this.edge.b;
      },
      end: function end() {
        return this.edge.l === this.site ? this.edge.b : this.edge.a;
      }
    };
    function d3_geom_voronoiRedBlackTree() {
      this._ = null;
    }
    function d3_geom_voronoiRedBlackNode(node) {
      node.U = node.C = node.L = node.R = node.P = node.N = null;
    }
    d3_geom_voronoiRedBlackTree.prototype = {
      insert: function insert(after, node) {
        var parent, grandpa, uncle;
        if (after) {
          node.P = after;
          node.N = after.N;
          if (after.N) after.N.P = node;
          after.N = node;
          if (after.R) {
            after = after.R;
            while (after.L) {
              after = after.L;
            }after.L = node;
          } else {
            after.R = node;
          }
          parent = after;
        } else if (this._) {
          after = d3_geom_voronoiRedBlackFirst(this._);
          node.P = null;
          node.N = after;
          after.P = after.L = node;
          parent = after;
        } else {
          node.P = node.N = null;
          this._ = node;
          parent = null;
        }
        node.L = node.R = null;
        node.U = parent;
        node.C = true;
        after = node;
        while (parent && parent.C) {
          grandpa = parent.U;
          if (parent === grandpa.L) {
            uncle = grandpa.R;
            if (uncle && uncle.C) {
              parent.C = uncle.C = false;
              grandpa.C = true;
              after = grandpa;
            } else {
              if (after === parent.R) {
                d3_geom_voronoiRedBlackRotateLeft(this, parent);
                after = parent;
                parent = after.U;
              }
              parent.C = false;
              grandpa.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, grandpa);
            }
          } else {
            uncle = grandpa.L;
            if (uncle && uncle.C) {
              parent.C = uncle.C = false;
              grandpa.C = true;
              after = grandpa;
            } else {
              if (after === parent.L) {
                d3_geom_voronoiRedBlackRotateRight(this, parent);
                after = parent;
                parent = after.U;
              }
              parent.C = false;
              grandpa.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
            }
          }
          parent = after.U;
        }
        this._.C = false;
      },
      remove: function remove(node) {
        if (node.N) node.N.P = node.P;
        if (node.P) node.P.N = node.N;
        node.N = node.P = null;
        var parent = node.U,
            sibling,
            left = node.L,
            right = node.R,
            next,
            red;
        if (!left) next = right;else if (!right) next = left;else next = d3_geom_voronoiRedBlackFirst(right);
        if (parent) {
          if (parent.L === node) parent.L = next;else parent.R = next;
        } else {
          this._ = next;
        }
        if (left && right) {
          red = next.C;
          next.C = node.C;
          next.L = left;
          left.U = next;
          if (next !== right) {
            parent = next.U;
            next.U = node.U;
            node = next.R;
            parent.L = node;
            next.R = right;
            right.U = next;
          } else {
            next.U = parent;
            parent = next;
            node = next.R;
          }
        } else {
          red = node.C;
          node = next;
        }
        if (node) node.U = parent;
        if (red) return;
        if (node && node.C) {
          node.C = false;
          return;
        }
        do {
          if (node === this._) break;
          if (node === parent.L) {
            sibling = parent.R;
            if (sibling.C) {
              sibling.C = false;
              parent.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              sibling = parent.R;
            }
            if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
              if (!sibling.R || !sibling.R.C) {
                sibling.L.C = false;
                sibling.C = true;
                d3_geom_voronoiRedBlackRotateRight(this, sibling);
                sibling = parent.R;
              }
              sibling.C = parent.C;
              parent.C = sibling.R.C = false;
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              node = this._;
              break;
            }
          } else {
            sibling = parent.L;
            if (sibling.C) {
              sibling.C = false;
              parent.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              sibling = parent.L;
            }
            if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
              if (!sibling.L || !sibling.L.C) {
                sibling.R.C = false;
                sibling.C = true;
                d3_geom_voronoiRedBlackRotateLeft(this, sibling);
                sibling = parent.L;
              }
              sibling.C = parent.C;
              parent.C = sibling.L.C = false;
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              node = this._;
              break;
            }
          }
          sibling.C = true;
          node = parent;
          parent = parent.U;
        } while (!node.C);
        if (node) node.C = false;
      }
    };
    function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
      var p = node,
          q = node.R,
          parent = p.U;
      if (parent) {
        if (parent.L === p) parent.L = q;else parent.R = q;
      } else {
        tree._ = q;
      }
      q.U = parent;
      p.U = q;
      p.R = q.L;
      if (p.R) p.R.U = p;
      q.L = p;
    }
    function d3_geom_voronoiRedBlackRotateRight(tree, node) {
      var p = node,
          q = node.L,
          parent = p.U;
      if (parent) {
        if (parent.L === p) parent.L = q;else parent.R = q;
      } else {
        tree._ = q;
      }
      q.U = parent;
      p.U = q;
      p.L = q.R;
      if (p.L) p.L.U = p;
      q.R = p;
    }
    function d3_geom_voronoiRedBlackFirst(node) {
      while (node.L) {
        node = node.L;
      }return node;
    }
    function d3_geom_voronoi(sites, bbox) {
      var site = sites.sort(d3_geom_voronoiVertexOrder).pop(),
          x0,
          y0,
          circle;
      d3_geom_voronoiEdges = [];
      d3_geom_voronoiCells = new Array(sites.length);
      d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
      d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
      while (true) {
        circle = d3_geom_voronoiFirstCircle;
        if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
          if (site.x !== x0 || site.y !== y0) {
            d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
            d3_geom_voronoiAddBeach(site);
            x0 = site.x, y0 = site.y;
          }
          site = sites.pop();
        } else if (circle) {
          d3_geom_voronoiRemoveBeach(circle.arc);
        } else {
          break;
        }
      }
      if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
      var diagram = {
        cells: d3_geom_voronoiCells,
        edges: d3_geom_voronoiEdges
      };
      d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
      return diagram;
    }
    function d3_geom_voronoiVertexOrder(a, b) {
      return b.y - a.y || b.x - a.x;
    }
    d3.geom.voronoi = function (points) {
      var x = d3_geom_pointX,
          y = d3_geom_pointY,
          fx = x,
          fy = y,
          clipExtent = d3_geom_voronoiClipExtent;
      if (points) return voronoi(points);
      function voronoi(data) {
        var polygons = new Array(data.length),
            x0 = clipExtent[0][0],
            y0 = clipExtent[0][1],
            x1 = clipExtent[1][0],
            y1 = clipExtent[1][1];
        d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function (cell, i) {
          var edges = cell.edges,
              site = cell.site,
              polygon = polygons[i] = edges.length ? edges.map(function (e) {
            var s = e.start();
            return [s.x, s.y];
          }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [[x0, y1], [x1, y1], [x1, y0], [x0, y0]] : [];
          polygon.point = data[i];
        });
        return polygons;
      }
      function sites(data) {
        return data.map(function (d, i) {
          return {
            x: Math.round(fx(d, i) / ε) * ε,
            y: Math.round(fy(d, i) / ε) * ε,
            i: i
          };
        });
      }
      voronoi.links = function (data) {
        return d3_geom_voronoi(sites(data)).edges.filter(function (edge) {
          return edge.l && edge.r;
        }).map(function (edge) {
          return {
            source: data[edge.l.i],
            target: data[edge.r.i]
          };
        });
      };
      voronoi.triangles = function (data) {
        var triangles = [];
        d3_geom_voronoi(sites(data)).cells.forEach(function (cell, i) {
          var site = cell.site,
              edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder),
              j = -1,
              m = edges.length,
              e0,
              s0,
              e1 = edges[m - 1].edge,
              s1 = e1.l === site ? e1.r : e1.l;
          while (++j < m) {
            e0 = e1;
            s0 = s1;
            e1 = edges[j].edge;
            s1 = e1.l === site ? e1.r : e1.l;
            if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
              triangles.push([data[i], data[s0.i], data[s1.i]]);
            }
          }
        });
        return triangles;
      };
      voronoi.x = function (_) {
        return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
      };
      voronoi.y = function (_) {
        return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
      };
      voronoi.clipExtent = function (_) {
        if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
        clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
        return voronoi;
      };
      voronoi.size = function (_) {
        if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
        return voronoi.clipExtent(_ && [[0, 0], _]);
      };
      return voronoi;
    };
    var d3_geom_voronoiClipExtent = [[-1e6, -1e6], [1e6, 1e6]];
    function d3_geom_voronoiTriangleArea(a, b, c) {
      return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
    }
    d3.geom.delaunay = function (vertices) {
      return d3.geom.voronoi().triangles(vertices);
    };
    d3.geom.quadtree = function (points, x1, y1, x2, y2) {
      var x = d3_geom_pointX,
          y = d3_geom_pointY,
          compat;
      if (compat = arguments.length) {
        x = d3_geom_quadtreeCompatX;
        y = d3_geom_quadtreeCompatY;
        if (compat === 3) {
          y2 = y1;
          x2 = x1;
          y1 = x1 = 0;
        }
        return quadtree(points);
      }
      function quadtree(data) {
        var d,
            fx = d3_functor(x),
            fy = d3_functor(y),
            xs,
            ys,
            i,
            n,
            x1_,
            y1_,
            x2_,
            y2_;
        if (x1 != null) {
          x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
        } else {
          x2_ = y2_ = -(x1_ = y1_ = Infinity);
          xs = [], ys = [];
          n = data.length;
          if (compat) for (i = 0; i < n; ++i) {
            d = data[i];
            if (d.x < x1_) x1_ = d.x;
            if (d.y < y1_) y1_ = d.y;
            if (d.x > x2_) x2_ = d.x;
            if (d.y > y2_) y2_ = d.y;
            xs.push(d.x);
            ys.push(d.y);
          } else for (i = 0; i < n; ++i) {
            var x_ = +fx(d = data[i], i),
                y_ = +fy(d, i);
            if (x_ < x1_) x1_ = x_;
            if (y_ < y1_) y1_ = y_;
            if (x_ > x2_) x2_ = x_;
            if (y_ > y2_) y2_ = y_;
            xs.push(x_);
            ys.push(y_);
          }
        }
        var dx = x2_ - x1_,
            dy = y2_ - y1_;
        if (dx > dy) y2_ = y1_ + dx;else x2_ = x1_ + dy;
        function insert(n, d, x, y, x1, y1, x2, y2) {
          if (isNaN(x) || isNaN(y)) return;
          if (n.leaf) {
            var nx = n.x,
                ny = n.y;
            if (nx != null) {
              if (abs(nx - x) + abs(ny - y) < .01) {
                insertChild(n, d, x, y, x1, y1, x2, y2);
              } else {
                var nPoint = n.point;
                n.x = n.y = n.point = null;
                insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
                insertChild(n, d, x, y, x1, y1, x2, y2);
              }
            } else {
              n.x = x, n.y = y, n.point = d;
            }
          } else {
            insertChild(n, d, x, y, x1, y1, x2, y2);
          }
        }
        function insertChild(n, d, x, y, x1, y1, x2, y2) {
          var xm = (x1 + x2) * .5,
              ym = (y1 + y2) * .5,
              right = x >= xm,
              below = y >= ym,
              i = below << 1 | right;
          n.leaf = false;
          n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
          if (right) x1 = xm;else x2 = xm;
          if (below) y1 = ym;else y2 = ym;
          insert(n, d, x, y, x1, y1, x2, y2);
        }
        var root = d3_geom_quadtreeNode();
        root.add = function (d) {
          insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
        };
        root.visit = function (f) {
          d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
        };
        root.find = function (point) {
          return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
        };
        i = -1;
        if (x1 == null) {
          while (++i < n) {
            insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
          }
          --i;
        } else data.forEach(root.add);
        xs = ys = data = d = null;
        return root;
      }
      quadtree.x = function (_) {
        return arguments.length ? (x = _, quadtree) : x;
      };
      quadtree.y = function (_) {
        return arguments.length ? (y = _, quadtree) : y;
      };
      quadtree.extent = function (_) {
        if (!arguments.length) return x1 == null ? null : [[x1, y1], [x2, y2]];
        if (_ == null) x1 = y1 = x2 = y2 = null;else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], y2 = +_[1][1];
        return quadtree;
      };
      quadtree.size = function (_) {
        if (!arguments.length) return x1 == null ? null : [x2 - x1, y2 - y1];
        if (_ == null) x1 = y1 = x2 = y2 = null;else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
        return quadtree;
      };
      return quadtree;
    };
    function d3_geom_quadtreeCompatX(d) {
      return d.x;
    }
    function d3_geom_quadtreeCompatY(d) {
      return d.y;
    }
    function d3_geom_quadtreeNode() {
      return {
        leaf: true,
        nodes: [],
        point: null,
        x: null,
        y: null
      };
    }
    function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
      if (!f(node, x1, y1, x2, y2)) {
        var sx = (x1 + x2) * .5,
            sy = (y1 + y2) * .5,
            children = node.nodes;
        if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
        if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
        if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
        if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
      }
    }
    function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
      var minDistance2 = Infinity,
          closestPoint;
      (function find(node, x1, y1, x2, y2) {
        if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
        if (point = node.point) {
          var point,
              dx = x - node.x,
              dy = y - node.y,
              distance2 = dx * dx + dy * dy;
          if (distance2 < minDistance2) {
            var distance = Math.sqrt(minDistance2 = distance2);
            x0 = x - distance, y0 = y - distance;
            x3 = x + distance, y3 = y + distance;
            closestPoint = point;
          }
        }
        var children = node.nodes,
            xm = (x1 + x2) * .5,
            ym = (y1 + y2) * .5,
            right = x >= xm,
            below = y >= ym;
        for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
          if (node = children[i & 3]) switch (i & 3) {
            case 0:
              find(node, x1, y1, xm, ym);
              break;

            case 1:
              find(node, xm, y1, x2, ym);
              break;

            case 2:
              find(node, x1, ym, xm, y2);
              break;

            case 3:
              find(node, xm, ym, x2, y2);
              break;
          }
        }
      })(root, x0, y0, x3, y3);
      return closestPoint;
    }
    d3.interpolateRgb = d3_interpolateRgb;
    function d3_interpolateRgb(a, b) {
      a = d3.rgb(a);
      b = d3.rgb(b);
      var ar = a.r,
          ag = a.g,
          ab = a.b,
          br = b.r - ar,
          bg = b.g - ag,
          bb = b.b - ab;
      return function (t) {
        return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
      };
    }
    d3.interpolateObject = d3_interpolateObject;
    function d3_interpolateObject(a, b) {
      var i = {},
          c = {},
          k;
      for (k in a) {
        if (k in b) {
          i[k] = d3_interpolate(a[k], b[k]);
        } else {
          c[k] = a[k];
        }
      }
      for (k in b) {
        if (!(k in a)) {
          c[k] = b[k];
        }
      }
      return function (t) {
        for (k in i) {
          c[k] = i[k](t);
        }return c;
      };
    }
    d3.interpolateNumber = d3_interpolateNumber;
    function d3_interpolateNumber(a, b) {
      a = +a, b = +b;
      return function (t) {
        return a * (1 - t) + b * t;
      };
    }
    d3.interpolateString = d3_interpolateString;
    function d3_interpolateString(a, b) {
      var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0,
          am,
          bm,
          bs,
          i = -1,
          s = [],
          q = [];
      a = a + "", b = b + "";
      while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
        if ((bs = bm.index) > bi) {
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs;else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) {
          if (s[i]) s[i] += bm;else s[++i] = bm;
        } else {
          s[++i] = null;
          q.push({
            i: i,
            x: d3_interpolateNumber(am, bm)
          });
        }
        bi = d3_interpolate_numberB.lastIndex;
      }
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs;else s[++i] = bs;
      }
      return s.length < 2 ? q[0] ? (b = q[0].x, function (t) {
        return b(t) + "";
      }) : function () {
        return b;
      } : (b = q.length, function (t) {
        for (var i = 0, o; i < b; ++i) {
          s[(o = q[i]).i] = o.x(t);
        }return s.join("");
      });
    }
    var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
    d3.interpolate = d3_interpolate;
    function d3_interpolate(a, b) {
      var i = d3.interpolators.length,
          f;
      while (--i >= 0 && !(f = d3.interpolators[i](a, b))) {}
      return f;
    }
    d3.interpolators = [function (a, b) {
      var t = typeof b === "undefined" ? "undefined" : _typeof(b);
      return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
    }];
    d3.interpolateArray = d3_interpolateArray;
    function d3_interpolateArray(a, b) {
      var x = [],
          c = [],
          na = a.length,
          nb = b.length,
          n0 = Math.min(a.length, b.length),
          i;
      for (i = 0; i < n0; ++i) {
        x.push(d3_interpolate(a[i], b[i]));
      }for (; i < na; ++i) {
        c[i] = a[i];
      }for (; i < nb; ++i) {
        c[i] = b[i];
      }return function (t) {
        for (i = 0; i < n0; ++i) {
          c[i] = x[i](t);
        }return c;
      };
    }
    var d3_ease_default = function d3_ease_default() {
      return d3_identity;
    };
    var d3_ease = d3.map({
      linear: d3_ease_default,
      poly: d3_ease_poly,
      quad: function quad() {
        return d3_ease_quad;
      },
      cubic: function cubic() {
        return d3_ease_cubic;
      },
      sin: function sin() {
        return d3_ease_sin;
      },
      exp: function exp() {
        return d3_ease_exp;
      },
      circle: function circle() {
        return d3_ease_circle;
      },
      elastic: d3_ease_elastic,
      back: d3_ease_back,
      bounce: function bounce() {
        return d3_ease_bounce;
      }
    });
    var d3_ease_mode = d3.map({
      "in": d3_identity,
      out: d3_ease_reverse,
      "in-out": d3_ease_reflect,
      "out-in": function outIn(f) {
        return d3_ease_reflect(d3_ease_reverse(f));
      }
    });
    d3.ease = function (name) {
      var i = name.indexOf("-"),
          t = i >= 0 ? name.slice(0, i) : name,
          m = i >= 0 ? name.slice(i + 1) : "in";
      t = d3_ease.get(t) || d3_ease_default;
      m = d3_ease_mode.get(m) || d3_identity;
      return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
    };
    function d3_ease_clamp(f) {
      return function (t) {
        return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
      };
    }
    function d3_ease_reverse(f) {
      return function (t) {
        return 1 - f(1 - t);
      };
    }
    function d3_ease_reflect(f) {
      return function (t) {
        return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
      };
    }
    function d3_ease_quad(t) {
      return t * t;
    }
    function d3_ease_cubic(t) {
      return t * t * t;
    }
    function d3_ease_cubicInOut(t) {
      if (t <= 0) return 0;
      if (t >= 1) return 1;
      var t2 = t * t,
          t3 = t2 * t;
      return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
    }
    function d3_ease_poly(e) {
      return function (t) {
        return Math.pow(t, e);
      };
    }
    function d3_ease_sin(t) {
      return 1 - Math.cos(t * halfπ);
    }
    function d3_ease_exp(t) {
      return Math.pow(2, 10 * (t - 1));
    }
    function d3_ease_circle(t) {
      return 1 - Math.sqrt(1 - t * t);
    }
    function d3_ease_elastic(a, p) {
      var s;
      if (arguments.length < 2) p = .45;
      if (arguments.length) s = p / τ * Math.asin(1 / a);else a = 1, s = p / 4;
      return function (t) {
        return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
      };
    }
    function d3_ease_back(s) {
      if (!s) s = 1.70158;
      return function (t) {
        return t * t * ((s + 1) * t - s);
      };
    }
    function d3_ease_bounce(t) {
      return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
    }
    d3.interpolateHcl = d3_interpolateHcl;
    function d3_interpolateHcl(a, b) {
      a = d3.hcl(a);
      b = d3.hcl(b);
      var ah = a.h,
          ac = a.c,
          al = a.l,
          bh = b.h - ah,
          bc = b.c - ac,
          bl = b.l - al;
      if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
      if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah;else if (bh > 180) bh -= 360;else if (bh < -180) bh += 360;
      return function (t) {
        return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
      };
    }
    d3.interpolateHsl = d3_interpolateHsl;
    function d3_interpolateHsl(a, b) {
      a = d3.hsl(a);
      b = d3.hsl(b);
      var ah = a.h,
          as = a.s,
          al = a.l,
          bh = b.h - ah,
          bs = b.s - as,
          bl = b.l - al;
      if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
      if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah;else if (bh > 180) bh -= 360;else if (bh < -180) bh += 360;
      return function (t) {
        return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
      };
    }
    d3.interpolateLab = d3_interpolateLab;
    function d3_interpolateLab(a, b) {
      a = d3.lab(a);
      b = d3.lab(b);
      var al = a.l,
          aa = a.a,
          ab = a.b,
          bl = b.l - al,
          ba = b.a - aa,
          bb = b.b - ab;
      return function (t) {
        return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
      };
    }
    d3.interpolateRound = d3_interpolateRound;
    function d3_interpolateRound(a, b) {
      b -= a;
      return function (t) {
        return Math.round(a + b * t);
      };
    }
    d3.transform = function (string) {
      var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
      return (d3.transform = function (string) {
        if (string != null) {
          g.setAttribute("transform", string);
          var t = g.transform.baseVal.consolidate();
        }
        return new d3_transform(t ? t.matrix : d3_transformIdentity);
      })(string);
    };
    function d3_transform(m) {
      var r0 = [m.a, m.b],
          r1 = [m.c, m.d],
          kx = d3_transformNormalize(r0),
          kz = d3_transformDot(r0, r1),
          ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
      if (r0[0] * r1[1] < r1[0] * r0[1]) {
        r0[0] *= -1;
        r0[1] *= -1;
        kx *= -1;
        kz *= -1;
      }
      this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
      this.translate = [m.e, m.f];
      this.scale = [kx, ky];
      this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
    }
    d3_transform.prototype.toString = function () {
      return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
    };
    function d3_transformDot(a, b) {
      return a[0] * b[0] + a[1] * b[1];
    }
    function d3_transformNormalize(a) {
      var k = Math.sqrt(d3_transformDot(a, a));
      if (k) {
        a[0] /= k;
        a[1] /= k;
      }
      return k;
    }
    function d3_transformCombine(a, b, k) {
      a[0] += k * b[0];
      a[1] += k * b[1];
      return a;
    }
    var d3_transformIdentity = {
      a: 1,
      b: 0,
      c: 0,
      d: 1,
      e: 0,
      f: 0
    };
    d3.interpolateTransform = d3_interpolateTransform;
    function d3_interpolateTransformPop(s) {
      return s.length ? s.pop() + "," : "";
    }
    function d3_interpolateTranslate(ta, tb, s, q) {
      if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
        var i = s.push("translate(", null, ",", null, ")");
        q.push({
          i: i - 4,
          x: d3_interpolateNumber(ta[0], tb[0])
        }, {
          i: i - 2,
          x: d3_interpolateNumber(ta[1], tb[1])
        });
      } else if (tb[0] || tb[1]) {
        s.push("translate(" + tb + ")");
      }
    }
    function d3_interpolateRotate(ra, rb, s, q) {
      if (ra !== rb) {
        if (ra - rb > 180) rb += 360;else if (rb - ra > 180) ra += 360;
        q.push({
          i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
          x: d3_interpolateNumber(ra, rb)
        });
      } else if (rb) {
        s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
      }
    }
    function d3_interpolateSkew(wa, wb, s, q) {
      if (wa !== wb) {
        q.push({
          i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
          x: d3_interpolateNumber(wa, wb)
        });
      } else if (wb) {
        s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
      }
    }
    function d3_interpolateScale(ka, kb, s, q) {
      if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
        var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
        q.push({
          i: i - 4,
          x: d3_interpolateNumber(ka[0], kb[0])
        }, {
          i: i - 2,
          x: d3_interpolateNumber(ka[1], kb[1])
        });
      } else if (kb[0] !== 1 || kb[1] !== 1) {
        s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
      }
    }
    function d3_interpolateTransform(a, b) {
      var s = [],
          q = [];
      a = d3.transform(a), b = d3.transform(b);
      d3_interpolateTranslate(a.translate, b.translate, s, q);
      d3_interpolateRotate(a.rotate, b.rotate, s, q);
      d3_interpolateSkew(a.skew, b.skew, s, q);
      d3_interpolateScale(a.scale, b.scale, s, q);
      a = b = null;
      return function (t) {
        var i = -1,
            n = q.length,
            o;
        while (++i < n) {
          s[(o = q[i]).i] = o.x(t);
        }return s.join("");
      };
    }
    function d3_uninterpolateNumber(a, b) {
      b = (b -= a = +a) || 1 / b;
      return function (x) {
        return (x - a) / b;
      };
    }
    function d3_uninterpolateClamp(a, b) {
      b = (b -= a = +a) || 1 / b;
      return function (x) {
        return Math.max(0, Math.min(1, (x - a) / b));
      };
    }
    d3.layout = {};
    d3.layout.bundle = function () {
      return function (links) {
        var paths = [],
            i = -1,
            n = links.length;
        while (++i < n) {
          paths.push(d3_layout_bundlePath(links[i]));
        }return paths;
      };
    };
    function d3_layout_bundlePath(link) {
      var start = link.source,
          end = link.target,
          lca = d3_layout_bundleLeastCommonAncestor(start, end),
          points = [start];
      while (start !== lca) {
        start = start.parent;
        points.push(start);
      }
      var k = points.length;
      while (end !== lca) {
        points.splice(k, 0, end);
        end = end.parent;
      }
      return points;
    }
    function d3_layout_bundleAncestors(node) {
      var ancestors = [],
          parent = node.parent;
      while (parent != null) {
        ancestors.push(node);
        node = parent;
        parent = parent.parent;
      }
      ancestors.push(node);
      return ancestors;
    }
    function d3_layout_bundleLeastCommonAncestor(a, b) {
      if (a === b) return a;
      var aNodes = d3_layout_bundleAncestors(a),
          bNodes = d3_layout_bundleAncestors(b),
          aNode = aNodes.pop(),
          bNode = bNodes.pop(),
          sharedNode = null;
      while (aNode === bNode) {
        sharedNode = aNode;
        aNode = aNodes.pop();
        bNode = bNodes.pop();
      }
      return sharedNode;
    }
    d3.layout.chord = function () {
      var chord = {},
          chords,
          groups,
          matrix,
          n,
          padding = 0,
          sortGroups,
          sortSubgroups,
          sortChords;
      function relayout() {
        var subgroups = {},
            groupSums = [],
            groupIndex = d3.range(n),
            subgroupIndex = [],
            k,
            x,
            x0,
            i,
            j;
        chords = [];
        groups = [];
        k = 0, i = -1;
        while (++i < n) {
          x = 0, j = -1;
          while (++j < n) {
            x += matrix[i][j];
          }
          groupSums.push(x);
          subgroupIndex.push(d3.range(n));
          k += x;
        }
        if (sortGroups) {
          groupIndex.sort(function (a, b) {
            return sortGroups(groupSums[a], groupSums[b]);
          });
        }
        if (sortSubgroups) {
          subgroupIndex.forEach(function (d, i) {
            d.sort(function (a, b) {
              return sortSubgroups(matrix[i][a], matrix[i][b]);
            });
          });
        }
        k = (τ - padding * n) / k;
        x = 0, i = -1;
        while (++i < n) {
          x0 = x, j = -1;
          while (++j < n) {
            var di = groupIndex[i],
                dj = subgroupIndex[di][j],
                v = matrix[di][dj],
                a0 = x,
                a1 = x += v * k;
            subgroups[di + "-" + dj] = {
              index: di,
              subindex: dj,
              startAngle: a0,
              endAngle: a1,
              value: v
            };
          }
          groups[di] = {
            index: di,
            startAngle: x0,
            endAngle: x,
            value: groupSums[di]
          };
          x += padding;
        }
        i = -1;
        while (++i < n) {
          j = i - 1;
          while (++j < n) {
            var source = subgroups[i + "-" + j],
                target = subgroups[j + "-" + i];
            if (source.value || target.value) {
              chords.push(source.value < target.value ? {
                source: target,
                target: source
              } : {
                source: source,
                target: target
              });
            }
          }
        }
        if (sortChords) resort();
      }
      function resort() {
        chords.sort(function (a, b) {
          return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
        });
      }
      chord.matrix = function (x) {
        if (!arguments.length) return matrix;
        n = (matrix = x) && matrix.length;
        chords = groups = null;
        return chord;
      };
      chord.padding = function (x) {
        if (!arguments.length) return padding;
        padding = x;
        chords = groups = null;
        return chord;
      };
      chord.sortGroups = function (x) {
        if (!arguments.length) return sortGroups;
        sortGroups = x;
        chords = groups = null;
        return chord;
      };
      chord.sortSubgroups = function (x) {
        if (!arguments.length) return sortSubgroups;
        sortSubgroups = x;
        chords = null;
        return chord;
      };
      chord.sortChords = function (x) {
        if (!arguments.length) return sortChords;
        sortChords = x;
        if (chords) resort();
        return chord;
      };
      chord.chords = function () {
        if (!chords) relayout();
        return chords;
      };
      chord.groups = function () {
        if (!groups) relayout();
        return groups;
      };
      return chord;
    };
    d3.layout.force = function () {
      var force = {},
          event = d3.dispatch("start", "tick", "end"),
          timer,
          size = [1, 1],
          drag,
          alpha,
          friction = .9,
          linkDistance = d3_layout_forceLinkDistance,
          linkStrength = d3_layout_forceLinkStrength,
          charge = -30,
          chargeDistance2 = d3_layout_forceChargeDistance2,
          gravity = .1,
          theta2 = .64,
          nodes = [],
          links = [],
          distances,
          strengths,
          charges;
      function repulse(node) {
        return function (quad, x1, _, x2) {
          if (quad.point !== node) {
            var dx = quad.cx - node.x,
                dy = quad.cy - node.y,
                dw = x2 - x1,
                dn = dx * dx + dy * dy;
            if (dw * dw / theta2 < dn) {
              if (dn < chargeDistance2) {
                var k = quad.charge / dn;
                node.px -= dx * k;
                node.py -= dy * k;
              }
              return true;
            }
            if (quad.point && dn && dn < chargeDistance2) {
              var k = quad.pointCharge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
          }
          return !quad.charge;
        };
      }
      force.tick = function () {
        if ((alpha *= .99) < .005) {
          timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
          return true;
        }
        var n = nodes.length,
            m = links.length,
            q,
            i,
            o,
            s,
            t,
            l,
            k,
            x,
            y;
        for (i = 0; i < m; ++i) {
          o = links[i];
          s = o.source;
          t = o.target;
          x = t.x - s.x;
          y = t.y - s.y;
          if (l = x * x + y * y) {
            l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
            x *= l;
            y *= l;
            t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
            t.y -= y * k;
            s.x += x * (k = 1 - k);
            s.y += y * k;
          }
        }
        if (k = alpha * gravity) {
          x = size[0] / 2;
          y = size[1] / 2;
          i = -1;
          if (k) while (++i < n) {
            o = nodes[i];
            o.x += (x - o.x) * k;
            o.y += (y - o.y) * k;
          }
        }
        if (charge) {
          d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
          i = -1;
          while (++i < n) {
            if (!(o = nodes[i]).fixed) {
              q.visit(repulse(o));
            }
          }
        }
        i = -1;
        while (++i < n) {
          o = nodes[i];
          if (o.fixed) {
            o.x = o.px;
            o.y = o.py;
          } else {
            o.x -= (o.px - (o.px = o.x)) * friction;
            o.y -= (o.py - (o.py = o.y)) * friction;
          }
        }
        event.tick({
          type: "tick",
          alpha: alpha
        });
      };
      force.nodes = function (x) {
        if (!arguments.length) return nodes;
        nodes = x;
        return force;
      };
      force.links = function (x) {
        if (!arguments.length) return links;
        links = x;
        return force;
      };
      force.size = function (x) {
        if (!arguments.length) return size;
        size = x;
        return force;
      };
      force.linkDistance = function (x) {
        if (!arguments.length) return linkDistance;
        linkDistance = typeof x === "function" ? x : +x;
        return force;
      };
      force.distance = force.linkDistance;
      force.linkStrength = function (x) {
        if (!arguments.length) return linkStrength;
        linkStrength = typeof x === "function" ? x : +x;
        return force;
      };
      force.friction = function (x) {
        if (!arguments.length) return friction;
        friction = +x;
        return force;
      };
      force.charge = function (x) {
        if (!arguments.length) return charge;
        charge = typeof x === "function" ? x : +x;
        return force;
      };
      force.chargeDistance = function (x) {
        if (!arguments.length) return Math.sqrt(chargeDistance2);
        chargeDistance2 = x * x;
        return force;
      };
      force.gravity = function (x) {
        if (!arguments.length) return gravity;
        gravity = +x;
        return force;
      };
      force.theta = function (x) {
        if (!arguments.length) return Math.sqrt(theta2);
        theta2 = x * x;
        return force;
      };
      force.alpha = function (x) {
        if (!arguments.length) return alpha;
        x = +x;
        if (alpha) {
          if (x > 0) {
            alpha = x;
          } else {
            timer.c = null, timer.t = NaN, timer = null;
            event.end({
              type: "end",
              alpha: alpha = 0
            });
          }
        } else if (x > 0) {
          event.start({
            type: "start",
            alpha: alpha = x
          });
          timer = d3_timer(force.tick);
        }
        return force;
      };
      force.start = function () {
        var i,
            n = nodes.length,
            m = links.length,
            w = size[0],
            h = size[1],
            neighbors,
            o;
        for (i = 0; i < n; ++i) {
          (o = nodes[i]).index = i;
          o.weight = 0;
        }
        for (i = 0; i < m; ++i) {
          o = links[i];
          if (typeof o.source == "number") o.source = nodes[o.source];
          if (typeof o.target == "number") o.target = nodes[o.target];
          ++o.source.weight;
          ++o.target.weight;
        }
        for (i = 0; i < n; ++i) {
          o = nodes[i];
          if (isNaN(o.x)) o.x = position("x", w);
          if (isNaN(o.y)) o.y = position("y", h);
          if (isNaN(o.px)) o.px = o.x;
          if (isNaN(o.py)) o.py = o.y;
        }
        distances = [];
        if (typeof linkDistance === "function") for (i = 0; i < m; ++i) {
          distances[i] = +linkDistance.call(this, links[i], i);
        } else for (i = 0; i < m; ++i) {
          distances[i] = linkDistance;
        }strengths = [];
        if (typeof linkStrength === "function") for (i = 0; i < m; ++i) {
          strengths[i] = +linkStrength.call(this, links[i], i);
        } else for (i = 0; i < m; ++i) {
          strengths[i] = linkStrength;
        }charges = [];
        if (typeof charge === "function") for (i = 0; i < n; ++i) {
          charges[i] = +charge.call(this, nodes[i], i);
        } else for (i = 0; i < n; ++i) {
          charges[i] = charge;
        }function position(dimension, size) {
          if (!neighbors) {
            neighbors = new Array(n);
            for (j = 0; j < n; ++j) {
              neighbors[j] = [];
            }
            for (j = 0; j < m; ++j) {
              var o = links[j];
              neighbors[o.source.index].push(o.target);
              neighbors[o.target.index].push(o.source);
            }
          }
          var candidates = neighbors[i],
              j = -1,
              l = candidates.length,
              x;
          while (++j < l) {
            if (!isNaN(x = candidates[j][dimension])) return x;
          }return Math.random() * size;
        }
        return force.resume();
      };
      force.resume = function () {
        return force.alpha(.1);
      };
      force.stop = function () {
        return force.alpha(0);
      };
      force.drag = function () {
        if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
        if (!arguments.length) return drag;
        this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
      };
      function dragmove(d) {
        d.px = d3.event.x, d.py = d3.event.y;
        force.resume();
      }
      return d3.rebind(force, event, "on");
    };
    function d3_layout_forceDragstart(d) {
      d.fixed |= 2;
    }
    function d3_layout_forceDragend(d) {
      d.fixed &= ~6;
    }
    function d3_layout_forceMouseover(d) {
      d.fixed |= 4;
      d.px = d.x, d.py = d.y;
    }
    function d3_layout_forceMouseout(d) {
      d.fixed &= ~4;
    }
    function d3_layout_forceAccumulate(quad, alpha, charges) {
      var cx = 0,
          cy = 0;
      quad.charge = 0;
      if (!quad.leaf) {
        var nodes = quad.nodes,
            n = nodes.length,
            i = -1,
            c;
        while (++i < n) {
          c = nodes[i];
          if (c == null) continue;
          d3_layout_forceAccumulate(c, alpha, charges);
          quad.charge += c.charge;
          cx += c.charge * c.cx;
          cy += c.charge * c.cy;
        }
      }
      if (quad.point) {
        if (!quad.leaf) {
          quad.point.x += Math.random() - .5;
          quad.point.y += Math.random() - .5;
        }
        var k = alpha * charges[quad.point.index];
        quad.charge += quad.pointCharge = k;
        cx += k * quad.point.x;
        cy += k * quad.point.y;
      }
      quad.cx = cx / quad.charge;
      quad.cy = cy / quad.charge;
    }
    var d3_layout_forceLinkDistance = 20,
        d3_layout_forceLinkStrength = 1,
        d3_layout_forceChargeDistance2 = Infinity;
    d3.layout.hierarchy = function () {
      var sort = d3_layout_hierarchySort,
          children = d3_layout_hierarchyChildren,
          value = d3_layout_hierarchyValue;
      function hierarchy(root) {
        var stack = [root],
            nodes = [],
            node;
        root.depth = 0;
        while ((node = stack.pop()) != null) {
          nodes.push(node);
          if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
            var n, childs, child;
            while (--n >= 0) {
              stack.push(child = childs[n]);
              child.parent = node;
              child.depth = node.depth + 1;
            }
            if (value) node.value = 0;
            node.children = childs;
          } else {
            if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
            delete node.children;
          }
        }
        d3_layout_hierarchyVisitAfter(root, function (node) {
          var childs, parent;
          if (sort && (childs = node.children)) childs.sort(sort);
          if (value && (parent = node.parent)) parent.value += node.value;
        });
        return nodes;
      }
      hierarchy.sort = function (x) {
        if (!arguments.length) return sort;
        sort = x;
        return hierarchy;
      };
      hierarchy.children = function (x) {
        if (!arguments.length) return children;
        children = x;
        return hierarchy;
      };
      hierarchy.value = function (x) {
        if (!arguments.length) return value;
        value = x;
        return hierarchy;
      };
      hierarchy.revalue = function (root) {
        if (value) {
          d3_layout_hierarchyVisitBefore(root, function (node) {
            if (node.children) node.value = 0;
          });
          d3_layout_hierarchyVisitAfter(root, function (node) {
            var parent;
            if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
            if (parent = node.parent) parent.value += node.value;
          });
        }
        return root;
      };
      return hierarchy;
    };
    function d3_layout_hierarchyRebind(object, hierarchy) {
      d3.rebind(object, hierarchy, "sort", "children", "value");
      object.nodes = object;
      object.links = d3_layout_hierarchyLinks;
      return object;
    }
    function d3_layout_hierarchyVisitBefore(node, callback) {
      var nodes = [node];
      while ((node = nodes.pop()) != null) {
        callback(node);
        if ((children = node.children) && (n = children.length)) {
          var n, children;
          while (--n >= 0) {
            nodes.push(children[n]);
          }
        }
      }
    }
    function d3_layout_hierarchyVisitAfter(node, callback) {
      var nodes = [node],
          nodes2 = [];
      while ((node = nodes.pop()) != null) {
        nodes2.push(node);
        if ((children = node.children) && (n = children.length)) {
          var i = -1,
              n,
              children;
          while (++i < n) {
            nodes.push(children[i]);
          }
        }
      }
      while ((node = nodes2.pop()) != null) {
        callback(node);
      }
    }
    function d3_layout_hierarchyChildren(d) {
      return d.children;
    }
    function d3_layout_hierarchyValue(d) {
      return d.value;
    }
    function d3_layout_hierarchySort(a, b) {
      return b.value - a.value;
    }
    function d3_layout_hierarchyLinks(nodes) {
      return d3.merge(nodes.map(function (parent) {
        return (parent.children || []).map(function (child) {
          return {
            source: parent,
            target: child
          };
        });
      }));
    }
    d3.layout.partition = function () {
      var hierarchy = d3.layout.hierarchy(),
          size = [1, 1];
      function position(node, x, dx, dy) {
        var children = node.children;
        node.x = x;
        node.y = node.depth * dy;
        node.dx = dx;
        node.dy = dy;
        if (children && (n = children.length)) {
          var i = -1,
              n,
              c,
              d;
          dx = node.value ? dx / node.value : 0;
          while (++i < n) {
            position(c = children[i], x, d = c.value * dx, dy);
            x += d;
          }
        }
      }
      function depth(node) {
        var children = node.children,
            d = 0;
        if (children && (n = children.length)) {
          var i = -1,
              n;
          while (++i < n) {
            d = Math.max(d, depth(children[i]));
          }
        }
        return 1 + d;
      }
      function partition(d, i) {
        var nodes = hierarchy.call(this, d, i);
        position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
        return nodes;
      }
      partition.size = function (x) {
        if (!arguments.length) return size;
        size = x;
        return partition;
      };
      return d3_layout_hierarchyRebind(partition, hierarchy);
    };
    d3.layout.pie = function () {
      var value = Number,
          sort = d3_layout_pieSortByValue,
          startAngle = 0,
          endAngle = τ,
          padAngle = 0;
      function pie(data) {
        var n = data.length,
            values = data.map(function (d, i) {
          return +value.call(pie, d, i);
        }),
            a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle),
            da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a,
            p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)),
            pa = p * (da < 0 ? -1 : 1),
            sum = d3.sum(values),
            k = sum ? (da - n * pa) / sum : 0,
            index = d3.range(n),
            arcs = [],
            v;
        if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function (i, j) {
          return values[j] - values[i];
        } : function (i, j) {
          return sort(data[i], data[j]);
        });
        index.forEach(function (i) {
          arcs[i] = {
            data: data[i],
            value: v = values[i],
            startAngle: a,
            endAngle: a += v * k + pa,
            padAngle: p
          };
        });
        return arcs;
      }
      pie.value = function (_) {
        if (!arguments.length) return value;
        value = _;
        return pie;
      };
      pie.sort = function (_) {
        if (!arguments.length) return sort;
        sort = _;
        return pie;
      };
      pie.startAngle = function (_) {
        if (!arguments.length) return startAngle;
        startAngle = _;
        return pie;
      };
      pie.endAngle = function (_) {
        if (!arguments.length) return endAngle;
        endAngle = _;
        return pie;
      };
      pie.padAngle = function (_) {
        if (!arguments.length) return padAngle;
        padAngle = _;
        return pie;
      };
      return pie;
    };
    var d3_layout_pieSortByValue = {};
    d3.layout.stack = function () {
      var values = d3_identity,
          order = d3_layout_stackOrderDefault,
          offset = d3_layout_stackOffsetZero,
          out = d3_layout_stackOut,
          x = d3_layout_stackX,
          y = d3_layout_stackY;
      function stack(data, index) {
        if (!(n = data.length)) return data;
        var series = data.map(function (d, i) {
          return values.call(stack, d, i);
        });
        var points = series.map(function (d) {
          return d.map(function (v, i) {
            return [x.call(stack, v, i), y.call(stack, v, i)];
          });
        });
        var orders = order.call(stack, points, index);
        series = d3.permute(series, orders);
        points = d3.permute(points, orders);
        var offsets = offset.call(stack, points, index);
        var m = series[0].length,
            n,
            i,
            j,
            o;
        for (j = 0; j < m; ++j) {
          out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
          for (i = 1; i < n; ++i) {
            out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
          }
        }
        return data;
      }
      stack.values = function (x) {
        if (!arguments.length) return values;
        values = x;
        return stack;
      };
      stack.order = function (x) {
        if (!arguments.length) return order;
        order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
        return stack;
      };
      stack.offset = function (x) {
        if (!arguments.length) return offset;
        offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
        return stack;
      };
      stack.x = function (z) {
        if (!arguments.length) return x;
        x = z;
        return stack;
      };
      stack.y = function (z) {
        if (!arguments.length) return y;
        y = z;
        return stack;
      };
      stack.out = function (z) {
        if (!arguments.length) return out;
        out = z;
        return stack;
      };
      return stack;
    };
    function d3_layout_stackX(d) {
      return d.x;
    }
    function d3_layout_stackY(d) {
      return d.y;
    }
    function d3_layout_stackOut(d, y0, y) {
      d.y0 = y0;
      d.y = y;
    }
    var d3_layout_stackOrders = d3.map({
      "inside-out": function insideOut(data) {
        var n = data.length,
            i,
            j,
            max = data.map(d3_layout_stackMaxIndex),
            sums = data.map(d3_layout_stackReduceSum),
            index = d3.range(n).sort(function (a, b) {
          return max[a] - max[b];
        }),
            top = 0,
            bottom = 0,
            tops = [],
            bottoms = [];
        for (i = 0; i < n; ++i) {
          j = index[i];
          if (top < bottom) {
            top += sums[j];
            tops.push(j);
          } else {
            bottom += sums[j];
            bottoms.push(j);
          }
        }
        return bottoms.reverse().concat(tops);
      },
      reverse: function reverse(data) {
        return d3.range(data.length).reverse();
      },
      "default": d3_layout_stackOrderDefault
    });
    var d3_layout_stackOffsets = d3.map({
      silhouette: function silhouette(data) {
        var n = data.length,
            m = data[0].length,
            sums = [],
            max = 0,
            i,
            j,
            o,
            y0 = [];
        for (j = 0; j < m; ++j) {
          for (i = 0, o = 0; i < n; i++) {
            o += data[i][j][1];
          }if (o > max) max = o;
          sums.push(o);
        }
        for (j = 0; j < m; ++j) {
          y0[j] = (max - sums[j]) / 2;
        }
        return y0;
      },
      wiggle: function wiggle(data) {
        var n = data.length,
            x = data[0],
            m = x.length,
            i,
            j,
            k,
            s1,
            s2,
            s3,
            dx,
            o,
            o0,
            y0 = [];
        y0[0] = o = o0 = 0;
        for (j = 1; j < m; ++j) {
          for (i = 0, s1 = 0; i < n; ++i) {
            s1 += data[i][j][1];
          }for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
            for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
              s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
            }
            s2 += s3 * data[i][j][1];
          }
          y0[j] = o -= s1 ? s2 / s1 * dx : 0;
          if (o < o0) o0 = o;
        }
        for (j = 0; j < m; ++j) {
          y0[j] -= o0;
        }return y0;
      },
      expand: function expand(data) {
        var n = data.length,
            m = data[0].length,
            k = 1 / n,
            i,
            j,
            o,
            y0 = [];
        for (j = 0; j < m; ++j) {
          for (i = 0, o = 0; i < n; i++) {
            o += data[i][j][1];
          }if (o) for (i = 0; i < n; i++) {
            data[i][j][1] /= o;
          } else for (i = 0; i < n; i++) {
            data[i][j][1] = k;
          }
        }
        for (j = 0; j < m; ++j) {
          y0[j] = 0;
        }return y0;
      },
      zero: d3_layout_stackOffsetZero
    });
    function d3_layout_stackOrderDefault(data) {
      return d3.range(data.length);
    }
    function d3_layout_stackOffsetZero(data) {
      var j = -1,
          m = data[0].length,
          y0 = [];
      while (++j < m) {
        y0[j] = 0;
      }return y0;
    }
    function d3_layout_stackMaxIndex(array) {
      var i = 1,
          j = 0,
          v = array[0][1],
          k,
          n = array.length;
      for (; i < n; ++i) {
        if ((k = array[i][1]) > v) {
          j = i;
          v = k;
        }
      }
      return j;
    }
    function d3_layout_stackReduceSum(d) {
      return d.reduce(d3_layout_stackSum, 0);
    }
    function d3_layout_stackSum(p, d) {
      return p + d[1];
    }
    d3.layout.histogram = function () {
      var frequency = true,
          valuer = Number,
          ranger = d3_layout_histogramRange,
          binner = d3_layout_histogramBinSturges;
      function histogram(data, i) {
        var bins = [],
            values = data.map(valuer, this),
            range = ranger.call(this, values, i),
            thresholds = binner.call(this, range, values, i),
            bin,
            i = -1,
            n = values.length,
            m = thresholds.length - 1,
            k = frequency ? 1 : 1 / n,
            x;
        while (++i < m) {
          bin = bins[i] = [];
          bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
          bin.y = 0;
        }
        if (m > 0) {
          i = -1;
          while (++i < n) {
            x = values[i];
            if (x >= range[0] && x <= range[1]) {
              bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
              bin.y += k;
              bin.push(data[i]);
            }
          }
        }
        return bins;
      }
      histogram.value = function (x) {
        if (!arguments.length) return valuer;
        valuer = x;
        return histogram;
      };
      histogram.range = function (x) {
        if (!arguments.length) return ranger;
        ranger = d3_functor(x);
        return histogram;
      };
      histogram.bins = function (x) {
        if (!arguments.length) return binner;
        binner = typeof x === "number" ? function (range) {
          return d3_layout_histogramBinFixed(range, x);
        } : d3_functor(x);
        return histogram;
      };
      histogram.frequency = function (x) {
        if (!arguments.length) return frequency;
        frequency = !!x;
        return histogram;
      };
      return histogram;
    };
    function d3_layout_histogramBinSturges(range, values) {
      return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
    }
    function d3_layout_histogramBinFixed(range, n) {
      var x = -1,
          b = +range[0],
          m = (range[1] - b) / n,
          f = [];
      while (++x <= n) {
        f[x] = m * x + b;
      }return f;
    }
    function d3_layout_histogramRange(values) {
      return [d3.min(values), d3.max(values)];
    }
    d3.layout.pack = function () {
      var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort),
          padding = 0,
          size = [1, 1],
          radius;
      function pack(d, i) {
        var nodes = hierarchy.call(this, d, i),
            root = nodes[0],
            w = size[0],
            h = size[1],
            r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function () {
          return radius;
        };
        root.x = root.y = 0;
        d3_layout_hierarchyVisitAfter(root, function (d) {
          d.r = +r(d.value);
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        if (padding) {
          var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
          d3_layout_hierarchyVisitAfter(root, function (d) {
            d.r += dr;
          });
          d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
          d3_layout_hierarchyVisitAfter(root, function (d) {
            d.r -= dr;
          });
        }
        d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
        return nodes;
      }
      pack.size = function (_) {
        if (!arguments.length) return size;
        size = _;
        return pack;
      };
      pack.radius = function (_) {
        if (!arguments.length) return radius;
        radius = _ == null || typeof _ === "function" ? _ : +_;
        return pack;
      };
      pack.padding = function (_) {
        if (!arguments.length) return padding;
        padding = +_;
        return pack;
      };
      return d3_layout_hierarchyRebind(pack, hierarchy);
    };
    function d3_layout_packSort(a, b) {
      return a.value - b.value;
    }
    function d3_layout_packInsert(a, b) {
      var c = a._pack_next;
      a._pack_next = b;
      b._pack_prev = a;
      b._pack_next = c;
      c._pack_prev = b;
    }
    function d3_layout_packSplice(a, b) {
      a._pack_next = b;
      b._pack_prev = a;
    }
    function d3_layout_packIntersects(a, b) {
      var dx = b.x - a.x,
          dy = b.y - a.y,
          dr = a.r + b.r;
      return .999 * dr * dr > dx * dx + dy * dy;
    }
    function d3_layout_packSiblings(node) {
      if (!(nodes = node.children) || !(n = nodes.length)) return;
      var nodes,
          xMin = Infinity,
          xMax = -Infinity,
          yMin = Infinity,
          yMax = -Infinity,
          a,
          b,
          c,
          i,
          j,
          k,
          n;
      function bound(node) {
        xMin = Math.min(node.x - node.r, xMin);
        xMax = Math.max(node.x + node.r, xMax);
        yMin = Math.min(node.y - node.r, yMin);
        yMax = Math.max(node.y + node.r, yMax);
      }
      nodes.forEach(d3_layout_packLink);
      a = nodes[0];
      a.x = -a.r;
      a.y = 0;
      bound(a);
      if (n > 1) {
        b = nodes[1];
        b.x = b.r;
        b.y = 0;
        bound(b);
        if (n > 2) {
          c = nodes[2];
          d3_layout_packPlace(a, b, c);
          bound(c);
          d3_layout_packInsert(a, c);
          a._pack_prev = c;
          d3_layout_packInsert(c, b);
          b = a._pack_next;
          for (i = 3; i < n; i++) {
            d3_layout_packPlace(a, b, c = nodes[i]);
            var isect = 0,
                s1 = 1,
                s2 = 1;
            for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
              if (d3_layout_packIntersects(j, c)) {
                isect = 1;
                break;
              }
            }
            if (isect == 1) {
              for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
                if (d3_layout_packIntersects(k, c)) {
                  break;
                }
              }
            }
            if (isect) {
              if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j);else d3_layout_packSplice(a = k, b);
              i--;
            } else {
              d3_layout_packInsert(a, c);
              b = c;
              bound(c);
            }
          }
        }
      }
      var cx = (xMin + xMax) / 2,
          cy = (yMin + yMax) / 2,
          cr = 0;
      for (i = 0; i < n; i++) {
        c = nodes[i];
        c.x -= cx;
        c.y -= cy;
        cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
      }
      node.r = cr;
      nodes.forEach(d3_layout_packUnlink);
    }
    function d3_layout_packLink(node) {
      node._pack_next = node._pack_prev = node;
    }
    function d3_layout_packUnlink(node) {
      delete node._pack_next;
      delete node._pack_prev;
    }
    function d3_layout_packTransform(node, x, y, k) {
      var children = node.children;
      node.x = x += k * node.x;
      node.y = y += k * node.y;
      node.r *= k;
      if (children) {
        var i = -1,
            n = children.length;
        while (++i < n) {
          d3_layout_packTransform(children[i], x, y, k);
        }
      }
    }
    function d3_layout_packPlace(a, b, c) {
      var db = a.r + c.r,
          dx = b.x - a.x,
          dy = b.y - a.y;
      if (db && (dx || dy)) {
        var da = b.r + c.r,
            dc = dx * dx + dy * dy;
        da *= da;
        db *= db;
        var x = .5 + (db - da) / (2 * dc),
            y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
        c.x = a.x + x * dx + y * dy;
        c.y = a.y + x * dy - y * dx;
      } else {
        c.x = a.x + db;
        c.y = a.y;
      }
    }
    d3.layout.tree = function () {
      var hierarchy = d3.layout.hierarchy().sort(null).value(null),
          separation = d3_layout_treeSeparation,
          size = [1, 1],
          nodeSize = null;
      function tree(d, i) {
        var nodes = hierarchy.call(this, d, i),
            root0 = nodes[0],
            root1 = wrapTree(root0);
        d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
        d3_layout_hierarchyVisitBefore(root1, secondWalk);
        if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode);else {
          var left = root0,
              right = root0,
              bottom = root0;
          d3_layout_hierarchyVisitBefore(root0, function (node) {
            if (node.x < left.x) left = node;
            if (node.x > right.x) right = node;
            if (node.depth > bottom.depth) bottom = node;
          });
          var tx = separation(left, right) / 2 - left.x,
              kx = size[0] / (right.x + separation(right, left) / 2 + tx),
              ky = size[1] / (bottom.depth || 1);
          d3_layout_hierarchyVisitBefore(root0, function (node) {
            node.x = (node.x + tx) * kx;
            node.y = node.depth * ky;
          });
        }
        return nodes;
      }
      function wrapTree(root0) {
        var root1 = {
          A: null,
          children: [root0]
        },
            queue = [root1],
            node1;
        while ((node1 = queue.pop()) != null) {
          for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
            queue.push((children[i] = child = {
              _: children[i],
              parent: node1,
              children: (child = children[i].children) && child.slice() || [],
              A: null,
              a: null,
              z: 0,
              m: 0,
              c: 0,
              s: 0,
              t: null,
              i: i
            }).a = child);
          }
        }
        return root1.children[0];
      }
      function firstWalk(v) {
        var children = v.children,
            siblings = v.parent.children,
            w = v.i ? siblings[v.i - 1] : null;
        if (children.length) {
          d3_layout_treeShift(v);
          var midpoint = (children[0].z + children[children.length - 1].z) / 2;
          if (w) {
            v.z = w.z + separation(v._, w._);
            v.m = v.z - midpoint;
          } else {
            v.z = midpoint;
          }
        } else if (w) {
          v.z = w.z + separation(v._, w._);
        }
        v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
      }
      function secondWalk(v) {
        v._.x = v.z + v.parent.m;
        v.m += v.parent.m;
      }
      function apportion(v, w, ancestor) {
        if (w) {
          var vip = v,
              vop = v,
              vim = w,
              vom = vip.parent.children[0],
              sip = vip.m,
              sop = vop.m,
              sim = vim.m,
              som = vom.m,
              shift;
          while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
            vom = d3_layout_treeLeft(vom);
            vop = d3_layout_treeRight(vop);
            vop.a = v;
            shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
            if (shift > 0) {
              d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
              sip += shift;
              sop += shift;
            }
            sim += vim.m;
            sip += vip.m;
            som += vom.m;
            sop += vop.m;
          }
          if (vim && !d3_layout_treeRight(vop)) {
            vop.t = vim;
            vop.m += sim - sop;
          }
          if (vip && !d3_layout_treeLeft(vom)) {
            vom.t = vip;
            vom.m += sip - som;
            ancestor = v;
          }
        }
        return ancestor;
      }
      function sizeNode(node) {
        node.x *= size[0];
        node.y = node.depth * size[1];
      }
      tree.separation = function (x) {
        if (!arguments.length) return separation;
        separation = x;
        return tree;
      };
      tree.size = function (x) {
        if (!arguments.length) return nodeSize ? null : size;
        nodeSize = (size = x) == null ? sizeNode : null;
        return tree;
      };
      tree.nodeSize = function (x) {
        if (!arguments.length) return nodeSize ? size : null;
        nodeSize = (size = x) == null ? null : sizeNode;
        return tree;
      };
      return d3_layout_hierarchyRebind(tree, hierarchy);
    };
    function d3_layout_treeSeparation(a, b) {
      return a.parent == b.parent ? 1 : 2;
    }
    function d3_layout_treeLeft(v) {
      var children = v.children;
      return children.length ? children[0] : v.t;
    }
    function d3_layout_treeRight(v) {
      var children = v.children,
          n;
      return (n = children.length) ? children[n - 1] : v.t;
    }
    function d3_layout_treeMove(wm, wp, shift) {
      var change = shift / (wp.i - wm.i);
      wp.c -= change;
      wp.s += shift;
      wm.c += change;
      wp.z += shift;
      wp.m += shift;
    }
    function d3_layout_treeShift(v) {
      var shift = 0,
          change = 0,
          children = v.children,
          i = children.length,
          w;
      while (--i >= 0) {
        w = children[i];
        w.z += shift;
        w.m += shift;
        shift += w.s + (change += w.c);
      }
    }
    function d3_layout_treeAncestor(vim, v, ancestor) {
      return vim.a.parent === v.parent ? vim.a : ancestor;
    }
    d3.layout.cluster = function () {
      var hierarchy = d3.layout.hierarchy().sort(null).value(null),
          separation = d3_layout_treeSeparation,
          size = [1, 1],
          nodeSize = false;
      function cluster(d, i) {
        var nodes = hierarchy.call(this, d, i),
            root = nodes[0],
            previousNode,
            x = 0;
        d3_layout_hierarchyVisitAfter(root, function (node) {
          var children = node.children;
          if (children && children.length) {
            node.x = d3_layout_clusterX(children);
            node.y = d3_layout_clusterY(children);
          } else {
            node.x = previousNode ? x += separation(node, previousNode) : 0;
            node.y = 0;
            previousNode = node;
          }
        });
        var left = d3_layout_clusterLeft(root),
            right = d3_layout_clusterRight(root),
            x0 = left.x - separation(left, right) / 2,
            x1 = right.x + separation(right, left) / 2;
        d3_layout_hierarchyVisitAfter(root, nodeSize ? function (node) {
          node.x = (node.x - root.x) * size[0];
          node.y = (root.y - node.y) * size[1];
        } : function (node) {
          node.x = (node.x - x0) / (x1 - x0) * size[0];
          node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
        });
        return nodes;
      }
      cluster.separation = function (x) {
        if (!arguments.length) return separation;
        separation = x;
        return cluster;
      };
      cluster.size = function (x) {
        if (!arguments.length) return nodeSize ? null : size;
        nodeSize = (size = x) == null;
        return cluster;
      };
      cluster.nodeSize = function (x) {
        if (!arguments.length) return nodeSize ? size : null;
        nodeSize = (size = x) != null;
        return cluster;
      };
      return d3_layout_hierarchyRebind(cluster, hierarchy);
    };
    function d3_layout_clusterY(children) {
      return 1 + d3.max(children, function (child) {
        return child.y;
      });
    }
    function d3_layout_clusterX(children) {
      return children.reduce(function (x, child) {
        return x + child.x;
      }, 0) / children.length;
    }
    function d3_layout_clusterLeft(node) {
      var children = node.children;
      return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
    }
    function d3_layout_clusterRight(node) {
      var children = node.children,
          n;
      return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
    }
    d3.layout.treemap = function () {
      var hierarchy = d3.layout.hierarchy(),
          round = Math.round,
          size = [1, 1],
          padding = null,
          pad = d3_layout_treemapPadNull,
          sticky = false,
          stickies,
          mode = "squarify",
          ratio = .5 * (1 + Math.sqrt(5));
      function scale(children, k) {
        var i = -1,
            n = children.length,
            child,
            area;
        while (++i < n) {
          area = (child = children[i]).value * (k < 0 ? 0 : k);
          child.area = isNaN(area) || area <= 0 ? 0 : area;
        }
      }
      function squarify(node) {
        var children = node.children;
        if (children && children.length) {
          var rect = pad(node),
              row = [],
              remaining = children.slice(),
              child,
              best = Infinity,
              score,
              u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy),
              n;
          scale(remaining, rect.dx * rect.dy / node.value);
          row.area = 0;
          while ((n = remaining.length) > 0) {
            row.push(child = remaining[n - 1]);
            row.area += child.area;
            if (mode !== "squarify" || (score = worst(row, u)) <= best) {
              remaining.pop();
              best = score;
            } else {
              row.area -= row.pop().area;
              position(row, u, rect, false);
              u = Math.min(rect.dx, rect.dy);
              row.length = row.area = 0;
              best = Infinity;
            }
          }
          if (row.length) {
            position(row, u, rect, true);
            row.length = row.area = 0;
          }
          children.forEach(squarify);
        }
      }
      function stickify(node) {
        var children = node.children;
        if (children && children.length) {
          var rect = pad(node),
              remaining = children.slice(),
              child,
              row = [];
          scale(remaining, rect.dx * rect.dy / node.value);
          row.area = 0;
          while (child = remaining.pop()) {
            row.push(child);
            row.area += child.area;
            if (child.z != null) {
              position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
              row.length = row.area = 0;
            }
          }
          children.forEach(stickify);
        }
      }
      function worst(row, u) {
        var s = row.area,
            r,
            rmax = 0,
            rmin = Infinity,
            i = -1,
            n = row.length;
        while (++i < n) {
          if (!(r = row[i].area)) continue;
          if (r < rmin) rmin = r;
          if (r > rmax) rmax = r;
        }
        s *= s;
        u *= u;
        return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
      }
      function position(row, u, rect, flush) {
        var i = -1,
            n = row.length,
            x = rect.x,
            y = rect.y,
            v = u ? round(row.area / u) : 0,
            o;
        if (u == rect.dx) {
          if (flush || v > rect.dy) v = rect.dy;
          while (++i < n) {
            o = row[i];
            o.x = x;
            o.y = y;
            o.dy = v;
            x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
          }
          o.z = true;
          o.dx += rect.x + rect.dx - x;
          rect.y += v;
          rect.dy -= v;
        } else {
          if (flush || v > rect.dx) v = rect.dx;
          while (++i < n) {
            o = row[i];
            o.x = x;
            o.y = y;
            o.dx = v;
            y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
          }
          o.z = false;
          o.dy += rect.y + rect.dy - y;
          rect.x += v;
          rect.dx -= v;
        }
      }
      function treemap(d) {
        var nodes = stickies || hierarchy(d),
            root = nodes[0];
        root.x = root.y = 0;
        if (root.value) root.dx = size[0], root.dy = size[1];else root.dx = root.dy = 0;
        if (stickies) hierarchy.revalue(root);
        scale([root], root.dx * root.dy / root.value);
        (stickies ? stickify : squarify)(root);
        if (sticky) stickies = nodes;
        return nodes;
      }
      treemap.size = function (x) {
        if (!arguments.length) return size;
        size = x;
        return treemap;
      };
      treemap.padding = function (x) {
        if (!arguments.length) return padding;
        function padFunction(node) {
          var p = x.call(treemap, node, node.depth);
          return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [p, p, p, p] : p);
        }
        function padConstant(node) {
          return d3_layout_treemapPad(node, x);
        }
        var type;
        pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x === "undefined" ? "undefined" : _typeof(x)) === "function" ? padFunction : type === "number" ? (x = [x, x, x, x], padConstant) : padConstant;
        return treemap;
      };
      treemap.round = function (x) {
        if (!arguments.length) return round != Number;
        round = x ? Math.round : Number;
        return treemap;
      };
      treemap.sticky = function (x) {
        if (!arguments.length) return sticky;
        sticky = x;
        stickies = null;
        return treemap;
      };
      treemap.ratio = function (x) {
        if (!arguments.length) return ratio;
        ratio = x;
        return treemap;
      };
      treemap.mode = function (x) {
        if (!arguments.length) return mode;
        mode = x + "";
        return treemap;
      };
      return d3_layout_hierarchyRebind(treemap, hierarchy);
    };
    function d3_layout_treemapPadNull(node) {
      return {
        x: node.x,
        y: node.y,
        dx: node.dx,
        dy: node.dy
      };
    }
    function d3_layout_treemapPad(node, padding) {
      var x = node.x + padding[3],
          y = node.y + padding[0],
          dx = node.dx - padding[1] - padding[3],
          dy = node.dy - padding[0] - padding[2];
      if (dx < 0) {
        x += dx / 2;
        dx = 0;
      }
      if (dy < 0) {
        y += dy / 2;
        dy = 0;
      }
      return {
        x: x,
        y: y,
        dx: dx,
        dy: dy
      };
    }
    d3.random = {
      normal: function normal(µ, σ) {
        var n = arguments.length;
        if (n < 2) σ = 1;
        if (n < 1) µ = 0;
        return function () {
          var x, y, r;
          do {
            x = Math.random() * 2 - 1;
            y = Math.random() * 2 - 1;
            r = x * x + y * y;
          } while (!r || r > 1);
          return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
        };
      },
      logNormal: function logNormal() {
        var random = d3.random.normal.apply(d3, arguments);
        return function () {
          return Math.exp(random());
        };
      },
      bates: function bates(m) {
        var random = d3.random.irwinHall(m);
        return function () {
          return random() / m;
        };
      },
      irwinHall: function irwinHall(m) {
        return function () {
          for (var s = 0, j = 0; j < m; j++) {
            s += Math.random();
          }return s;
        };
      }
    };
    d3.scale = {};
    function d3_scaleExtent(domain) {
      var start = domain[0],
          stop = domain[domain.length - 1];
      return start < stop ? [start, stop] : [stop, start];
    }
    function d3_scaleRange(scale) {
      return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
    }
    function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
      var u = uninterpolate(domain[0], domain[1]),
          i = interpolate(range[0], range[1]);
      return function (x) {
        return i(u(x));
      };
    }
    function d3_scale_nice(domain, nice) {
      var i0 = 0,
          i1 = domain.length - 1,
          x0 = domain[i0],
          x1 = domain[i1],
          dx;
      if (x1 < x0) {
        dx = i0, i0 = i1, i1 = dx;
        dx = x0, x0 = x1, x1 = dx;
      }
      domain[i0] = nice.floor(x0);
      domain[i1] = nice.ceil(x1);
      return domain;
    }
    function d3_scale_niceStep(step) {
      return step ? {
        floor: function floor(x) {
          return Math.floor(x / step) * step;
        },
        ceil: function ceil(x) {
          return Math.ceil(x / step) * step;
        }
      } : d3_scale_niceIdentity;
    }
    var d3_scale_niceIdentity = {
      floor: d3_identity,
      ceil: d3_identity
    };
    function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
      var u = [],
          i = [],
          j = 0,
          k = Math.min(domain.length, range.length) - 1;
      if (domain[k] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }
      while (++j <= k) {
        u.push(uninterpolate(domain[j - 1], domain[j]));
        i.push(interpolate(range[j - 1], range[j]));
      }
      return function (x) {
        var j = d3.bisect(domain, x, 1, k) - 1;
        return i[j](u[j](x));
      };
    }
    d3.scale.linear = function () {
      return d3_scale_linear([0, 1], [0, 1], d3_interpolate, false);
    };
    function d3_scale_linear(domain, range, interpolate, clamp) {
      var output, input;
      function rescale() {
        var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear,
            uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
        output = linear(domain, range, uninterpolate, interpolate);
        input = linear(range, domain, uninterpolate, d3_interpolate);
        return scale;
      }
      function scale(x) {
        return output(x);
      }
      scale.invert = function (y) {
        return input(y);
      };
      scale.domain = function (x) {
        if (!arguments.length) return domain;
        domain = x.map(Number);
        return rescale();
      };
      scale.range = function (x) {
        if (!arguments.length) return range;
        range = x;
        return rescale();
      };
      scale.rangeRound = function (x) {
        return scale.range(x).interpolate(d3_interpolateRound);
      };
      scale.clamp = function (x) {
        if (!arguments.length) return clamp;
        clamp = x;
        return rescale();
      };
      scale.interpolate = function (x) {
        if (!arguments.length) return interpolate;
        interpolate = x;
        return rescale();
      };
      scale.ticks = function (m) {
        return d3_scale_linearTicks(domain, m);
      };
      scale.tickFormat = function (m, format) {
        return d3_scale_linearTickFormat(domain, m, format);
      };
      scale.nice = function (m) {
        d3_scale_linearNice(domain, m);
        return rescale();
      };
      scale.copy = function () {
        return d3_scale_linear(domain, range, interpolate, clamp);
      };
      return rescale();
    }
    function d3_scale_linearRebind(scale, linear) {
      return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
    }
    function d3_scale_linearNice(domain, m) {
      d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
      d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
      return domain;
    }
    function d3_scale_linearTickRange(domain, m) {
      if (m == null) m = 10;
      var extent = d3_scaleExtent(domain),
          span = extent[1] - extent[0],
          step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)),
          err = m / span * step;
      if (err <= .15) step *= 10;else if (err <= .35) step *= 5;else if (err <= .75) step *= 2;
      extent[0] = Math.ceil(extent[0] / step) * step;
      extent[1] = Math.floor(extent[1] / step) * step + step * .5;
      extent[2] = step;
      return extent;
    }
    function d3_scale_linearTicks(domain, m) {
      return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
    }
    function d3_scale_linearTickFormat(domain, m, format) {
      var range = d3_scale_linearTickRange(domain, m);
      if (format) {
        var match = d3_format_re.exec(format);
        match.shift();
        if (match[8] === "s") {
          var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
          if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
          match[8] = "f";
          format = d3.format(match.join(""));
          return function (d) {
            return format(prefix.scale(d)) + prefix.symbol;
          };
        }
        if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
        format = match.join("");
      } else {
        format = ",." + d3_scale_linearPrecision(range[2]) + "f";
      }
      return d3.format(format);
    }
    var d3_scale_linearFormatSignificant = {
      s: 1,
      g: 1,
      p: 1,
      r: 1,
      e: 1
    };
    function d3_scale_linearPrecision(value) {
      return -Math.floor(Math.log(value) / Math.LN10 + .01);
    }
    function d3_scale_linearFormatPrecision(type, range) {
      var p = d3_scale_linearPrecision(range[2]);
      return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
    }
    d3.scale.log = function () {
      return d3_scale_log(d3.scale.linear().domain([0, 1]), 10, true, [1, 10]);
    };
    function d3_scale_log(linear, base, positive, domain) {
      function log(x) {
        return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
      }
      function pow(x) {
        return positive ? Math.pow(base, x) : -Math.pow(base, -x);
      }
      function scale(x) {
        return linear(log(x));
      }
      scale.invert = function (x) {
        return pow(linear.invert(x));
      };
      scale.domain = function (x) {
        if (!arguments.length) return domain;
        positive = x[0] >= 0;
        linear.domain((domain = x.map(Number)).map(log));
        return scale;
      };
      scale.base = function (_) {
        if (!arguments.length) return base;
        base = +_;
        linear.domain(domain.map(log));
        return scale;
      };
      scale.nice = function () {
        var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
        linear.domain(niced);
        domain = niced.map(pow);
        return scale;
      };
      scale.ticks = function () {
        var extent = d3_scaleExtent(domain),
            ticks = [],
            u = extent[0],
            v = extent[1],
            i = Math.floor(log(u)),
            j = Math.ceil(log(v)),
            n = base % 1 ? 2 : base;
        if (isFinite(j - i)) {
          if (positive) {
            for (; i < j; i++) {
              for (var k = 1; k < n; k++) {
                ticks.push(pow(i) * k);
              }
            }ticks.push(pow(i));
          } else {
            ticks.push(pow(i));
            for (; i++ < j;) {
              for (var k = n - 1; k > 0; k--) {
                ticks.push(pow(i) * k);
              }
            }
          }
          for (i = 0; ticks[i] < u; i++) {}
          for (j = ticks.length; ticks[j - 1] > v; j--) {}
          ticks = ticks.slice(i, j);
        }
        return ticks;
      };
      scale.tickFormat = function (n, format) {
        if (!arguments.length) return d3_scale_logFormat;
        if (arguments.length < 2) format = d3_scale_logFormat;else if (typeof format !== "function") format = d3.format(format);
        var k = Math.max(1, base * n / scale.ticks().length);
        return function (d) {
          var i = d / pow(Math.round(log(d)));
          if (i * base < base - .5) i *= base;
          return i <= k ? format(d) : "";
        };
      };
      scale.copy = function () {
        return d3_scale_log(linear.copy(), base, positive, domain);
      };
      return d3_scale_linearRebind(scale, linear);
    }
    var d3_scale_logFormat = d3.format(".0e"),
        d3_scale_logNiceNegative = {
      floor: function floor(x) {
        return -Math.ceil(-x);
      },
      ceil: function ceil(x) {
        return -Math.floor(-x);
      }
    };
    d3.scale.pow = function () {
      return d3_scale_pow(d3.scale.linear(), 1, [0, 1]);
    };
    function d3_scale_pow(linear, exponent, domain) {
      var powp = d3_scale_powPow(exponent),
          powb = d3_scale_powPow(1 / exponent);
      function scale(x) {
        return linear(powp(x));
      }
      scale.invert = function (x) {
        return powb(linear.invert(x));
      };
      scale.domain = function (x) {
        if (!arguments.length) return domain;
        linear.domain((domain = x.map(Number)).map(powp));
        return scale;
      };
      scale.ticks = function (m) {
        return d3_scale_linearTicks(domain, m);
      };
      scale.tickFormat = function (m, format) {
        return d3_scale_linearTickFormat(domain, m, format);
      };
      scale.nice = function (m) {
        return scale.domain(d3_scale_linearNice(domain, m));
      };
      scale.exponent = function (x) {
        if (!arguments.length) return exponent;
        powp = d3_scale_powPow(exponent = x);
        powb = d3_scale_powPow(1 / exponent);
        linear.domain(domain.map(powp));
        return scale;
      };
      scale.copy = function () {
        return d3_scale_pow(linear.copy(), exponent, domain);
      };
      return d3_scale_linearRebind(scale, linear);
    }
    function d3_scale_powPow(e) {
      return function (x) {
        return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
      };
    }
    d3.scale.sqrt = function () {
      return d3.scale.pow().exponent(.5);
    };
    d3.scale.ordinal = function () {
      return d3_scale_ordinal([], {
        t: "range",
        a: [[]]
      });
    };
    function d3_scale_ordinal(domain, ranger) {
      var index, range, rangeBand;
      function scale(x) {
        return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
      }
      function steps(start, step) {
        return d3.range(domain.length).map(function (i) {
          return start + step * i;
        });
      }
      scale.domain = function (x) {
        if (!arguments.length) return domain;
        domain = [];
        index = new d3_Map();
        var i = -1,
            n = x.length,
            xi;
        while (++i < n) {
          if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
        }return scale[ranger.t].apply(scale, ranger.a);
      };
      scale.range = function (x) {
        if (!arguments.length) return range;
        range = x;
        rangeBand = 0;
        ranger = {
          t: "range",
          a: arguments
        };
        return scale;
      };
      scale.rangePoints = function (x, padding) {
        if (arguments.length < 2) padding = 0;
        var start = x[0],
            stop = x[1],
            step = domain.length < 2 ? (start = (start + stop) / 2, 0) : (stop - start) / (domain.length - 1 + padding);
        range = steps(start + step * padding / 2, step);
        rangeBand = 0;
        ranger = {
          t: "rangePoints",
          a: arguments
        };
        return scale;
      };
      scale.rangeRoundPoints = function (x, padding) {
        if (arguments.length < 2) padding = 0;
        var start = x[0],
            stop = x[1],
            step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 0) : (stop - start) / (domain.length - 1 + padding) | 0;
        range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
        rangeBand = 0;
        ranger = {
          t: "rangeRoundPoints",
          a: arguments
        };
        return scale;
      };
      scale.rangeBands = function (x, padding, outerPadding) {
        if (arguments.length < 2) padding = 0;
        if (arguments.length < 3) outerPadding = padding;
        var reverse = x[1] < x[0],
            start = x[reverse - 0],
            stop = x[1 - reverse],
            step = (stop - start) / (domain.length - padding + 2 * outerPadding);
        range = steps(start + step * outerPadding, step);
        if (reverse) range.reverse();
        rangeBand = step * (1 - padding);
        ranger = {
          t: "rangeBands",
          a: arguments
        };
        return scale;
      };
      scale.rangeRoundBands = function (x, padding, outerPadding) {
        if (arguments.length < 2) padding = 0;
        if (arguments.length < 3) outerPadding = padding;
        var reverse = x[1] < x[0],
            start = x[reverse - 0],
            stop = x[1 - reverse],
            step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
        range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
        if (reverse) range.reverse();
        rangeBand = Math.round(step * (1 - padding));
        ranger = {
          t: "rangeRoundBands",
          a: arguments
        };
        return scale;
      };
      scale.rangeBand = function () {
        return rangeBand;
      };
      scale.rangeExtent = function () {
        return d3_scaleExtent(ranger.a[0]);
      };
      scale.copy = function () {
        return d3_scale_ordinal(domain, ranger);
      };
      return scale.domain(domain);
    }
    d3.scale.category10 = function () {
      return d3.scale.ordinal().range(d3_category10);
    };
    d3.scale.category20 = function () {
      return d3.scale.ordinal().range(d3_category20);
    };
    d3.scale.category20b = function () {
      return d3.scale.ordinal().range(d3_category20b);
    };
    d3.scale.category20c = function () {
      return d3.scale.ordinal().range(d3_category20c);
    };
    var d3_category10 = [2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175].map(d3_rgbString);
    var d3_category20 = [2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725].map(d3_rgbString);
    var d3_category20b = [3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654].map(d3_rgbString);
    var d3_category20c = [3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081].map(d3_rgbString);
    d3.scale.quantile = function () {
      return d3_scale_quantile([], []);
    };
    function d3_scale_quantile(domain, range) {
      var thresholds;
      function rescale() {
        var k = 0,
            q = range.length;
        thresholds = [];
        while (++k < q) {
          thresholds[k - 1] = d3.quantile(domain, k / q);
        }return scale;
      }
      function scale(x) {
        if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
      }
      scale.domain = function (x) {
        if (!arguments.length) return domain;
        domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
        return rescale();
      };
      scale.range = function (x) {
        if (!arguments.length) return range;
        range = x;
        return rescale();
      };
      scale.quantiles = function () {
        return thresholds;
      };
      scale.invertExtent = function (y) {
        y = range.indexOf(y);
        return y < 0 ? [NaN, NaN] : [y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1]];
      };
      scale.copy = function () {
        return d3_scale_quantile(domain, range);
      };
      return rescale();
    }
    d3.scale.quantize = function () {
      return d3_scale_quantize(0, 1, [0, 1]);
    };
    function d3_scale_quantize(x0, x1, range) {
      var kx, i;
      function scale(x) {
        return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
      }
      function rescale() {
        kx = range.length / (x1 - x0);
        i = range.length - 1;
        return scale;
      }
      scale.domain = function (x) {
        if (!arguments.length) return [x0, x1];
        x0 = +x[0];
        x1 = +x[x.length - 1];
        return rescale();
      };
      scale.range = function (x) {
        if (!arguments.length) return range;
        range = x;
        return rescale();
      };
      scale.invertExtent = function (y) {
        y = range.indexOf(y);
        y = y < 0 ? NaN : y / kx + x0;
        return [y, y + 1 / kx];
      };
      scale.copy = function () {
        return d3_scale_quantize(x0, x1, range);
      };
      return rescale();
    }
    d3.scale.threshold = function () {
      return d3_scale_threshold([.5], [0, 1]);
    };
    function d3_scale_threshold(domain, range) {
      function scale(x) {
        if (x <= x) return range[d3.bisect(domain, x)];
      }
      scale.domain = function (_) {
        if (!arguments.length) return domain;
        domain = _;
        return scale;
      };
      scale.range = function (_) {
        if (!arguments.length) return range;
        range = _;
        return scale;
      };
      scale.invertExtent = function (y) {
        y = range.indexOf(y);
        return [domain[y - 1], domain[y]];
      };
      scale.copy = function () {
        return d3_scale_threshold(domain, range);
      };
      return scale;
    }
    d3.scale.identity = function () {
      return d3_scale_identity([0, 1]);
    };
    function d3_scale_identity(domain) {
      function identity(x) {
        return +x;
      }
      identity.invert = identity;
      identity.domain = identity.range = function (x) {
        if (!arguments.length) return domain;
        domain = x.map(identity);
        return identity;
      };
      identity.ticks = function (m) {
        return d3_scale_linearTicks(domain, m);
      };
      identity.tickFormat = function (m, format) {
        return d3_scale_linearTickFormat(domain, m, format);
      };
      identity.copy = function () {
        return d3_scale_identity(domain);
      };
      return identity;
    }
    d3.svg = {};
    function d3_zero() {
      return 0;
    }
    d3.svg.arc = function () {
      var innerRadius = d3_svg_arcInnerRadius,
          outerRadius = d3_svg_arcOuterRadius,
          cornerRadius = d3_zero,
          padRadius = d3_svg_arcAuto,
          startAngle = d3_svg_arcStartAngle,
          endAngle = d3_svg_arcEndAngle,
          padAngle = d3_svg_arcPadAngle;
      function arc() {
        var r0 = Math.max(0, +innerRadius.apply(this, arguments)),
            r1 = Math.max(0, +outerRadius.apply(this, arguments)),
            a0 = startAngle.apply(this, arguments) - halfπ,
            a1 = endAngle.apply(this, arguments) - halfπ,
            da = Math.abs(a1 - a0),
            cw = a0 > a1 ? 0 : 1;
        if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
        if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
        var rc,
            cr,
            rp,
            ap,
            p0 = 0,
            p1 = 0,
            x0,
            y0,
            x1,
            y1,
            x2,
            y2,
            x3,
            y3,
            path = [];
        if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
          rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
          if (!cw) p1 *= -1;
          if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
          if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
        }
        if (r1) {
          x0 = r1 * Math.cos(a0 + p1);
          y0 = r1 * Math.sin(a0 + p1);
          x1 = r1 * Math.cos(a1 - p1);
          y1 = r1 * Math.sin(a1 - p1);
          var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
          if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
            var h1 = (a0 + a1) / 2;
            x0 = r1 * Math.cos(h1);
            y0 = r1 * Math.sin(h1);
            x1 = y1 = null;
          }
        } else {
          x0 = y0 = 0;
        }
        if (r0) {
          x2 = r0 * Math.cos(a1 - p0);
          y2 = r0 * Math.sin(a1 - p0);
          x3 = r0 * Math.cos(a0 + p0);
          y3 = r0 * Math.sin(a0 + p0);
          var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
          if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
            var h0 = (a0 + a1) / 2;
            x2 = r0 * Math.cos(h0);
            y2 = r0 * Math.sin(h0);
            x3 = y3 = null;
          }
        } else {
          x2 = y2 = 0;
        }
        if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
          cr = r0 < r1 ^ cw ? 0 : 1;
          var rc1 = rc,
              rc0 = rc;
          if (da < π) {
            var oc = x3 == null ? [x2, y2] : x1 == null ? [x0, y0] : d3_geom_polygonIntersect([x0, y0], [x3, y3], [x1, y1], [x2, y2]),
                ax = x0 - oc[0],
                ay = y0 - oc[1],
                bx = x1 - oc[0],
                by = y1 - oc[1],
                kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),
                lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
            rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
          }
          if (x1 != null) {
            var t30 = d3_svg_arcCornerTangents(x3 == null ? [x2, y2] : [x3, y3], [x0, y0], r1, rc1, cw),
                t12 = d3_svg_arcCornerTangents([x1, y1], [x2, y2], r1, rc1, cw);
            if (rc === rc1) {
              path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
            } else {
              path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
            }
          } else {
            path.push("M", x0, ",", y0);
          }
          if (x3 != null) {
            var t03 = d3_svg_arcCornerTangents([x0, y0], [x3, y3], r0, -rc0, cw),
                t21 = d3_svg_arcCornerTangents([x2, y2], x1 == null ? [x0, y0] : [x1, y1], r0, -rc0, cw);
            if (rc === rc0) {
              path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
            } else {
              path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
            }
          } else {
            path.push("L", x2, ",", y2);
          }
        } else {
          path.push("M", x0, ",", y0);
          if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
          path.push("L", x2, ",", y2);
          if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
        }
        path.push("Z");
        return path.join("");
      }
      function circleSegment(r1, cw) {
        return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
      }
      arc.innerRadius = function (v) {
        if (!arguments.length) return innerRadius;
        innerRadius = d3_functor(v);
        return arc;
      };
      arc.outerRadius = function (v) {
        if (!arguments.length) return outerRadius;
        outerRadius = d3_functor(v);
        return arc;
      };
      arc.cornerRadius = function (v) {
        if (!arguments.length) return cornerRadius;
        cornerRadius = d3_functor(v);
        return arc;
      };
      arc.padRadius = function (v) {
        if (!arguments.length) return padRadius;
        padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
        return arc;
      };
      arc.startAngle = function (v) {
        if (!arguments.length) return startAngle;
        startAngle = d3_functor(v);
        return arc;
      };
      arc.endAngle = function (v) {
        if (!arguments.length) return endAngle;
        endAngle = d3_functor(v);
        return arc;
      };
      arc.padAngle = function (v) {
        if (!arguments.length) return padAngle;
        padAngle = d3_functor(v);
        return arc;
      };
      arc.centroid = function () {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
            a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
        return [Math.cos(a) * r, Math.sin(a) * r];
      };
      return arc;
    };
    var d3_svg_arcAuto = "auto";
    function d3_svg_arcInnerRadius(d) {
      return d.innerRadius;
    }
    function d3_svg_arcOuterRadius(d) {
      return d.outerRadius;
    }
    function d3_svg_arcStartAngle(d) {
      return d.startAngle;
    }
    function d3_svg_arcEndAngle(d) {
      return d.endAngle;
    }
    function d3_svg_arcPadAngle(d) {
      return d && d.padAngle;
    }
    function d3_svg_arcSweep(x0, y0, x1, y1) {
      return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
    }
    function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
      var x01 = p0[0] - p1[0],
          y01 = p0[1] - p1[1],
          lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),
          ox = lo * y01,
          oy = -lo * x01,
          x1 = p0[0] + ox,
          y1 = p0[1] + oy,
          x2 = p1[0] + ox,
          y2 = p1[1] + oy,
          x3 = (x1 + x2) / 2,
          y3 = (y1 + y2) / 2,
          dx = x2 - x1,
          dy = y2 - y1,
          d2 = dx * dx + dy * dy,
          r = r1 - rc,
          D = x1 * y2 - x2 * y1,
          d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),
          cx0 = (D * dy - dx * d) / d2,
          cy0 = (-D * dx - dy * d) / d2,
          cx1 = (D * dy + dx * d) / d2,
          cy1 = (-D * dx + dy * d) / d2,
          dx0 = cx0 - x3,
          dy0 = cy0 - y3,
          dx1 = cx1 - x3,
          dy1 = cy1 - y3;
      if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
      return [[cx0 - ox, cy0 - oy], [cx0 * r1 / r, cy0 * r1 / r]];
    }
    function d3_svg_line(projection) {
      var x = d3_geom_pointX,
          y = d3_geom_pointY,
          defined = d3_true,
          interpolate = d3_svg_lineLinear,
          interpolateKey = interpolate.key,
          tension = .7;
      function line(data) {
        var segments = [],
            points = [],
            i = -1,
            n = data.length,
            d,
            fx = d3_functor(x),
            fy = d3_functor(y);
        function segment() {
          segments.push("M", interpolate(projection(points), tension));
        }
        while (++i < n) {
          if (defined.call(this, d = data[i], i)) {
            points.push([+fx.call(this, d, i), +fy.call(this, d, i)]);
          } else if (points.length) {
            segment();
            points = [];
          }
        }
        if (points.length) segment();
        return segments.length ? segments.join("") : null;
      }
      line.x = function (_) {
        if (!arguments.length) return x;
        x = _;
        return line;
      };
      line.y = function (_) {
        if (!arguments.length) return y;
        y = _;
        return line;
      };
      line.defined = function (_) {
        if (!arguments.length) return defined;
        defined = _;
        return line;
      };
      line.interpolate = function (_) {
        if (!arguments.length) return interpolateKey;
        if (typeof _ === "function") interpolateKey = interpolate = _;else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
        return line;
      };
      line.tension = function (_) {
        if (!arguments.length) return tension;
        tension = _;
        return line;
      };
      return line;
    }
    d3.svg.line = function () {
      return d3_svg_line(d3_identity);
    };
    var d3_svg_lineInterpolators = d3.map({
      linear: d3_svg_lineLinear,
      "linear-closed": d3_svg_lineLinearClosed,
      step: d3_svg_lineStep,
      "step-before": d3_svg_lineStepBefore,
      "step-after": d3_svg_lineStepAfter,
      basis: d3_svg_lineBasis,
      "basis-open": d3_svg_lineBasisOpen,
      "basis-closed": d3_svg_lineBasisClosed,
      bundle: d3_svg_lineBundle,
      cardinal: d3_svg_lineCardinal,
      "cardinal-open": d3_svg_lineCardinalOpen,
      "cardinal-closed": d3_svg_lineCardinalClosed,
      monotone: d3_svg_lineMonotone
    });
    d3_svg_lineInterpolators.forEach(function (key, value) {
      value.key = key;
      value.closed = /-closed$/.test(key);
    });
    function d3_svg_lineLinear(points) {
      return points.length > 1 ? points.join("L") : points + "Z";
    }
    function d3_svg_lineLinearClosed(points) {
      return points.join("L") + "Z";
    }
    function d3_svg_lineStep(points) {
      var i = 0,
          n = points.length,
          p = points[0],
          path = [p[0], ",", p[1]];
      while (++i < n) {
        path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
      }if (n > 1) path.push("H", p[0]);
      return path.join("");
    }
    function d3_svg_lineStepBefore(points) {
      var i = 0,
          n = points.length,
          p = points[0],
          path = [p[0], ",", p[1]];
      while (++i < n) {
        path.push("V", (p = points[i])[1], "H", p[0]);
      }return path.join("");
    }
    function d3_svg_lineStepAfter(points) {
      var i = 0,
          n = points.length,
          p = points[0],
          path = [p[0], ",", p[1]];
      while (++i < n) {
        path.push("H", (p = points[i])[0], "V", p[1]);
      }return path.join("");
    }
    function d3_svg_lineCardinalOpen(points, tension) {
      return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
    }
    function d3_svg_lineCardinalClosed(points, tension) {
      return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), points), d3_svg_lineCardinalTangents([points[points.length - 2]].concat(points, [points[1]]), tension));
    }
    function d3_svg_lineCardinal(points, tension) {
      return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
    }
    function d3_svg_lineHermite(points, tangents) {
      if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
        return d3_svg_lineLinear(points);
      }
      var quad = points.length != tangents.length,
          path = "",
          p0 = points[0],
          p = points[1],
          t0 = tangents[0],
          t = t0,
          pi = 1;
      if (quad) {
        path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
        p0 = points[1];
        pi = 2;
      }
      if (tangents.length > 1) {
        t = tangents[1];
        p = points[pi];
        pi++;
        path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
        for (var i = 2; i < tangents.length; i++, pi++) {
          p = points[pi];
          t = tangents[i];
          path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
        }
      }
      if (quad) {
        var lp = points[pi];
        path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
      }
      return path;
    }
    function d3_svg_lineCardinalTangents(points, tension) {
      var tangents = [],
          a = (1 - tension) / 2,
          p0,
          p1 = points[0],
          p2 = points[1],
          i = 1,
          n = points.length;
      while (++i < n) {
        p0 = p1;
        p1 = p2;
        p2 = points[i];
        tangents.push([a * (p2[0] - p0[0]), a * (p2[1] - p0[1])]);
      }
      return tangents;
    }
    function d3_svg_lineBasis(points) {
      if (points.length < 3) return d3_svg_lineLinear(points);
      var i = 1,
          n = points.length,
          pi = points[0],
          x0 = pi[0],
          y0 = pi[1],
          px = [x0, x0, x0, (pi = points[1])[0]],
          py = [y0, y0, y0, pi[1]],
          path = [x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];
      points.push(points[n - 1]);
      while (++i <= n) {
        pi = points[i];
        px.shift();
        px.push(pi[0]);
        py.shift();
        py.push(pi[1]);
        d3_svg_lineBasisBezier(path, px, py);
      }
      points.pop();
      path.push("L", pi);
      return path.join("");
    }
    function d3_svg_lineBasisOpen(points) {
      if (points.length < 4) return d3_svg_lineLinear(points);
      var path = [],
          i = -1,
          n = points.length,
          pi,
          px = [0],
          py = [0];
      while (++i < 3) {
        pi = points[i];
        px.push(pi[0]);
        py.push(pi[1]);
      }
      path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
      --i;
      while (++i < n) {
        pi = points[i];
        px.shift();
        px.push(pi[0]);
        py.shift();
        py.push(pi[1]);
        d3_svg_lineBasisBezier(path, px, py);
      }
      return path.join("");
    }
    function d3_svg_lineBasisClosed(points) {
      var path,
          i = -1,
          n = points.length,
          m = n + 4,
          pi,
          px = [],
          py = [];
      while (++i < 4) {
        pi = points[i % n];
        px.push(pi[0]);
        py.push(pi[1]);
      }
      path = [d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];
      --i;
      while (++i < m) {
        pi = points[i % n];
        px.shift();
        px.push(pi[0]);
        py.shift();
        py.push(pi[1]);
        d3_svg_lineBasisBezier(path, px, py);
      }
      return path.join("");
    }
    function d3_svg_lineBundle(points, tension) {
      var n = points.length - 1;
      if (n) {
        var x0 = points[0][0],
            y0 = points[0][1],
            dx = points[n][0] - x0,
            dy = points[n][1] - y0,
            i = -1,
            p,
            t;
        while (++i <= n) {
          p = points[i];
          t = i / n;
          p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
          p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
        }
      }
      return d3_svg_lineBasis(points);
    }
    function d3_svg_lineDot4(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }
    var d3_svg_lineBasisBezier1 = [0, 2 / 3, 1 / 3, 0],
        d3_svg_lineBasisBezier2 = [0, 1 / 3, 2 / 3, 0],
        d3_svg_lineBasisBezier3 = [0, 1 / 6, 2 / 3, 1 / 6];
    function d3_svg_lineBasisBezier(path, x, y) {
      path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
    }
    function d3_svg_lineSlope(p0, p1) {
      return (p1[1] - p0[1]) / (p1[0] - p0[0]);
    }
    function d3_svg_lineFiniteDifferences(points) {
      var i = 0,
          j = points.length - 1,
          m = [],
          p0 = points[0],
          p1 = points[1],
          d = m[0] = d3_svg_lineSlope(p0, p1);
      while (++i < j) {
        m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
      }
      m[i] = d;
      return m;
    }
    function d3_svg_lineMonotoneTangents(points) {
      var tangents = [],
          d,
          a,
          b,
          s,
          m = d3_svg_lineFiniteDifferences(points),
          i = -1,
          j = points.length - 1;
      while (++i < j) {
        d = d3_svg_lineSlope(points[i], points[i + 1]);
        if (abs(d) < ε) {
          m[i] = m[i + 1] = 0;
        } else {
          a = m[i] / d;
          b = m[i + 1] / d;
          s = a * a + b * b;
          if (s > 9) {
            s = d * 3 / Math.sqrt(s);
            m[i] = s * a;
            m[i + 1] = s * b;
          }
        }
      }
      i = -1;
      while (++i <= j) {
        s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
        tangents.push([s || 0, m[i] * s || 0]);
      }
      return tangents;
    }
    function d3_svg_lineMonotone(points) {
      return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
    }
    d3.svg.line.radial = function () {
      var line = d3_svg_line(d3_svg_lineRadial);
      line.radius = line.x, delete line.x;
      line.angle = line.y, delete line.y;
      return line;
    };
    function d3_svg_lineRadial(points) {
      var point,
          i = -1,
          n = points.length,
          r,
          a;
      while (++i < n) {
        point = points[i];
        r = point[0];
        a = point[1] - halfπ;
        point[0] = r * Math.cos(a);
        point[1] = r * Math.sin(a);
      }
      return points;
    }
    function d3_svg_area(projection) {
      var x0 = d3_geom_pointX,
          x1 = d3_geom_pointX,
          y0 = 0,
          y1 = d3_geom_pointY,
          defined = d3_true,
          interpolate = d3_svg_lineLinear,
          interpolateKey = interpolate.key,
          interpolateReverse = interpolate,
          L = "L",
          tension = .7;
      function area(data) {
        var segments = [],
            points0 = [],
            points1 = [],
            i = -1,
            n = data.length,
            d,
            fx0 = d3_functor(x0),
            fy0 = d3_functor(y0),
            fx1 = x0 === x1 ? function () {
          return x;
        } : d3_functor(x1),
            fy1 = y0 === y1 ? function () {
          return y;
        } : d3_functor(y1),
            x,
            y;
        function segment() {
          segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
        }
        while (++i < n) {
          if (defined.call(this, d = data[i], i)) {
            points0.push([x = +fx0.call(this, d, i), y = +fy0.call(this, d, i)]);
            points1.push([+fx1.call(this, d, i), +fy1.call(this, d, i)]);
          } else if (points0.length) {
            segment();
            points0 = [];
            points1 = [];
          }
        }
        if (points0.length) segment();
        return segments.length ? segments.join("") : null;
      }
      area.x = function (_) {
        if (!arguments.length) return x1;
        x0 = x1 = _;
        return area;
      };
      area.x0 = function (_) {
        if (!arguments.length) return x0;
        x0 = _;
        return area;
      };
      area.x1 = function (_) {
        if (!arguments.length) return x1;
        x1 = _;
        return area;
      };
      area.y = function (_) {
        if (!arguments.length) return y1;
        y0 = y1 = _;
        return area;
      };
      area.y0 = function (_) {
        if (!arguments.length) return y0;
        y0 = _;
        return area;
      };
      area.y1 = function (_) {
        if (!arguments.length) return y1;
        y1 = _;
        return area;
      };
      area.defined = function (_) {
        if (!arguments.length) return defined;
        defined = _;
        return area;
      };
      area.interpolate = function (_) {
        if (!arguments.length) return interpolateKey;
        if (typeof _ === "function") interpolateKey = interpolate = _;else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
        interpolateReverse = interpolate.reverse || interpolate;
        L = interpolate.closed ? "M" : "L";
        return area;
      };
      area.tension = function (_) {
        if (!arguments.length) return tension;
        tension = _;
        return area;
      };
      return area;
    }
    d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
    d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
    d3.svg.area = function () {
      return d3_svg_area(d3_identity);
    };
    d3.svg.area.radial = function () {
      var area = d3_svg_area(d3_svg_lineRadial);
      area.radius = area.x, delete area.x;
      area.innerRadius = area.x0, delete area.x0;
      area.outerRadius = area.x1, delete area.x1;
      area.angle = area.y, delete area.y;
      area.startAngle = area.y0, delete area.y0;
      area.endAngle = area.y1, delete area.y1;
      return area;
    };
    d3.svg.chord = function () {
      var source = d3_source,
          target = d3_target,
          radius = d3_svg_chordRadius,
          startAngle = d3_svg_arcStartAngle,
          endAngle = d3_svg_arcEndAngle;
      function chord(d, i) {
        var s = subgroup(this, source, d, i),
            t = subgroup(this, target, d, i);
        return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
      }
      function subgroup(self, f, d, i) {
        var subgroup = f.call(self, d, i),
            r = radius.call(self, subgroup, i),
            a0 = startAngle.call(self, subgroup, i) - halfπ,
            a1 = endAngle.call(self, subgroup, i) - halfπ;
        return {
          r: r,
          a0: a0,
          a1: a1,
          p0: [r * Math.cos(a0), r * Math.sin(a0)],
          p1: [r * Math.cos(a1), r * Math.sin(a1)]
        };
      }
      function equals(a, b) {
        return a.a0 == b.a0 && a.a1 == b.a1;
      }
      function arc(r, p, a) {
        return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
      }
      function curve(r0, p0, r1, p1) {
        return "Q 0,0 " + p1;
      }
      chord.radius = function (v) {
        if (!arguments.length) return radius;
        radius = d3_functor(v);
        return chord;
      };
      chord.source = function (v) {
        if (!arguments.length) return source;
        source = d3_functor(v);
        return chord;
      };
      chord.target = function (v) {
        if (!arguments.length) return target;
        target = d3_functor(v);
        return chord;
      };
      chord.startAngle = function (v) {
        if (!arguments.length) return startAngle;
        startAngle = d3_functor(v);
        return chord;
      };
      chord.endAngle = function (v) {
        if (!arguments.length) return endAngle;
        endAngle = d3_functor(v);
        return chord;
      };
      return chord;
    };
    function d3_svg_chordRadius(d) {
      return d.radius;
    }
    d3.svg.diagonal = function () {
      var source = d3_source,
          target = d3_target,
          projection = d3_svg_diagonalProjection;
      function diagonal(d, i) {
        var p0 = source.call(this, d, i),
            p3 = target.call(this, d, i),
            m = (p0.y + p3.y) / 2,
            p = [p0, {
          x: p0.x,
          y: m
        }, {
          x: p3.x,
          y: m
        }, p3];
        p = p.map(projection);
        return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
      }
      diagonal.source = function (x) {
        if (!arguments.length) return source;
        source = d3_functor(x);
        return diagonal;
      };
      diagonal.target = function (x) {
        if (!arguments.length) return target;
        target = d3_functor(x);
        return diagonal;
      };
      diagonal.projection = function (x) {
        if (!arguments.length) return projection;
        projection = x;
        return diagonal;
      };
      return diagonal;
    };
    function d3_svg_diagonalProjection(d) {
      return [d.x, d.y];
    }
    d3.svg.diagonal.radial = function () {
      var diagonal = d3.svg.diagonal(),
          projection = d3_svg_diagonalProjection,
          projection_ = diagonal.projection;
      diagonal.projection = function (x) {
        return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
      };
      return diagonal;
    };
    function d3_svg_diagonalRadialProjection(projection) {
      return function () {
        var d = projection.apply(this, arguments),
            r = d[0],
            a = d[1] - halfπ;
        return [r * Math.cos(a), r * Math.sin(a)];
      };
    }
    d3.svg.symbol = function () {
      var type = d3_svg_symbolType,
          size = d3_svg_symbolSize;
      function symbol(d, i) {
        return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
      }
      symbol.type = function (x) {
        if (!arguments.length) return type;
        type = d3_functor(x);
        return symbol;
      };
      symbol.size = function (x) {
        if (!arguments.length) return size;
        size = d3_functor(x);
        return symbol;
      };
      return symbol;
    };
    function d3_svg_symbolSize() {
      return 64;
    }
    function d3_svg_symbolType() {
      return "circle";
    }
    function d3_svg_symbolCircle(size) {
      var r = Math.sqrt(size / π);
      return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
    }
    var d3_svg_symbols = d3.map({
      circle: d3_svg_symbolCircle,
      cross: function cross(size) {
        var r = Math.sqrt(size / 5) / 2;
        return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
      },
      diamond: function diamond(size) {
        var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)),
            rx = ry * d3_svg_symbolTan30;
        return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
      },
      square: function square(size) {
        var r = Math.sqrt(size) / 2;
        return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
      },
      "triangle-down": function triangleDown(size) {
        var rx = Math.sqrt(size / d3_svg_symbolSqrt3),
            ry = rx * d3_svg_symbolSqrt3 / 2;
        return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
      },
      "triangle-up": function triangleUp(size) {
        var rx = Math.sqrt(size / d3_svg_symbolSqrt3),
            ry = rx * d3_svg_symbolSqrt3 / 2;
        return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
      }
    });
    d3.svg.symbolTypes = d3_svg_symbols.keys();
    var d3_svg_symbolSqrt3 = Math.sqrt(3),
        d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
    d3_selectionPrototype.transition = function (name) {
      var id = d3_transitionInheritId || ++d3_transitionId,
          ns = d3_transitionNamespace(name),
          subgroups = [],
          subgroup,
          node,
          transition = d3_transitionInherit || {
        time: Date.now(),
        ease: d3_ease_cubicInOut,
        delay: 0,
        duration: 250
      };
      for (var j = -1, m = this.length; ++j < m;) {
        subgroups.push(subgroup = []);
        for (var group = this[j], i = -1, n = group.length; ++i < n;) {
          if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
          subgroup.push(node);
        }
      }
      return d3_transition(subgroups, ns, id);
    };
    d3_selectionPrototype.interrupt = function (name) {
      return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
    };
    var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
    function d3_selection_interruptNS(ns) {
      return function () {
        var lock, activeId, active;
        if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
          active.timer.c = null;
          active.timer.t = NaN;
          if (--lock.count) delete lock[activeId];else delete this[ns];
          lock.active += .5;
          active.event && active.event.interrupt.call(this, this.__data__, active.index);
        }
      };
    }
    function d3_transition(groups, ns, id) {
      d3_subclass(groups, d3_transitionPrototype);
      groups.namespace = ns;
      groups.id = id;
      return groups;
    }
    var d3_transitionPrototype = [],
        d3_transitionId = 0,
        d3_transitionInheritId,
        d3_transitionInherit;
    d3_transitionPrototype.call = d3_selectionPrototype.call;
    d3_transitionPrototype.empty = d3_selectionPrototype.empty;
    d3_transitionPrototype.node = d3_selectionPrototype.node;
    d3_transitionPrototype.size = d3_selectionPrototype.size;
    d3.transition = function (selection, name) {
      return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
    };
    d3.transition.prototype = d3_transitionPrototype;
    d3_transitionPrototype.select = function (selector) {
      var id = this.id,
          ns = this.namespace,
          subgroups = [],
          subgroup,
          subnode,
          node;
      selector = d3_selection_selector(selector);
      for (var j = -1, m = this.length; ++j < m;) {
        subgroups.push(subgroup = []);
        for (var group = this[j], i = -1, n = group.length; ++i < n;) {
          if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            d3_transitionNode(subnode, i, ns, id, node[ns][id]);
            subgroup.push(subnode);
          } else {
            subgroup.push(null);
          }
        }
      }
      return d3_transition(subgroups, ns, id);
    };
    d3_transitionPrototype.selectAll = function (selector) {
      var id = this.id,
          ns = this.namespace,
          subgroups = [],
          subgroup,
          subnodes,
          node,
          subnode,
          transition;
      selector = d3_selection_selectorAll(selector);
      for (var j = -1, m = this.length; ++j < m;) {
        for (var group = this[j], i = -1, n = group.length; ++i < n;) {
          if (node = group[i]) {
            transition = node[ns][id];
            subnodes = selector.call(node, node.__data__, i, j);
            subgroups.push(subgroup = []);
            for (var k = -1, o = subnodes.length; ++k < o;) {
              if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
              subgroup.push(subnode);
            }
          }
        }
      }
      return d3_transition(subgroups, ns, id);
    };
    d3_transitionPrototype.filter = function (filter) {
      var subgroups = [],
          subgroup,
          group,
          node;
      if (typeof filter !== "function") filter = d3_selection_filter(filter);
      for (var j = 0, m = this.length; j < m; j++) {
        subgroups.push(subgroup = []);
        for (var group = this[j], i = 0, n = group.length; i < n; i++) {
          if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
            subgroup.push(node);
          }
        }
      }
      return d3_transition(subgroups, this.namespace, this.id);
    };
    d3_transitionPrototype.tween = function (name, tween) {
      var id = this.id,
          ns = this.namespace;
      if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
      return d3_selection_each(this, tween == null ? function (node) {
        node[ns][id].tween.remove(name);
      } : function (node) {
        node[ns][id].tween.set(name, tween);
      });
    };
    function d3_transition_tween(groups, name, value, tween) {
      var id = groups.id,
          ns = groups.namespace;
      return d3_selection_each(groups, typeof value === "function" ? function (node, i, j) {
        node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
      } : (value = tween(value), function (node) {
        node[ns][id].tween.set(name, value);
      }));
    }
    d3_transitionPrototype.attr = function (nameNS, value) {
      if (arguments.length < 2) {
        for (value in nameNS) {
          this.attr(value, nameNS[value]);
        }return this;
      }
      var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate,
          name = d3.ns.qualify(nameNS);
      function attrNull() {
        this.removeAttribute(name);
      }
      function attrNullNS() {
        this.removeAttributeNS(name.space, name.local);
      }
      function attrTween(b) {
        return b == null ? attrNull : (b += "", function () {
          var a = this.getAttribute(name),
              i;
          return a !== b && (i = interpolate(a, b), function (t) {
            this.setAttribute(name, i(t));
          });
        });
      }
      function attrTweenNS(b) {
        return b == null ? attrNullNS : (b += "", function () {
          var a = this.getAttributeNS(name.space, name.local),
              i;
          return a !== b && (i = interpolate(a, b), function (t) {
            this.setAttributeNS(name.space, name.local, i(t));
          });
        });
      }
      return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
    };
    d3_transitionPrototype.attrTween = function (nameNS, tween) {
      var name = d3.ns.qualify(nameNS);
      function attrTween(d, i) {
        var f = tween.call(this, d, i, this.getAttribute(name));
        return f && function (t) {
          this.setAttribute(name, f(t));
        };
      }
      function attrTweenNS(d, i) {
        var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
        return f && function (t) {
          this.setAttributeNS(name.space, name.local, f(t));
        };
      }
      return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
    };
    d3_transitionPrototype.style = function (name, value, priority) {
      var n = arguments.length;
      if (n < 3) {
        if (typeof name !== "string") {
          if (n < 2) value = "";
          for (priority in name) {
            this.style(priority, name[priority], value);
          }return this;
        }
        priority = "";
      }
      function styleNull() {
        this.style.removeProperty(name);
      }
      function styleString(b) {
        return b == null ? styleNull : (b += "", function () {
          var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name),
              i;
          return a !== b && (i = d3_interpolate(a, b), function (t) {
            this.style.setProperty(name, i(t), priority);
          });
        });
      }
      return d3_transition_tween(this, "style." + name, value, styleString);
    };
    d3_transitionPrototype.styleTween = function (name, tween, priority) {
      if (arguments.length < 3) priority = "";
      function styleTween(d, i) {
        var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
        return f && function (t) {
          this.style.setProperty(name, f(t), priority);
        };
      }
      return this.tween("style." + name, styleTween);
    };
    d3_transitionPrototype.text = function (value) {
      return d3_transition_tween(this, "text", value, d3_transition_text);
    };
    function d3_transition_text(b) {
      if (b == null) b = "";
      return function () {
        this.textContent = b;
      };
    }
    d3_transitionPrototype.remove = function () {
      var ns = this.namespace;
      return this.each("end.transition", function () {
        var p;
        if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
      });
    };
    d3_transitionPrototype.ease = function (value) {
      var id = this.id,
          ns = this.namespace;
      if (arguments.length < 1) return this.node()[ns][id].ease;
      if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
      return d3_selection_each(this, function (node) {
        node[ns][id].ease = value;
      });
    };
    d3_transitionPrototype.delay = function (value) {
      var id = this.id,
          ns = this.namespace;
      if (arguments.length < 1) return this.node()[ns][id].delay;
      return d3_selection_each(this, typeof value === "function" ? function (node, i, j) {
        node[ns][id].delay = +value.call(node, node.__data__, i, j);
      } : (value = +value, function (node) {
        node[ns][id].delay = value;
      }));
    };
    d3_transitionPrototype.duration = function (value) {
      var id = this.id,
          ns = this.namespace;
      if (arguments.length < 1) return this.node()[ns][id].duration;
      return d3_selection_each(this, typeof value === "function" ? function (node, i, j) {
        node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
      } : (value = Math.max(1, value), function (node) {
        node[ns][id].duration = value;
      }));
    };
    d3_transitionPrototype.each = function (type, listener) {
      var id = this.id,
          ns = this.namespace;
      if (arguments.length < 2) {
        var inherit = d3_transitionInherit,
            inheritId = d3_transitionInheritId;
        try {
          d3_transitionInheritId = id;
          d3_selection_each(this, function (node, i, j) {
            d3_transitionInherit = node[ns][id];
            type.call(node, node.__data__, i, j);
          });
        } finally {
          d3_transitionInherit = inherit;
          d3_transitionInheritId = inheritId;
        }
      } else {
        d3_selection_each(this, function (node) {
          var transition = node[ns][id];
          (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
        });
      }
      return this;
    };
    d3_transitionPrototype.transition = function () {
      var id0 = this.id,
          id1 = ++d3_transitionId,
          ns = this.namespace,
          subgroups = [],
          subgroup,
          group,
          node,
          transition;
      for (var j = 0, m = this.length; j < m; j++) {
        subgroups.push(subgroup = []);
        for (var group = this[j], i = 0, n = group.length; i < n; i++) {
          if (node = group[i]) {
            transition = node[ns][id0];
            d3_transitionNode(node, i, ns, id1, {
              time: transition.time,
              ease: transition.ease,
              delay: transition.delay + transition.duration,
              duration: transition.duration
            });
          }
          subgroup.push(node);
        }
      }
      return d3_transition(subgroups, ns, id1);
    };
    function d3_transitionNamespace(name) {
      return name == null ? "__transition__" : "__transition_" + name + "__";
    }
    function d3_transitionNode(node, i, ns, id, inherit) {
      var lock = node[ns] || (node[ns] = {
        active: 0,
        count: 0
      }),
          transition = lock[id],
          time,
          timer,
          duration,
          ease,
          tweens;
      function schedule(elapsed) {
        var delay = transition.delay;
        timer.t = delay + time;
        if (delay <= elapsed) return start(elapsed - delay);
        timer.c = start;
      }
      function start(elapsed) {
        var activeId = lock.active,
            active = lock[activeId];
        if (active) {
          active.timer.c = null;
          active.timer.t = NaN;
          --lock.count;
          delete lock[activeId];
          active.event && active.event.interrupt.call(node, node.__data__, active.index);
        }
        for (var cancelId in lock) {
          if (+cancelId < id) {
            var cancel = lock[cancelId];
            cancel.timer.c = null;
            cancel.timer.t = NaN;
            --lock.count;
            delete lock[cancelId];
          }
        }
        timer.c = tick;
        d3_timer(function () {
          if (timer.c && tick(elapsed || 1)) {
            timer.c = null;
            timer.t = NaN;
          }
          return 1;
        }, 0, time);
        lock.active = id;
        transition.event && transition.event.start.call(node, node.__data__, i);
        tweens = [];
        transition.tween.forEach(function (key, value) {
          if (value = value.call(node, node.__data__, i)) {
            tweens.push(value);
          }
        });
        ease = transition.ease;
        duration = transition.duration;
      }
      function tick(elapsed) {
        var t = elapsed / duration,
            e = ease(t),
            n = tweens.length;
        while (n > 0) {
          tweens[--n].call(node, e);
        }
        if (t >= 1) {
          transition.event && transition.event.end.call(node, node.__data__, i);
          if (--lock.count) delete lock[id];else delete node[ns];
          return 1;
        }
      }
      if (!transition) {
        time = inherit.time;
        timer = d3_timer(schedule, 0, time);
        transition = lock[id] = {
          tween: new d3_Map(),
          time: time,
          timer: timer,
          delay: inherit.delay,
          duration: inherit.duration,
          ease: inherit.ease,
          index: i
        };
        inherit = null;
        ++lock.count;
      }
    }
    d3.svg.axis = function () {
      var scale = d3.scale.linear(),
          orient = d3_svg_axisDefaultOrient,
          innerTickSize = 6,
          outerTickSize = 6,
          tickPadding = 3,
          tickArguments_ = [10],
          tickValues = null,
          tickFormat_;
      function axis(g) {
        g.each(function () {
          var g = d3.select(this);
          var scale0 = this.__chart__ || scale,
              scale1 = this.__chart__ = scale.copy();
          var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues,
              tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_,
              tick = g.selectAll(".tick").data(ticks, scale1),
              tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε),
              tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(),
              tickUpdate = d3.transition(tick.order()).style("opacity", 1),
              tickSpacing = Math.max(innerTickSize, 0) + tickPadding,
              tickTransform;
          var range = d3_scaleRange(scale1),
              path = g.selectAll(".domain").data([0]),
              pathUpdate = (path.enter().append("path").attr("class", "domain"), d3.transition(path));
          tickEnter.append("line");
          tickEnter.append("text");
          var lineEnter = tickEnter.select("line"),
              lineUpdate = tickUpdate.select("line"),
              text = tick.select("text").text(tickFormat),
              textEnter = tickEnter.select("text"),
              textUpdate = tickUpdate.select("text"),
              sign = orient === "top" || orient === "left" ? -1 : 1,
              x1,
              x2,
              y1,
              y2;
          if (orient === "bottom" || orient === "top") {
            tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
            text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
            pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
          } else {
            tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
            text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
            pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
          }
          lineEnter.attr(y2, sign * innerTickSize);
          textEnter.attr(y1, sign * tickSpacing);
          lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
          textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
          if (scale1.rangeBand) {
            var x = scale1,
                dx = x.rangeBand() / 2;
            scale0 = scale1 = function scale1(d) {
              return x(d) + dx;
            };
          } else if (scale0.rangeBand) {
            scale0 = scale1;
          } else {
            tickExit.call(tickTransform, scale1, scale0);
          }
          tickEnter.call(tickTransform, scale0, scale1);
          tickUpdate.call(tickTransform, scale1, scale1);
        });
      }
      axis.scale = function (x) {
        if (!arguments.length) return scale;
        scale = x;
        return axis;
      };
      axis.orient = function (x) {
        if (!arguments.length) return orient;
        orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
        return axis;
      };
      axis.ticks = function () {
        if (!arguments.length) return tickArguments_;
        tickArguments_ = d3_array(arguments);
        return axis;
      };
      axis.tickValues = function (x) {
        if (!arguments.length) return tickValues;
        tickValues = x;
        return axis;
      };
      axis.tickFormat = function (x) {
        if (!arguments.length) return tickFormat_;
        tickFormat_ = x;
        return axis;
      };
      axis.tickSize = function (x) {
        var n = arguments.length;
        if (!n) return innerTickSize;
        innerTickSize = +x;
        outerTickSize = +arguments[n - 1];
        return axis;
      };
      axis.innerTickSize = function (x) {
        if (!arguments.length) return innerTickSize;
        innerTickSize = +x;
        return axis;
      };
      axis.outerTickSize = function (x) {
        if (!arguments.length) return outerTickSize;
        outerTickSize = +x;
        return axis;
      };
      axis.tickPadding = function (x) {
        if (!arguments.length) return tickPadding;
        tickPadding = +x;
        return axis;
      };
      axis.tickSubdivide = function () {
        return arguments.length && axis;
      };
      return axis;
    };
    var d3_svg_axisDefaultOrient = "bottom",
        d3_svg_axisOrients = {
      top: 1,
      right: 1,
      bottom: 1,
      left: 1
    };
    function d3_svg_axisX(selection, x0, x1) {
      selection.attr("transform", function (d) {
        var v0 = x0(d);
        return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
      });
    }
    function d3_svg_axisY(selection, y0, y1) {
      selection.attr("transform", function (d) {
        var v0 = y0(d);
        return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
      });
    }
    d3.svg.brush = function () {
      var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"),
          x = null,
          y = null,
          xExtent = [0, 0],
          yExtent = [0, 0],
          xExtentDomain,
          yExtentDomain,
          xClamp = true,
          yClamp = true,
          resizes = d3_svg_brushResizes[0];
      function brush(g) {
        g.each(function () {
          var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
          var background = g.selectAll(".background").data([0]);
          background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
          g.selectAll(".extent").data([0]).enter().append("rect").attr("class", "extent").style("cursor", "move");
          var resize = g.selectAll(".resize").data(resizes, d3_identity);
          resize.exit().remove();
          resize.enter().append("g").attr("class", function (d) {
            return "resize " + d;
          }).style("cursor", function (d) {
            return d3_svg_brushCursor[d];
          }).append("rect").attr("x", function (d) {
            return (/[ew]$/.test(d) ? -3 : null
            );
          }).attr("y", function (d) {
            return (/^[ns]/.test(d) ? -3 : null
            );
          }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
          resize.style("display", brush.empty() ? "none" : null);
          var gUpdate = d3.transition(g),
              backgroundUpdate = d3.transition(background),
              range;
          if (x) {
            range = d3_scaleRange(x);
            backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
            redrawX(gUpdate);
          }
          if (y) {
            range = d3_scaleRange(y);
            backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
            redrawY(gUpdate);
          }
          redraw(gUpdate);
        });
      }
      brush.event = function (g) {
        g.each(function () {
          var event_ = event.of(this, arguments),
              extent1 = {
            x: xExtent,
            y: yExtent,
            i: xExtentDomain,
            j: yExtentDomain
          },
              extent0 = this.__chart__ || extent1;
          this.__chart__ = extent1;
          if (d3_transitionInheritId) {
            d3.select(this).transition().each("start.brush", function () {
              xExtentDomain = extent0.i;
              yExtentDomain = extent0.j;
              xExtent = extent0.x;
              yExtent = extent0.y;
              event_({
                type: "brushstart"
              });
            }).tween("brush:brush", function () {
              var xi = d3_interpolateArray(xExtent, extent1.x),
                  yi = d3_interpolateArray(yExtent, extent1.y);
              xExtentDomain = yExtentDomain = null;
              return function (t) {
                xExtent = extent1.x = xi(t);
                yExtent = extent1.y = yi(t);
                event_({
                  type: "brush",
                  mode: "resize"
                });
              };
            }).each("end.brush", function () {
              xExtentDomain = extent1.i;
              yExtentDomain = extent1.j;
              event_({
                type: "brush",
                mode: "resize"
              });
              event_({
                type: "brushend"
              });
            });
          } else {
            event_({
              type: "brushstart"
            });
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          }
        });
      };
      function redraw(g) {
        g.selectAll(".resize").attr("transform", function (d) {
          return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
        });
      }
      function redrawX(g) {
        g.select(".extent").attr("x", xExtent[0]);
        g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
      }
      function redrawY(g) {
        g.select(".extent").attr("y", yExtent[0]);
        g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
      }
      function brushstart() {
        var target = this,
            eventTarget = d3.select(d3.event.target),
            event_ = event.of(target, arguments),
            g = d3.select(target),
            resizing = eventTarget.datum(),
            resizingX = !/^(n|s)$/.test(resizing) && x,
            resizingY = !/^(e|w)$/.test(resizing) && y,
            dragging = eventTarget.classed("extent"),
            dragRestore = d3_event_dragSuppress(target),
            center,
            origin = d3.mouse(target),
            offset;
        var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
        if (d3.event.changedTouches) {
          w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
        } else {
          w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
        }
        g.interrupt().selectAll("*").interrupt();
        if (dragging) {
          origin[0] = xExtent[0] - origin[0];
          origin[1] = yExtent[0] - origin[1];
        } else if (resizing) {
          var ex = +/w$/.test(resizing),
              ey = +/^n/.test(resizing);
          offset = [xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1]];
          origin[0] = xExtent[ex];
          origin[1] = yExtent[ey];
        } else if (d3.event.altKey) center = origin.slice();
        g.style("pointer-events", "none").selectAll(".resize").style("display", null);
        d3.select("body").style("cursor", eventTarget.style("cursor"));
        event_({
          type: "brushstart"
        });
        brushmove();
        function keydown() {
          if (d3.event.keyCode == 32) {
            if (!dragging) {
              center = null;
              origin[0] -= xExtent[1];
              origin[1] -= yExtent[1];
              dragging = 2;
            }
            d3_eventPreventDefault();
          }
        }
        function keyup() {
          if (d3.event.keyCode == 32 && dragging == 2) {
            origin[0] += xExtent[1];
            origin[1] += yExtent[1];
            dragging = 0;
            d3_eventPreventDefault();
          }
        }
        function brushmove() {
          var point = d3.mouse(target),
              moved = false;
          if (offset) {
            point[0] += offset[0];
            point[1] += offset[1];
          }
          if (!dragging) {
            if (d3.event.altKey) {
              if (!center) center = [(xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2];
              origin[0] = xExtent[+(point[0] < center[0])];
              origin[1] = yExtent[+(point[1] < center[1])];
            } else center = null;
          }
          if (resizingX && move1(point, x, 0)) {
            redrawX(g);
            moved = true;
          }
          if (resizingY && move1(point, y, 1)) {
            redrawY(g);
            moved = true;
          }
          if (moved) {
            redraw(g);
            event_({
              type: "brush",
              mode: dragging ? "move" : "resize"
            });
          }
        }
        function move1(point, scale, i) {
          var range = d3_scaleRange(scale),
              r0 = range[0],
              r1 = range[1],
              position = origin[i],
              extent = i ? yExtent : xExtent,
              size = extent[1] - extent[0],
              min,
              max;
          if (dragging) {
            r0 -= position;
            r1 -= size + position;
          }
          min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
          if (dragging) {
            max = (min += position) + size;
          } else {
            if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
            if (position < min) {
              max = min;
              min = position;
            } else {
              max = position;
            }
          }
          if (extent[0] != min || extent[1] != max) {
            if (i) yExtentDomain = null;else xExtentDomain = null;
            extent[0] = min;
            extent[1] = max;
            return true;
          }
        }
        function brushend() {
          brushmove();
          g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
          d3.select("body").style("cursor", null);
          w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
          dragRestore();
          event_({
            type: "brushend"
          });
        }
      }
      brush.x = function (z) {
        if (!arguments.length) return x;
        x = z;
        resizes = d3_svg_brushResizes[!x << 1 | !y];
        return brush;
      };
      brush.y = function (z) {
        if (!arguments.length) return y;
        y = z;
        resizes = d3_svg_brushResizes[!x << 1 | !y];
        return brush;
      };
      brush.clamp = function (z) {
        if (!arguments.length) return x && y ? [xClamp, yClamp] : x ? xClamp : y ? yClamp : null;
        if (x && y) xClamp = !!z[0], yClamp = !!z[1];else if (x) xClamp = !!z;else if (y) yClamp = !!z;
        return brush;
      };
      brush.extent = function (z) {
        var x0, x1, y0, y1, t;
        if (!arguments.length) {
          if (x) {
            if (xExtentDomain) {
              x0 = xExtentDomain[0], x1 = xExtentDomain[1];
            } else {
              x0 = xExtent[0], x1 = xExtent[1];
              if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
              if (x1 < x0) t = x0, x0 = x1, x1 = t;
            }
          }
          if (y) {
            if (yExtentDomain) {
              y0 = yExtentDomain[0], y1 = yExtentDomain[1];
            } else {
              y0 = yExtent[0], y1 = yExtent[1];
              if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
              if (y1 < y0) t = y0, y0 = y1, y1 = t;
            }
          }
          return x && y ? [[x0, y0], [x1, y1]] : x ? [x0, x1] : y && [y0, y1];
        }
        if (x) {
          x0 = z[0], x1 = z[1];
          if (y) x0 = x0[0], x1 = x1[0];
          xExtentDomain = [x0, x1];
          if (x.invert) x0 = x(x0), x1 = x(x1);
          if (x1 < x0) t = x0, x0 = x1, x1 = t;
          if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [x0, x1];
        }
        if (y) {
          y0 = z[0], y1 = z[1];
          if (x) y0 = y0[1], y1 = y1[1];
          yExtentDomain = [y0, y1];
          if (y.invert) y0 = y(y0), y1 = y(y1);
          if (y1 < y0) t = y0, y0 = y1, y1 = t;
          if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [y0, y1];
        }
        return brush;
      };
      brush.clear = function () {
        if (!brush.empty()) {
          xExtent = [0, 0], yExtent = [0, 0];
          xExtentDomain = yExtentDomain = null;
        }
        return brush;
      };
      brush.empty = function () {
        return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
      };
      return d3.rebind(brush, event, "on");
    };
    var d3_svg_brushCursor = {
      n: "ns-resize",
      e: "ew-resize",
      s: "ns-resize",
      w: "ew-resize",
      nw: "nwse-resize",
      ne: "nesw-resize",
      se: "nwse-resize",
      sw: "nesw-resize"
    };
    var d3_svg_brushResizes = [["n", "e", "s", "w", "nw", "ne", "se", "sw"], ["e", "w"], ["n", "s"], []];
    var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
    var d3_time_formatUtc = d3_time_format.utc;
    var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
    d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
    function d3_time_formatIsoNative(date) {
      return date.toISOString();
    }
    d3_time_formatIsoNative.parse = function (string) {
      var date = new Date(string);
      return isNaN(date) ? null : date;
    };
    d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
    d3_time.second = d3_time_interval(function (date) {
      return new d3_date(Math.floor(date / 1e3) * 1e3);
    }, function (date, offset) {
      date.setTime(date.getTime() + Math.floor(offset) * 1e3);
    }, function (date) {
      return date.getSeconds();
    });
    d3_time.seconds = d3_time.second.range;
    d3_time.seconds.utc = d3_time.second.utc.range;
    d3_time.minute = d3_time_interval(function (date) {
      return new d3_date(Math.floor(date / 6e4) * 6e4);
    }, function (date, offset) {
      date.setTime(date.getTime() + Math.floor(offset) * 6e4);
    }, function (date) {
      return date.getMinutes();
    });
    d3_time.minutes = d3_time.minute.range;
    d3_time.minutes.utc = d3_time.minute.utc.range;
    d3_time.hour = d3_time_interval(function (date) {
      var timezone = date.getTimezoneOffset() / 60;
      return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
    }, function (date, offset) {
      date.setTime(date.getTime() + Math.floor(offset) * 36e5);
    }, function (date) {
      return date.getHours();
    });
    d3_time.hours = d3_time.hour.range;
    d3_time.hours.utc = d3_time.hour.utc.range;
    d3_time.month = d3_time_interval(function (date) {
      date = d3_time.day(date);
      date.setDate(1);
      return date;
    }, function (date, offset) {
      date.setMonth(date.getMonth() + offset);
    }, function (date) {
      return date.getMonth();
    });
    d3_time.months = d3_time.month.range;
    d3_time.months.utc = d3_time.month.utc.range;
    function d3_time_scale(linear, methods, format) {
      function scale(x) {
        return linear(x);
      }
      scale.invert = function (x) {
        return d3_time_scaleDate(linear.invert(x));
      };
      scale.domain = function (x) {
        if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
        linear.domain(x);
        return scale;
      };
      function tickMethod(extent, count) {
        var span = extent[1] - extent[0],
            target = span / count,
            i = d3.bisect(d3_time_scaleSteps, target);
        return i == d3_time_scaleSteps.length ? [methods.year, d3_scale_linearTickRange(extent.map(function (d) {
          return d / 31536e6;
        }), count)[2]] : !i ? [d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2]] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
      }
      scale.nice = function (interval, skip) {
        var domain = scale.domain(),
            extent = d3_scaleExtent(domain),
            method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
        if (method) interval = method[0], skip = method[1];
        function skipped(date) {
          return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
        }
        return scale.domain(d3_scale_nice(domain, skip > 1 ? {
          floor: function floor(date) {
            while (skipped(date = interval.floor(date))) {
              date = d3_time_scaleDate(date - 1);
            }return date;
          },
          ceil: function ceil(date) {
            while (skipped(date = interval.ceil(date))) {
              date = d3_time_scaleDate(+date + 1);
            }return date;
          }
        } : interval));
      };
      scale.ticks = function (interval, skip) {
        var extent = d3_scaleExtent(scale.domain()),
            method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [{
          range: interval
        }, skip];
        if (method) interval = method[0], skip = method[1];
        return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
      };
      scale.tickFormat = function () {
        return format;
      };
      scale.copy = function () {
        return d3_time_scale(linear.copy(), methods, format);
      };
      return d3_scale_linearRebind(scale, linear);
    }
    function d3_time_scaleDate(t) {
      return new Date(t);
    }
    var d3_time_scaleSteps = [1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6];
    var d3_time_scaleLocalMethods = [[d3_time.second, 1], [d3_time.second, 5], [d3_time.second, 15], [d3_time.second, 30], [d3_time.minute, 1], [d3_time.minute, 5], [d3_time.minute, 15], [d3_time.minute, 30], [d3_time.hour, 1], [d3_time.hour, 3], [d3_time.hour, 6], [d3_time.hour, 12], [d3_time.day, 1], [d3_time.day, 2], [d3_time.week, 1], [d3_time.month, 1], [d3_time.month, 3], [d3_time.year, 1]];
    var d3_time_scaleLocalFormat = d3_time_format.multi([[".%L", function (d) {
      return d.getMilliseconds();
    }], [":%S", function (d) {
      return d.getSeconds();
    }], ["%I:%M", function (d) {
      return d.getMinutes();
    }], ["%I %p", function (d) {
      return d.getHours();
    }], ["%a %d", function (d) {
      return d.getDay() && d.getDate() != 1;
    }], ["%b %d", function (d) {
      return d.getDate() != 1;
    }], ["%B", function (d) {
      return d.getMonth();
    }], ["%Y", d3_true]]);
    var d3_time_scaleMilliseconds = {
      range: function range(start, stop, step) {
        return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
      },
      floor: d3_identity,
      ceil: d3_identity
    };
    d3_time_scaleLocalMethods.year = d3_time.year;
    d3_time.scale = function () {
      return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
    };
    var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function (m) {
      return [m[0].utc, m[1]];
    });
    var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([[".%L", function (d) {
      return d.getUTCMilliseconds();
    }], [":%S", function (d) {
      return d.getUTCSeconds();
    }], ["%I:%M", function (d) {
      return d.getUTCMinutes();
    }], ["%I %p", function (d) {
      return d.getUTCHours();
    }], ["%a %d", function (d) {
      return d.getUTCDay() && d.getUTCDate() != 1;
    }], ["%b %d", function (d) {
      return d.getUTCDate() != 1;
    }], ["%B", function (d) {
      return d.getUTCMonth();
    }], ["%Y", d3_true]]);
    d3_time_scaleUtcMethods.year = d3_time.year.utc;
    d3_time.scale.utc = function () {
      return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
    };
    d3.text = d3_xhrType(function (request) {
      return request.responseText;
    });
    d3.json = function (url, callback) {
      return d3_xhr(url, "application/json", d3_json, callback);
    };
    function d3_json(request) {
      return JSON.parse(request.responseText);
    }
    d3.html = function (url, callback) {
      return d3_xhr(url, "text/html", d3_html, callback);
    };
    function d3_html(request) {
      var range = d3_document.createRange();
      range.selectNode(d3_document.body);
      return range.createContextualFragment(request.responseText);
    }
    d3.xml = d3_xhrType(function (request) {
      return request.responseXML;
    });
    if (typeof undefined === "function" && undefined.amd) this.d3 = d3, undefined(d3);else if ('object' === "object" && module.exports) module.exports = d3;else this.d3 = d3;
  }();
});

__$styleInject(".action-header {\n  text-align:center;\n  font-size:16px;\n  font-weight:bold;\n  padding:10px;\n}\n\n.url-depth, .kw-depth {\n  width:50%;\n  display:inline-block;\n}\n", undefined);

exports.allbuckets = [];
var hourbuckets = d3$1.range(0, 24).map(function (x) {
  return String(x).length > 1 ? String(x) : "0" + x;
});

var minutes = [0, 20, 40];
var buckets = d3$1.range(0, 24).reduce(function (p, c) {
  minutes.map(function (x) {
    p[c + ":" + x] = 0;
  });
  exports.allbuckets = exports.allbuckets.concat(minutes.map(function (z) {
    return c + ":" + z;
  }));
  return p;
}, {});

var STOPWORDS = ["that", "this", "what", "best", "most", "from", "your", "have", "first", "will", "than", "says", "like", "into", "after", "with"];

function rawToUrl(data) {
  return data.reduce(function (p, c) {
    p[c.url] = p[c.url] || Object.assign({}, buckets);
    p[c.url][c.hour] = (p[c.url][c.hour] || 0) + c.count;
    return p;
  }, {});
}

function urlToDraw(urls) {
  var obj = {};
  Object.keys(urls).map(function (k) {
    obj[k] = hourbuckets.map(function (b) {
      return urls[k][b] || 0;
    });
  });

  return d3$1.entries(obj).map(function (x) {
    x.url = x.key;
    x.total = d3$1.sum(x.value);
    return x;
  });
}

function drawToKeyword(draw, split) {
  var obj = draw.reduce(function (p, c) {
    c.key.toLowerCase().split(split)[1].split("/").reverse()[0].replace("_", "-").split("-").map(function (x) {
      var values = STOPWORDS;
      if (x.match(/\d+/g) == null && values.indexOf(x) == -1 && x.indexOf(",") == -1 && x.indexOf("?") == -1 && x.indexOf(".") == -1 && x.indexOf(":") == -1 && parseInt(x) != x && x.length > 3) {
        p[x] = p[x] || {};
        Object.keys(c.value).map(function (q) {
          p[x][q] = (p[x][q] || 0) + (c.value[q] || 0);
        });
      }
    });

    return p;
  }, {});

  return d3$1.entries(obj).map(function (x) {
    x.values = Object.keys(x.value).map(function (z) {
      return x.value[z] || 0;
    });
    x.total = d3$1.sum(x.values);
    return x;
  });
}

function domain_expanded(target) {
  return new DomainExpanded(target);
}

var DomainExpanded = function (_D3ComponentBase) {
  inherits(DomainExpanded, _D3ComponentBase);

  function DomainExpanded(target) {
    classCallCheck(this, DomainExpanded);

    var _this = possibleConstructorReturn(this, (DomainExpanded.__proto__ || Object.getPrototypeOf(DomainExpanded)).call(this));

    _this._target = target;
    return _this;
  }

  createClass(DomainExpanded, [{
    key: 'props',
    value: function props() {
      return ["raw", "data", "urls", "domain"];
    }
  }, {
    key: 'draw',
    value: function draw() {
      var td = this._target;

      d3_class(td, "action-header").text("Explore and Refine");

      var urlData = rawToUrl(this.raw());
      var to_draw = urlToDraw(urlData);
      var kw_to_draw = drawToKeyword(to_draw, this.domain());

      tabular_timeseries(d3_class(td, "url-depth")).label("URL").data(to_draw).split(this.domain()).on("stage-filter", this.on("stage-filter")).draw();

      tabular_timeseries(d3_class(td, "kw-depth")).label("Keywords").data(kw_to_draw).on("stage-filter", this.on("stage-filter")).draw();
    }
  }]);
  return DomainExpanded;
}(D3ComponentBase);

__$styleInject(".vertical-options {\n  width:120px;\n  text-align:center;\n}\n\n.vertical-options .show-button {\n  line-height:18px;\n  width:100px;\n  font-size:10px;\n  margin-bottom:5px;\n}\n.vertical-options .show-button.selected {\n  background: #e3ebf0;  \n  color: #555;\n}\n", undefined);

function vertical_option(target) {
  return new VerticalOption(target);
}

//[{key, value, selected},...]

var VerticalOption = function (_D3ComponentBase) {
  inherits(VerticalOption, _D3ComponentBase);

  function VerticalOption(target) {
    classCallCheck(this, VerticalOption);

    var _this = possibleConstructorReturn(this, (VerticalOption.__proto__ || Object.getPrototypeOf(VerticalOption)).call(this));

    _this._target = target;
    _this._options = [];
    _this._wrapper_class = "vertical-options";
    return _this;
  }

  createClass(VerticalOption, [{
    key: 'props',
    value: function props() {
      return ["options", "wrapper_class"];
    }
  }, {
    key: 'draw',
    value: function draw() {
      var opts = d3_class(this._target, this.wrapper_class(), "div", this.options());

      d3_splat(opts, ".show-button", "a", this.options(), function (x) {
        return x.key;
      }).classed("show-button", true).classed("selected", function (x) {
        return x.selected;
      }).text(function (x) {
        return x.key;
      }).on("click", this.on("click"));

      return this;
    }
  }]);
  return VerticalOption;
}(D3ComponentBase);

var version = "0.0.3";

exports.version = version;
exports.tabular_timeseries = tabular_timeseries;
exports.hourbuckets = hourbuckets;
exports.buckets = buckets;
exports.STOPWORDS = STOPWORDS;
exports.domain_expanded = domain_expanded;
exports.vertical_option = vertical_option;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvaGVscGVycy9pbmRleC5qcyIsIi4uL3NyYy90YWJ1bGFyX3RpbWVzZXJpZXMvaGVhZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0L2J1aWxkL2NoYXJ0LmVzLmpzIiwiLi4vc3JjL3RhYnVsYXJfdGltZXNlcmllcy9ib2R5LmpzIiwiLi4vc3JjL3RhYnVsYXJfdGltZXNlcmllcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kMy9kMy5qcyIsIi4uL3NyYy9kb21haW5fZXhwYW5kZWQuanMiLCIuLi9zcmMvdmVydGljYWxfb3B0aW9uLmpzIiwiYnVuZGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBkM191cGRhdGVhYmxlID0gZnVuY3Rpb24odGFyZ2V0LHNlbGVjdG9yLHR5cGUsZGF0YSxqb2luZXIpIHtcbiAgdmFyIHR5cGUgPSB0eXBlIHx8IFwiZGl2XCJcbiAgdmFyIHVwZGF0ZWFibGUgPSB0YXJnZXQuc2VsZWN0QWxsKHNlbGVjdG9yKS5kYXRhKFxuICAgIGZ1bmN0aW9uKHgpe3JldHVybiBkYXRhID8gW2RhdGFdIDogW3hdfSxcbiAgICBqb2luZXIgfHwgZnVuY3Rpb24oeCl7cmV0dXJuIFt4XX1cbiAgKVxuXG4gIHVwZGF0ZWFibGUuZW50ZXIoKVxuICAgIC5hcHBlbmQodHlwZSlcblxuICByZXR1cm4gdXBkYXRlYWJsZVxufVxuXG5leHBvcnQgY29uc3QgZDNfc3BsYXQgPSBmdW5jdGlvbih0YXJnZXQsc2VsZWN0b3IsdHlwZSxkYXRhLGpvaW5lcikge1xuICB2YXIgdHlwZSA9IHR5cGUgfHwgXCJkaXZcIlxuICB2YXIgdXBkYXRlYWJsZSA9IHRhcmdldC5zZWxlY3RBbGwoc2VsZWN0b3IpLmRhdGEoXG4gICAgZGF0YSB8fCBmdW5jdGlvbih4KXtyZXR1cm4geH0sXG4gICAgam9pbmVyIHx8IGZ1bmN0aW9uKHgpe3JldHVybiB4fVxuICApXG5cbiAgdXBkYXRlYWJsZS5lbnRlcigpXG4gICAgLmFwcGVuZCh0eXBlKVxuXG4gIHJldHVybiB1cGRhdGVhYmxlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkM19jbGFzcyh0YXJnZXQsY2xzLHR5cGUsZGF0YSkge1xuICByZXR1cm4gZDNfdXBkYXRlYWJsZSh0YXJnZXQsXCIuXCIgKyBjbHMsIHR5cGUgfHwgXCJkaXZcIixkYXRhKVxuICAgIC5jbGFzc2VkKGNscyx0cnVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9vcCgpIHt9XG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkgeyByZXR1cm4geCB9XG5leHBvcnQgZnVuY3Rpb24ga2V5KHgpIHsgcmV0dXJuIHgua2V5IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGFjY2Vzc29yKGF0dHIsIHZhbCkge1xuICBpZiAodmFsID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzW1wiX1wiICsgYXR0cl1cbiAgdGhpc1tcIl9cIiArIGF0dHJdID0gdmFsXG4gIHJldHVybiB0aGlzXG59XG5cbmV4cG9ydCBjbGFzcyBEM0NvbXBvbmVudEJhc2Uge1xuICBjb25zdHJ1Y3Rvcih0YXJnZXQpIHtcbiAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXRcbiAgICB0aGlzLl9vbiA9IHt9XG4gICAgdGhpcy5wcm9wcygpLm1hcCh4ID0+IHtcbiAgICAgIHRoaXNbeF0gPSBhY2Nlc3Nvci5iaW5kKHRoaXMseClcbiAgICB9KVxuICB9XG4gIHByb3BzKCkge1xuICAgIHJldHVybiBbXCJkYXRhXCJdXG4gIH1cbiAgb24oYWN0aW9uLGZuKSB7XG4gICAgaWYgKGZuID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLl9vblthY3Rpb25dIHx8IG5vb3A7XG4gICAgdGhpcy5fb25bYWN0aW9uXSA9IGZuO1xuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cbiIsImltcG9ydCB7ZDNfY2xhc3MsIGQzX3NwbGF0LCBkM191cGRhdGVhYmxlLCBEM0NvbXBvbmVudEJhc2V9IGZyb20gJ2hlbHBlcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYnVsYXJIZWFkZXIgZXh0ZW5kcyBEM0NvbXBvbmVudEJhc2Uge1xuICBjb25zdHJ1Y3Rvcih0YXJnZXQpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0XG4gICAgdGhpcy5XSURUSCA9IDE0NFxuICAgIHRoaXMuX2xhYmVsID0gXCJVUkxcIlxuICAgIHRoaXMuX2hlYWRlcnMgPSBbXCIxMmFtXCIsIFwiMTJwbVwiLCBcIjEyYW1cIl1cbiAgICB0aGlzLl94cyA9IFswLHRoaXMuV0lEVEgvMix0aGlzLldJRFRIXVxuICAgIHRoaXMuX2FuY2hvcnMgPSBbXCJzdGFydFwiLFwibWlkZGxlXCIsXCJlbmRcIl1cbiAgfVxuXG4gIHByb3BzKCkgeyByZXR1cm4gW1wibGFiZWxcIixcImhlYWRlcnNcIl0gfVxuXG4gIGRyYXcoKSB7XG5cbiAgICB2YXIgZXVoID0gZDNfY2xhc3ModGhpcy5fdGFyZ2V0LFwiZXhwYW5zaW9uLXVybHMtdGl0bGVcIilcblxuICAgIGQzX2NsYXNzKGV1aCxcInRpdGxlXCIpLnRleHQodGhpcy5sYWJlbCgpKVxuICAgIGQzX2NsYXNzKGV1aCxcInZpZXdcIikudGV4dChcIlZpZXdzXCIpXG5cbiAgICB2YXIgc3ZnX2xlZ2VuZCA9IGQzX2NsYXNzKGV1aCxcImxlZ2VuZFwiLFwic3ZnXCIpXG5cbiAgICBpZiAodGhpcy5oZWFkZXJzKCkubGVuZ3RoID09IDIpIHtcbiAgICAgIHRoaXMuX3hzID0gW3RoaXMuV0lEVEgvMi10aGlzLldJRFRILzQsdGhpcy5XSURUSC8yK3RoaXMuV0lEVEgvNF1cbiAgICAgIHRoaXMuX2FuY2hvcnMgPSBbXCJtaWRkbGVcIixcIm1pZGRsZVwiXVxuICAgIH1cblxuICAgIGQzX3NwbGF0KHN2Z19sZWdlbmQsXCJ0ZXh0XCIsXCJ0ZXh0XCIsdGhpcy5oZWFkZXJzKCksKHgsaSkgPT4geyByZXR1cm4gaSB9KVxuICAgICAgLmF0dHIoXCJ5XCIsXCIyMFwiKVxuICAgICAgLmF0dHIoXCJ4XCIsKHgsaSkgPT4gdGhpcy5feHNbaV0pXG4gICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCh4LGkpID0+IHRoaXMuX2FuY2hvcnNbaV0pXG4gICAgICAudGV4dChTdHJpbmcpXG5cbiAgICBkM19zcGxhdChzdmdfbGVnZW5kLFwibGluZVwiLFwibGluZVwiLHRoaXMuaGVhZGVycygpLCh4LGkpID0+IHsgcmV0dXJuIGkgfSlcbiAgICAgIC5zdHlsZShcInN0cm9rZS1kYXNoYXJyYXlcIiwgXCIxLDVcIilcbiAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsMSlcbiAgICAgIC5hdHRyKFwic3Ryb2tlXCIsXCJibGFja1wiKVxuICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLmhlYWRlcnMoKS5sZW5ndGggPT0gMiA/IDAgOiAyNSlcbiAgICAgIC5hdHRyKFwieTJcIiwgMzUpXG4gICAgICAuYXR0cihcIngxXCIsKHgsaSkgPT4gdGhpcy5oZWFkZXJzKCkubGVuZ3RoID09IDIgPyB0aGlzLldJRFRILzIgOiB0aGlzLl94c1tpXSlcbiAgICAgIC5hdHRyKFwieDJcIiwoeCxpKSA9PiB0aGlzLmhlYWRlcnMoKS5sZW5ndGggPT0gMiA/IHRoaXMuV0lEVEgvMiA6IHRoaXMuX3hzW2ldKVxuXG4gIH1cbn1cbiIsImZ1bmN0aW9uIF9fJHN0eWxlSW5qZWN0KGNzcywgcmV0dXJuVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cbiAgY3NzID0gY3NzIHx8ICcnO1xuICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICBcbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpe1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxuICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIGNsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIGQzX3VwZGF0ZWFibGUgPSBmdW5jdGlvbiBkM191cGRhdGVhYmxlKHRhcmdldCwgc2VsZWN0b3IsIHR5cGUsIGRhdGEsIGpvaW5lcikge1xuICB2YXIgdHlwZSA9IHR5cGUgfHwgXCJkaXZcIjtcbiAgdmFyIHVwZGF0ZWFibGUgPSB0YXJnZXQuc2VsZWN0QWxsKHNlbGVjdG9yKS5kYXRhKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGRhdGEgPyBbZGF0YV0gOiBbeF07XG4gIH0sIGpvaW5lciB8fCBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBbeF07XG4gIH0pO1xuXG4gIHVwZGF0ZWFibGUuZW50ZXIoKS5hcHBlbmQodHlwZSk7XG5cbiAgcmV0dXJuIHVwZGF0ZWFibGU7XG59O1xuXG52YXIgZDNfc3BsYXQgPSBmdW5jdGlvbiBkM19zcGxhdCh0YXJnZXQsIHNlbGVjdG9yLCB0eXBlLCBkYXRhLCBqb2luZXIpIHtcbiAgdmFyIHR5cGUgPSB0eXBlIHx8IFwiZGl2XCI7XG4gIHZhciB1cGRhdGVhYmxlID0gdGFyZ2V0LnNlbGVjdEFsbChzZWxlY3RvcikuZGF0YShkYXRhIHx8IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0sIGpvaW5lciB8fCBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB4O1xuICB9KTtcblxuICB1cGRhdGVhYmxlLmVudGVyKCkuYXBwZW5kKHR5cGUpO1xuXG4gIHJldHVybiB1cGRhdGVhYmxlO1xufTtcblxuZnVuY3Rpb24gZDNfY2xhc3ModGFyZ2V0LCBjbHMsIHR5cGUsIGRhdGEpIHtcbiAgcmV0dXJuIGQzX3VwZGF0ZWFibGUodGFyZ2V0LCBcIi5cIiArIGNscywgdHlwZSB8fCBcImRpdlwiLCBkYXRhKS5jbGFzc2VkKGNscywgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZnVuY3Rpb24gYWNjZXNzb3IoYXR0ciwgdmFsKSB7XG4gIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXNbXCJfXCIgKyBhdHRyXTtcbiAgdGhpc1tcIl9cIiArIGF0dHJdID0gdmFsO1xuICByZXR1cm4gdGhpcztcbn1cblxudmFyIEQzQ29tcG9uZW50QmFzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRDNDb21wb25lbnRCYXNlKHRhcmdldCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBEM0NvbXBvbmVudEJhc2UpO1xuXG4gICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMuX29uID0ge307XG4gICAgdGhpcy5wcm9wcygpLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgX3RoaXNbeF0gPSBhY2Nlc3Nvci5iaW5kKF90aGlzLCB4KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKEQzQ29tcG9uZW50QmFzZSwgW3tcbiAgICBrZXk6IFwicHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvcHMoKSB7XG4gICAgICByZXR1cm4gW1wiZGF0YVwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oYWN0aW9uLCBmbikge1xuICAgICAgaWYgKGZuID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLl9vblthY3Rpb25dIHx8IG5vb3A7XG4gICAgICB0aGlzLl9vblthY3Rpb25dID0gZm47XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEQzQ29tcG9uZW50QmFzZTtcbn0oKTtcblxuZnVuY3Rpb24gc2ltcGxlVGltZXNlcmllcyh0YXJnZXQsIGRhdGEsIHcsIGgsIG1pbikge1xuICB2YXIgd2lkdGggPSB3IHx8IDEyMCxcbiAgICAgIGhlaWdodCA9IGggfHwgMzA7XG5cbiAgdmFyIHggPSBkMy5zY2FsZS5vcmRpbmFsKCkuZG9tYWluKGQzLnJhbmdlKDAsIGRhdGEubGVuZ3RoKSkucmFuZ2UoZDMucmFuZ2UoMCwgd2lkdGgsIHdpZHRoIC8gZGF0YS5sZW5ndGgpKTtcbiAgdmFyIHkgPSBkMy5zY2FsZS5saW5lYXIoKS5yYW5nZShbNCwgaGVpZ2h0XSkuZG9tYWluKFttaW4gfHwgZDMubWluKGRhdGEpLCBkMy5tYXgoZGF0YSldKTtcblxuICB2YXIgd3JhcCA9IGQzX3VwZGF0ZWFibGUodGFyZ2V0LCBcImdcIiwgXCJnXCIsIGRhdGEsIGZ1bmN0aW9uICh4LCBpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0pO1xuXG4gIGQzX3NwbGF0KHdyYXAsIFwicmVjdFwiLCBcInJlY3RcIiwgZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geDtcbiAgfSwgZnVuY3Rpb24gKHgsIGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuYXR0cihcInhcIiwgZnVuY3Rpb24gKHosIGkpIHtcbiAgICByZXR1cm4geChpKTtcbiAgfSkuYXR0cihcIndpZHRoXCIsIHdpZHRoIC8gZGF0YS5sZW5ndGggLSAxLjIpLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uICh6KSB7XG4gICAgcmV0dXJuIGhlaWdodCAtIHkoeik7XG4gIH0pLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24gKHopIHtcbiAgICByZXR1cm4geiA/IHkoeikgOiAwO1xuICB9KTtcblxuICByZXR1cm4gd3JhcDtcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrJDEgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzJDEgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxuXG5cblxuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59O1xuXG5mdW5jdGlvbiBiZWZvcmVfYWZ0ZXJfdGltZXNlcmllcyh0YXJnZXQpIHtcbiAgcmV0dXJuIG5ldyBCZWZvcmVBZnRlclRpbWVzZXJpZXModGFyZ2V0KTtcbn1cblxudmFyIEJlZm9yZUFmdGVyVGltZXNlcmllcyA9IGZ1bmN0aW9uIChfRDNDb21wb25lbnRCYXNlKSB7XG4gIGluaGVyaXRzKEJlZm9yZUFmdGVyVGltZXNlcmllcywgX0QzQ29tcG9uZW50QmFzZSk7XG5cbiAgZnVuY3Rpb24gQmVmb3JlQWZ0ZXJUaW1lc2VyaWVzKHRhcmdldCkge1xuICAgIGNsYXNzQ2FsbENoZWNrJDEodGhpcywgQmVmb3JlQWZ0ZXJUaW1lc2VyaWVzKTtcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJlZm9yZUFmdGVyVGltZXNlcmllcy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJlZm9yZUFmdGVyVGltZXNlcmllcykpLmNhbGwodGhpcywgdGFyZ2V0KSk7XG5cbiAgICBfdGhpcy5fd3JhcHBlcl9jbGFzcyA9IFwiYmEtdGltZXNlcmllcy13cmFwXCI7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MkMShCZWZvcmVBZnRlclRpbWVzZXJpZXMsIFt7XG4gICAga2V5OiAncHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9wcygpIHtcbiAgICAgIHJldHVybiBbXCJkYXRhXCIsIFwiYmVmb3JlXCIsIFwiYWZ0ZXJcIiwgXCJ3cmFwcGVyX2NsYXNzXCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RyYXcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3KCkge1xuXG4gICAgICB2YXIgdHN3ID0gMjUwLFxuICAgICAgICAgIHVuaXRfc2l6ZSA9IHRzdyAvIHRoaXMuZGF0YSgpLmxlbmd0aCxcbiAgICAgICAgICBiZWZvcmVfcG9zID0gdGhpcy5iZWZvcmUoKSxcbiAgICAgICAgICBhZnRlcl9wb3MgPSB0aGlzLmFmdGVyKCk7XG5cbiAgICAgIHZhciB0aW1lc2VyaWVzID0gZDNfY2xhc3ModGhpcy5fdGFyZ2V0LCB0aGlzLndyYXBwZXJfY2xhc3MoKSwgXCJzdmdcIikuc3R5bGUoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIikuc3R5bGUoXCJtYXJnaW5cIiwgXCJhdXRvXCIpLnN0eWxlKFwibWFyZ2luLWJvdHRvbVwiLCBcIjMwcHhcIikuYXR0cihcIndpZHRoXCIsIHRzdyArIFwicHhcIikuYXR0cihcImhlaWdodFwiLCBcIjcwcHhcIik7XG5cbiAgICAgIHNpbXBsZVRpbWVzZXJpZXModGltZXNlcmllcywgdGhpcy5kYXRhKCksIHRzdyk7XG5cbiAgICAgIC8vIGFkZCBkZWNvcmF0aW9uc1xuXG4gICAgICBkM19jbGFzcyh0aW1lc2VyaWVzLCBcIm1pZGRsZVwiLCBcImxpbmVcIikuc3R5bGUoXCJzdHJva2UtZGFzaGFycmF5XCIsIFwiMSw1XCIpLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSkuYXR0cihcInN0cm9rZVwiLCBcImJsYWNrXCIpLmF0dHIoXCJ5MVwiLCAwKS5hdHRyKFwieTJcIiwgNTUpLmF0dHIoXCJ4MVwiLCB0c3cgLyAyKS5hdHRyKFwieDJcIiwgdHN3IC8gMik7XG5cbiAgICAgIGQzX2NsYXNzKHRpbWVzZXJpZXMsIFwibWlkZGxlLXRleHRcIiwgXCJ0ZXh0XCIpLmF0dHIoXCJ4XCIsIHRzdyAvIDIpLmF0dHIoXCJ5XCIsIDY3KS5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpLnRleHQoXCJPbi1zaXRlXCIpO1xuXG4gICAgICBkM19jbGFzcyh0aW1lc2VyaWVzLCBcImJlZm9yZVwiLCBcImxpbmVcIikuc3R5bGUoXCJzdHJva2UtZGFzaGFycmF5XCIsIFwiMSw1XCIpLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSkuYXR0cihcInN0cm9rZVwiLCBcImJsYWNrXCIpLmF0dHIoXCJ5MVwiLCAzOSkuYXR0cihcInkyXCIsIDQ1KS5hdHRyKFwieDFcIiwgdW5pdF9zaXplICogYmVmb3JlX3BvcykuYXR0cihcIngyXCIsIHVuaXRfc2l6ZSAqIGJlZm9yZV9wb3MpO1xuXG4gICAgICBkM19jbGFzcyh0aW1lc2VyaWVzLCBcImJlZm9yZS10ZXh0XCIsIFwidGV4dFwiKS5hdHRyKFwieFwiLCB1bml0X3NpemUgKiBiZWZvcmVfcG9zIC0gOCkuYXR0cihcInlcIiwgNDgpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIikudGV4dChcIkNvbnNpZGVyYXRpb25cIik7XG5cbiAgICAgIGQzX2NsYXNzKHRpbWVzZXJpZXMsIFwid2luZG93XCIsIFwibGluZVwiKS5zdHlsZShcInN0cm9rZS1kYXNoYXJyYXlcIiwgXCIxLDVcIikuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKS5hdHRyKFwic3Ryb2tlXCIsIFwiYmxhY2tcIikuYXR0cihcInkxXCIsIDQ1KS5hdHRyKFwieTJcIiwgNDUpLmF0dHIoXCJ4MVwiLCB1bml0X3NpemUgKiBiZWZvcmVfcG9zKS5hdHRyKFwieDJcIiwgdW5pdF9zaXplICogKGFmdGVyX3BvcyArIDEpICsgMSk7XG5cbiAgICAgIGQzX2NsYXNzKHRpbWVzZXJpZXMsIFwiYWZ0ZXJcIiwgXCJsaW5lXCIpLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLCBcIjEsNVwiKS5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKS5hdHRyKFwieTFcIiwgMzkpLmF0dHIoXCJ5MlwiLCA0NSkuYXR0cihcIngxXCIsIHVuaXRfc2l6ZSAqIChhZnRlcl9wb3MgKyAxKSkuYXR0cihcIngyXCIsIHVuaXRfc2l6ZSAqIChhZnRlcl9wb3MgKyAxKSk7XG5cbiAgICAgIGQzX2NsYXNzKHRpbWVzZXJpZXMsIFwiYWZ0ZXItdGV4dFwiLCBcInRleHRcIikuYXR0cihcInhcIiwgdW5pdF9zaXplICogKGFmdGVyX3BvcyArIDEpICsgOCkuYXR0cihcInlcIiwgNDgpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKS50ZXh0KFwiVmFsaWRhdGlvblwiKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBCZWZvcmVBZnRlclRpbWVzZXJpZXM7XG59KEQzQ29tcG9uZW50QmFzZSk7XG5cbmZ1bmN0aW9uIHNpbXBsZUJhcih3cmFwLCB2YWx1ZSwgc2NhbGUsIGNvbG9yKSB7XG5cbiAgdmFyIGhlaWdodCA9IDIwLFxuICAgICAgd2lkdGggPSB3cmFwLnN0eWxlKFwid2lkdGhcIikucmVwbGFjZShcInB4XCIsIFwiXCIpO1xuXG4gIHZhciBjYW52YXMgPSBkM191cGRhdGVhYmxlKHdyYXAsIFwic3ZnXCIsIFwic3ZnXCIsIFt2YWx1ZV0sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gMTtcbiAgfSkuc3R5bGUoXCJ3aWR0aFwiLCB3aWR0aCArIFwicHhcIikuc3R5bGUoXCJoZWlnaHRcIiwgaGVpZ2h0ICsgXCJweFwiKTtcblxuICB2YXIgY2hhcnQgPSBkM191cGRhdGVhYmxlKGNhbnZhcywgJ2cuY2hhcnQnLCAnZycsIGZhbHNlLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0pLmF0dHIoXCJjbGFzc1wiLCBcImNoYXJ0XCIpO1xuXG4gIHZhciBiYXJzID0gZDNfc3BsYXQoY2hhcnQsIFwiLnBvcC1iYXJcIiwgXCJyZWN0XCIsIGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0sIGZ1bmN0aW9uICh4LCBpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmF0dHIoXCJjbGFzc1wiLCBcInBvcC1iYXJcIikuYXR0cignaGVpZ2h0JywgaGVpZ2h0IC0gNCkuYXR0cih7ICd4JzogMCwgJ3knOiAwIH0pLnN0eWxlKCdmaWxsJywgY29sb3IpLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBzY2FsZSh4KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRvbWFpbl9idWxsZXQodGFyZ2V0KSB7XG4gIHJldHVybiBuZXcgRG9tYWluQnVsbGV0KHRhcmdldCk7XG59XG5cbi8vIGRhdGEgc2NoZW1hOiBbe3BvcF9wZXJjZW50LCBzYW1wbGVfcGVyY2VudF9ub3JtfVxuXG52YXIgRG9tYWluQnVsbGV0ID0gZnVuY3Rpb24gKF9EM0NvbXBvbmVudEJhc2UpIHtcbiAgaW5oZXJpdHMoRG9tYWluQnVsbGV0LCBfRDNDb21wb25lbnRCYXNlKTtcblxuICBmdW5jdGlvbiBEb21haW5CdWxsZXQodGFyZ2V0KSB7XG4gICAgY2xhc3NDYWxsQ2hlY2skMSh0aGlzLCBEb21haW5CdWxsZXQpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRG9tYWluQnVsbGV0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRG9tYWluQnVsbGV0KSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MkMShEb21haW5CdWxsZXQsIFt7XG4gICAga2V5OiBcInByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb3BzKCkge1xuICAgICAgcmV0dXJuIFtcImRhdGFcIiwgXCJtYXhcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRyYXdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhdygpIHtcbiAgICAgIHZhciB3aWR0aCA9ICh0aGlzLnRhcmdldC5zdHlsZShcIndpZHRoXCIpLnJlcGxhY2UoXCJweFwiLCBcIlwiKSB8fCB0aGlzLm9mZnNldFdpZHRoKSAtIDUwLFxuICAgICAgICAgIGhlaWdodCA9IDI4O1xuXG4gICAgICB2YXIgeCA9IGQzLnNjYWxlLmxpbmVhcigpLnJhbmdlKFswLCB3aWR0aF0pLmRvbWFpbihbMCwgdGhpcy5tYXgoKV0pO1xuXG4gICAgICBpZiAodGhpcy50YXJnZXQudGV4dCgpKSB0aGlzLnRhcmdldC50ZXh0KFwiXCIpO1xuXG4gICAgICB2YXIgYnVsbGV0ID0gZDNfdXBkYXRlYWJsZSh0aGlzLnRhcmdldCwgXCIuYnVsbGV0XCIsIFwiZGl2XCIsIHRoaXMuZGF0YSgpLCBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0pLmNsYXNzZWQoXCJidWxsZXRcIiwgdHJ1ZSkuc3R5bGUoXCJtYXJnaW4tdG9wXCIsIFwiM3B4XCIpO1xuXG4gICAgICB2YXIgc3ZnID0gZDNfdXBkYXRlYWJsZShidWxsZXQsIFwic3ZnXCIsIFwic3ZnXCIsIGZhbHNlLCBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0pLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCkuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpO1xuXG4gICAgICBkM191cGRhdGVhYmxlKHN2ZywgXCIuYmFyLTFcIiwgXCJyZWN0XCIsIGZhbHNlLCBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0pLmNsYXNzZWQoXCJiYXItMVwiLCB0cnVlKS5hdHRyKFwieFwiLCAwKS5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIHgoZC5wb3BfcGVyY2VudCk7XG4gICAgICB9KS5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCkuYXR0cihcImZpbGxcIiwgXCIjODg4XCIpO1xuXG4gICAgICBkM191cGRhdGVhYmxlKHN2ZywgXCIuYmFyLTJcIiwgXCJyZWN0XCIsIGZhbHNlLCBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0pLmNsYXNzZWQoXCJiYXItMlwiLCB0cnVlKS5hdHRyKFwieFwiLCAwKS5hdHRyKFwieVwiLCBoZWlnaHQgLyA0KS5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIHgoZC5zYW1wbGVfcGVyY2VudF9ub3JtKTtcbiAgICAgIH0pLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0IC8gMikuYXR0cihcImZpbGxcIiwgXCJyZ2IoOCwgMjksIDg4KVwiKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBEb21haW5CdWxsZXQ7XG59KEQzQ29tcG9uZW50QmFzZSk7XG5cbnZhciB2ZXJzaW9uID0gXCIwLjAuMVwiO1xuXG5leHBvcnQgeyB2ZXJzaW9uLCBiZWZvcmVfYWZ0ZXJfdGltZXNlcmllcywgc2ltcGxlVGltZXNlcmllcywgc2ltcGxlQmFyLCBkb21haW5fYnVsbGV0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyaGhjblF1WlhNdWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlBY205amEyVnlZbTk0TDJobGJIQmxjbk12WW5WcGJHUXZhR1ZzY0dWeWN5NXFjeUlzSWk0dUwzTnlZeTl6YVcxd2JHVmZkR2x0WlhObGNtbGxjeTVxY3lJc0lpNHVMM055WXk5aVlWOTBhVzFsYzJWeWFXVnpMbXB6SWl3aUxpNHZjM0pqTDNOcGJYQnNaVjlpWVhJdWFuTWlMQ0l1TGk5emNtTXZZblZzYkdWMExtcHpJaXdpWW5WdVpHeGxMbXB6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltWjFibU4wYVc5dUlGOWZKSE4wZVd4bFNXNXFaV04wS0dOemN5d2djbVYwZFhKdVZtRnNkV1VwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJrYjJOMWJXVnVkQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQnlaWFIxY200Z2NtVjBkWEp1Vm1Gc2RXVTdYRzRnSUgxY2JpQWdZM056SUQwZ1kzTnpJSHg4SUNjbk8xeHVJQ0IyWVhJZ2FHVmhaQ0E5SUdSdlkzVnRaVzUwTG1obFlXUWdmSHdnWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb0oyaGxZV1FuS1Zzd1hUdGNiaUFnZG1GeUlITjBlV3hsSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duYzNSNWJHVW5LVHRjYmlBZ2MzUjViR1V1ZEhsd1pTQTlJQ2QwWlhoMEwyTnpjeWM3WEc0Z0lHaGxZV1F1WVhCd1pXNWtRMmhwYkdRb2MzUjViR1VwTzF4dUlDQmNiaUFnYVdZZ0tITjBlV3hsTG5OMGVXeGxVMmhsWlhRcGUxeHVJQ0FnSUhOMGVXeGxMbk4wZVd4bFUyaGxaWFF1WTNOelZHVjRkQ0E5SUdOemN6dGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnpkSGxzWlM1aGNIQmxibVJEYUdsc1pDaGtiMk4xYldWdWRDNWpjbVZoZEdWVVpYaDBUbTlrWlNoamMzTXBLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVYwZFhKdVZtRnNkV1U3WEc1OVhHNWNiblpoY2lCamJHRnpjME5oYkd4RGFHVmpheUE5SUdaMWJtTjBhVzl1SUNocGJuTjBZVzVqWlN3Z1EyOXVjM1J5ZFdOMGIzSXBJSHRjYmlBZ2FXWWdLQ0VvYVc1emRHRnVZMlVnYVc1emRHRnVZMlZ2WmlCRGIyNXpkSEoxWTNSdmNpa3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUTJGdWJtOTBJR05oYkd3Z1lTQmpiR0Z6Y3lCaGN5QmhJR1oxYm1OMGFXOXVYQ0lwTzF4dUlDQjlYRzU5TzF4dVhHNTJZWElnWTNKbFlYUmxRMnhoYzNNZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lHWjFibU4wYVc5dUlHUmxabWx1WlZCeWIzQmxjblJwWlhNb2RHRnlaMlYwTENCd2NtOXdjeWtnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY0hKdmNITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQmtaWE5qY21sd2RHOXlJRDBnY0hKdmNITmJhVjA3WEc0Z0lDQWdJQ0JrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ1BTQmtaWE5qY21sd2RHOXlMbVZ1ZFcxbGNtRmliR1VnZkh3Z1ptRnNjMlU3WEc0Z0lDQWdJQ0JrWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCcFppQW9YQ0oyWVd4MVpWd2lJR2x1SUdSbGMyTnlhWEIwYjNJcElHUmxjMk55YVhCMGIzSXVkM0pwZEdGaWJHVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFJoY21kbGRDd2daR1Z6WTNKcGNIUnZjaTVyWlhrc0lHUmxjMk55YVhCMGIzSXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9RMjl1YzNSeWRXTjBiM0lzSUhCeWIzUnZVSEp2Y0hNc0lITjBZWFJwWTFCeWIzQnpLU0I3WEc0Z0lDQWdhV1lnS0hCeWIzUnZVSEp2Y0hNcElHUmxabWx1WlZCeWIzQmxjblJwWlhNb1EyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxMQ0J3Y205MGIxQnliM0J6S1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR2xqVUhKdmNITXBJR1JsWm1sdVpWQnliM0JsY25ScFpYTW9RMjl1YzNSeWRXTjBiM0lzSUhOMFlYUnBZMUJ5YjNCektUdGNiaUFnSUNCeVpYUjFjbTRnUTI5dWMzUnlkV04wYjNJN1hHNGdJSDA3WEc1OUtDazdYRzVjYm5aaGNpQmtNMTkxY0dSaGRHVmhZbXhsSUQwZ1puVnVZM1JwYjI0Z1pETmZkWEJrWVhSbFlXSnNaU2gwWVhKblpYUXNJSE5sYkdWamRHOXlMQ0IwZVhCbExDQmtZWFJoTENCcWIybHVaWElwSUh0Y2JpQWdkbUZ5SUhSNWNHVWdQU0IwZVhCbElIeDhJRndpWkdsMlhDSTdYRzRnSUhaaGNpQjFjR1JoZEdWaFlteGxJRDBnZEdGeVoyVjBMbk5sYkdWamRFRnNiQ2h6Wld4bFkzUnZjaWt1WkdGMFlTaG1kVzVqZEdsdmJpQW9lQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmtZWFJoSUQ4Z1cyUmhkR0ZkSURvZ1czaGRPMXh1SUNCOUxDQnFiMmx1WlhJZ2ZId2dablZ1WTNScGIyNGdLSGdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdXM2hkTzF4dUlDQjlLVHRjYmx4dUlDQjFjR1JoZEdWaFlteGxMbVZ1ZEdWeUtDa3VZWEJ3Wlc1a0tIUjVjR1VwTzF4dVhHNGdJSEpsZEhWeWJpQjFjR1JoZEdWaFlteGxPMXh1ZlR0Y2JseHVkbUZ5SUdRelgzTndiR0YwSUQwZ1puVnVZM1JwYjI0Z1pETmZjM0JzWVhRb2RHRnlaMlYwTENCelpXeGxZM1J2Y2l3Z2RIbHdaU3dnWkdGMFlTd2dhbTlwYm1WeUtTQjdYRzRnSUhaaGNpQjBlWEJsSUQwZ2RIbHdaU0I4ZkNCY0ltUnBkbHdpTzF4dUlDQjJZWElnZFhCa1lYUmxZV0pzWlNBOUlIUmhjbWRsZEM1elpXeGxZM1JCYkd3b2MyVnNaV04wYjNJcExtUmhkR0VvWkdGMFlTQjhmQ0JtZFc1amRHbHZiaUFvZUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUI0TzF4dUlDQjlMQ0JxYjJsdVpYSWdmSHdnWm5WdVkzUnBiMjRnS0hncElIdGNiaUFnSUNCeVpYUjFjbTRnZUR0Y2JpQWdmU2s3WEc1Y2JpQWdkWEJrWVhSbFlXSnNaUzVsYm5SbGNpZ3BMbUZ3Y0dWdVpDaDBlWEJsS1R0Y2JseHVJQ0J5WlhSMWNtNGdkWEJrWVhSbFlXSnNaVHRjYm4wN1hHNWNibVoxYm1OMGFXOXVJR1F6WDJOc1lYTnpLSFJoY21kbGRDd2dZMnh6TENCMGVYQmxMQ0JrWVhSaEtTQjdYRzRnSUhKbGRIVnliaUJrTTE5MWNHUmhkR1ZoWW14bEtIUmhjbWRsZEN3Z1hDSXVYQ0lnS3lCamJITXNJSFI1Y0dVZ2ZId2dYQ0prYVhaY0lpd2daR0YwWVNrdVkyeGhjM05sWkNoamJITXNJSFJ5ZFdVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdWIyOXdLQ2tnZTMxY2JtWjFibU4wYVc5dUlHbGtaVzUwYVhSNUtIZ3BJSHRjYmlBZ2NtVjBkWEp1SUhnN1hHNTlYRzVtZFc1amRHbHZiaUJyWlhrb2VDa2dlMXh1SUNCeVpYUjFjbTRnZUM1clpYazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRmpZMlZ6YzI5eUtHRjBkSElzSUhaaGJDa2dlMXh1SUNCcFppQW9kbUZzSUQwOVBTQjFibVJsWm1sdVpXUXBJSEpsZEhWeWJpQjBhR2x6VzF3aVgxd2lJQ3NnWVhSMGNsMDdYRzRnSUhSb2FYTmJYQ0pmWENJZ0t5QmhkSFJ5WFNBOUlIWmhiRHRjYmlBZ2NtVjBkWEp1SUhSb2FYTTdYRzU5WEc1Y2JuWmhjaUJFTTBOdmJYQnZibVZ1ZEVKaGMyVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJR1oxYm1OMGFXOXVJRVF6UTI5dGNHOXVaVzUwUW1GelpTaDBZWEpuWlhRcElIdGNiaUFnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWTJ4aGMzTkRZV3hzUTJobFkyc29kR2hwY3l3Z1JETkRiMjF3YjI1bGJuUkNZWE5sS1R0Y2JseHVJQ0FnSUhSb2FYTXVYM1JoY21kbGRDQTlJSFJoY21kbGREdGNiaUFnSUNCMGFHbHpMbDl2YmlBOUlIdDlPMXh1SUNBZ0lIUm9hWE11Y0hKdmNITW9LUzV0WVhBb1puVnVZM1JwYjI0Z0tIZ3BJSHRjYmlBZ0lDQWdJRjkwYUdselczaGRJRDBnWVdOalpYTnpiM0l1WW1sdVpDaGZkR2hwY3l3Z2VDazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JqY21WaGRHVkRiR0Z6Y3loRU0wTnZiWEJ2Ym1WdWRFSmhjMlVzSUZ0N1hHNGdJQ0FnYTJWNU9pQmNJbkJ5YjNCelhDSXNYRzRnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUhCeWIzQnpLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRnRjSW1SaGRHRmNJbDA3WEc0Z0lDQWdmVnh1SUNCOUxDQjdYRzRnSUNBZ2EyVjVPaUJjSW05dVhDSXNYRzRnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUc5dUtHRmpkR2x2Yml3Z1ptNHBJSHRjYmlBZ0lDQWdJR2xtSUNobWJpQTlQVDBnZFc1a1pXWnBibVZrS1NCeVpYUjFjbTRnZEdocGN5NWZiMjViWVdOMGFXOXVYU0I4ZkNCdWIyOXdPMXh1SUNBZ0lDQWdkR2hwY3k1ZmIyNWJZV04wYVc5dVhTQTlJR1p1TzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dUlDQjlYU2s3WEc0Z0lISmxkSFZ5YmlCRU0wTnZiWEJ2Ym1WdWRFSmhjMlU3WEc1OUtDazdYRzVjYm5aaGNpQjJaWEp6YVc5dUlEMGdYQ0l3TGpBdU1Wd2lPMXh1WEc1bGVIQnZjblFnZXlCMlpYSnphVzl1TENCa00xOTFjR1JoZEdWaFlteGxMQ0JrTTE5emNHeGhkQ3dnWkROZlkyeGhjM01zSUc1dmIzQXNJR2xrWlc1MGFYUjVMQ0JyWlhrc0lHRmpZMlZ6YzI5eUxDQkVNME52YlhCdmJtVnVkRUpoYzJVZ2ZUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdSaGRHRTZZWEJ3YkdsallYUnBiMjR2YW5OdmJqdGphR0Z5YzJWMFBYVjBaaTA0TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwWVVkV2MyTkhWbmxqZVRWeFkzbEpjMGx1VG5aa1dFcHFXbGhOYVU5c2MybE1hVFIyWVZjMWExcFlaM1ZoYmsxcFRFTkthV1JYTld0aVIxVjFZVzVOYVZoVGQybGpNamt4WTIxT2JHTXdUblppYmxKc1ltNVJhVTlzYzJsYVdHaDNZak5LTUVsSFRuWmliazR3U1VkUmVsZ3pWbmRhUjBZd1dsZEdhV0pIVldkUVUwSnRaRmMxYW1SSGJIWmlhV2d3V1ZoS2JscFlVWE5qTWxaeldsZE9NR0l6U1hOa1NHeDNXbE40YTFsWVVtaE1SM0IyWVZjMWJHTnBhMmRsTVhoMVNVTkNNbGxZU1dka1NHeDNXbE5CT1VsSVVqVmpSMVZuWmtoM1oxaERTbXRoV0ZwalNXeDRkVWxEUWpKWldFbG5aRmhDYTFsWVVteFpWMHB6V2xOQk9VbElVbWhqYldSc1pFTTFlbHBYZUd4Wk0xSkNZa2QzYjJNeVZuTmFWMDR3WWpOSmNFeHRVbWhrUjBWdldFYzBaMGxEUVdkYWJsWjFXVE5TY0dJeU5HOWxRMnczWTIxV01HUllTblZKUjFKb1pFZEZaMUI1UW1KYVIwWXdXVll3WjA5cFFtSmxSakU1VEVaNGRVbERRV2RKUjNCMllWYzFiR05wUWpobVEwSnRaRmMxYW1SSGJIWmlhV2cwUzFoMGVWcFlVakZqYlRSblZ6Tm9aR1pXZUhWSlEwRndXRWMxWTJKcFFXZGtXRUpyV1ZoU2JGbFhTbk5hVXpWc1ltNVNiR05wWjNCWVJ6Um5TVU5CWjB4dFJuZGpSMVoxV2tOb01HVllRbXhMVm5oMVdFYzBaMGxJU214a1NGWjVZbWxDTVdOSFVtaGtSMVpvV1cxNGJGaEhOVGxZUnpWalltMVdOR05IT1hsa1EwSnFZakkxZW1SRFFtdE5NVGw2WTBkNGFHUkRRVGxKUjFveFltMU9NR0ZYT1hWTFNGSm9ZMjFrYkdSRGVIcGFWM2hzV1ROU2RtTnBlREJsV0VKc1RFZFNhR1JIUlhOaGJUbHdZbTFXZVV0VFFqZFlSelJuU1VoYWFHTnBRakJsV0VKc1NVUXdaMlJJYkhkYVUwSTRaa05DWTBsdFVuQmtiSGRwV0VjMFowbElXbWhqYVVJeFkwZFNhR1JIVm1oWmJYaHNTVVF3WjJSSFJubGFNbFl3VEc1T2JHSkhWbXBrUlVaellrTm9lbHBYZUd4Wk0xSjJZMmxyZFZwSFJqQlpVMmhqWW1sQlowbERRbXRaV0ZKb1NVaDRPRWxIV2pGaWJVNHdZVmM1ZFV0SVozQmxNMHBzWkVoV2VXSnBRalJtVTNoalltbEJaMGxEUW5GaU1teDFXbGhKWjJaSWQyZGFibFoxV1ROU2NHSXlORzlsUTJ3M1kyMVdNR1JZU25WSlNHZzVXRWMwWjBsRGJHTmliSGgxU1VOQ01XTkhVbWhrUjFab1dXMTRiRXh0Vm5Wa1IxWjVTME5zWTJKcFFXZEpRMEYxV1ZoQ2QxcFhOV3RMU0ZJMVkwZFZjRmhITldOaWFVRm5ZMjFXTUdSWVNuVkpTRlozV2tkR01GcFhSbWxpUjFaalltNHhZMkpzZUhWYVdHaDNZak5LTUVsSFdqRmliVTR3WVZjNWRVbEhVWHBZTWs1eldWaE9la3RJVW1oamJXUnNaRU40YW1KSVRYTmtTR3gzV2xONGExbFlVbWhMVTBJM1dFYzBaMGxJU214a1NGWjVZbWxDYTAweE9URmpSMUpvWkVkV2FGbHRlR3hMU0ZKb1kyMWtiR1JEZUdOSmFUVmpTV2xCY2tsSFRuTmplWGRuWkVoc2QxcFRRamhtUTBKalNXMVNjR1JzZDJsTVIxSm9aRWRGY0ZoSE5HZEpRMEZuVEcxT2MxbFlUbnBhVjFGdldUSjRla3hJVW5sa1YxVndXRWMxT1ZoSE5XTmliVlkwWTBjNWVXUkRRbTFrVnpWcVpFZHNkbUpwUW5WaU1qbDNTME5yWjJVek1XTmliVlkwWTBjNWVXUkRRbTFrVnpWcVpFZHNkbUpwUW5CYVIxWjFaRWRzTUdWVGFEUkxVMEkzU1VoS2JHUklWbmxpYVVJMFNVZ3hZMkp0VmpSalJ6bDVaRU5DYldSWE5XcGtSMngyWW1sQ2NscFlhMjlsUTJ0blpYbENlVnBZVWpGamJUUm5aVU0xY2xwWWEyZG1WbmgxV0VjMWJHVklRblpqYmxGbldtNVdkVmt6VW5CaU1qUm5XVmRPYWxwWVRucGlNMGx2V1ZoU01HTnBkMmRrYlVaelMxTkNOMWhITkdkSlIyeHRTVU5vTWxsWGQyZFFWREE1U1VoV2RWcEhWbTFoVnpWc1drTnJaMk50VmpCa1dFcDFTVWhTYjJGWVRtSllRMHBtV0VOSlowdDVRbWhrU0ZKNVdGWjRkVWxEUWpCaFIyeDZWekYzYVZneGQybEpRM05uV1ZoU01HTnNNR2RRVTBJeVdWZDRZMkpwUVdkamJWWXdaRmhLZFVsSVVtOWhXRTVqWW00eFkySnNlSFZhV0doM1lqTktNRWxIVG5OWldFNTZTVVZSZWxFeU9YUmpSemwxV2xjMU1GRnRSbnBhVTBJM1dFYzBaMGxIVG5aaWJrNHdZMjVXYW1SSE9YbExTRkpvWTIxa2JHUkRhMmRsTVhoMVNVTkJaMGxJVW05aFdFMTFXRE5TYUdOdFpHeGtRMEU1U1VoU2FHTnRaR3hrUm5oMVNVTkJaMGxJVW05aFdFMTFXREk1ZFVsRU1HZGxNekZqWW1sQlowbERRakJoUjJ4NlRHNUNlV0l6UW5wTFEydDFZbGRHZDB0SVoyZFFWRFJuWlRGNGRVbERRV2RKUTBGblpFZG9jR014ZERSWVUwRTVTVWRHYWxreVZucGpNamw1VEcxS2NHSnRVVzlrUjJod1kzbDRORXRXZUhWSlEwRm5TVWd3Y0ZoSE5HZEpTREZqWW1sQloyTklTblpqU0UxdlMxTkNOMWhITkdkSlEwRm5ZMjFXTUdSWVNuVkpSblJqU1cxU2FHUkhSbU5KYkRGalltbEJaMlpXZUhWSlEwSjJZbWxvYUZrelVuQmlNalJ6V20wMGNFbElkR05pYVVGblNVTkNjRnBwUVc5YWJUUm5VRlF3T1VsSVZuVmFSMVp0WVZjMWJGcERhMmRqYlZZd1pGaEtkVWxJVW05aFdFMTFXREk1ZFZjeVJtcGtSMngyWW13d1oyWklkMmRpYlRsMlkwUjBZMkpwUVdkSlEwSXdZVWRzZWt4c09YWmliSFJvV1ROU2NHSXlOV1JKUkRCbldtMDBOMWhITkdkSlEwRm5ZMjFXTUdSWVNuVkpTRkp2WVZoT1kySnBRV2RtVm5oMVpsWjRkVWxwZDJsa2JVWjVTVWhhYkdOdVRuQmlNalJuVUZOQ1kwbHFRWFZOUXpSNFdFTkpOMGxIVmpSalJ6bDVaRU5CY1VsSFdubGlNakJuV0VOSmRVeHBPWEJpYlZKc1pVWjNhVTk1UW14bFNFSjJZMjVSWjJVeldteGpiazV3WWpJMU9VOTVTbVJNUTBwMVdWY3hiR041U1RaWGVVcHJUVEU1TVdOSFVtaGtSMVpvV1cxNGJFbHBkMmxrUjBaNVdqSldNRWxwZDJsak1sWnpXbGRPTUdJelNXbE1RMG93WlZoQ2JFbHBkMmxhUjBZd1dWTkpjMGx0Y0haaFZ6VnNZMmxKYzBsdVZuZGFSMFl3V2xkR2FXSkhWV2xNUTBwNldsZDRiRmt6VWtKaVIzZHBURU5LTkVscGQybGFWelV3V2xoSmFVeERTbWhqU0VKc1ltMVJhVXhEU210Tk1UbDZZMGQ0YUdSRFNYTkpiVkY2V0RKT2MxbFlUbnBKYVhkcFdUSjRla2xwZDJsWk1uaG9Zek5PYkZwRFNYTkpiVFYyWWpOQmFVeERTbkJhUjFaMVpFZHNNR1ZUU1hOSmJYUnNaVk5KYzBsdFJtcFpNbFo2WXpJNWVVbHBkMmxaV0ZJd1kybEpjMGx1V21oaVEwbHpTVzVXZFZwSFZtMWhWelZzV2tOSmMwbHJVWHBSTWpsMFkwYzVkVnBYTlRCUmJVWjZXbE5KYzBsc09UQlpXRXB1V2xoUmFVeERTbVppTWpScFRFTktkMk50T1hkamVVbHpTVzB4YUdORFNYTkpiVXB3WW0xUmFVeERTbWhaTTFKd1lqSTBhVXhEU20xaWFVbHpTVzVhYkdOdVRuQmlNalJwV0ZOM2FXSlhSbmRqUjJ4MVdqTk5hVTlwU1RkUGVuTTNUM3B6TjA5NmN6ZFBlbk0zVDNwek4wOTZjemRQZW5NM1QzcHpOMDk2Y3pkUGVuTTNUM3B6TjA5NmN6ZFBlbk0zVDNwMFFsRlZSbEJNUld4Q1VWVXhRa3hIWkVOUlZVWnVVV2w0VkZGVlJtOVJhMFZ6V1ZWR1Fsb3dTWE5STUVaQ1ZUQk5jMVJWUmtKV1EzaEdVVlZHYmxGclRYTlZWVVpDWVVWSmMxSlZSa0psVlVwRVRFVnNRbEZZY0VOTVJWWkNVVlJvUTFGNWVFcFJWVVUxVVdsNFJsRlZSblJSTUUxelZGVkdRbUpyVFhOU1ZVWkNUV3ROTjFSVlJrUmlSVlpIVEVVNVFsRlZPVUpNUmtaQ1VWWkZjMU13UmtKaWEwazNWRlZHUkZOVlkzTlpWVVpDV1ZWM2MxUXdSa0pVTURCelZUQkdRbFZEZUVSUlZVWndVV3QzYzFWVlJrSmhhMGx6VWxWR1FrMXJTa1pNUld4Q1VWUk9RMHhGVGtKUk1sbHpWbFZHUWxVd2EzTlJNRVpDVmtONFJsRlZSbGhQTVdSQ1VWWkdTMHhGT1VKUlZUaHpVVEJHUWxFd1JYTlRWVVpDVWtONFJGRlZSbEZNUldSQ1VWZGtRMHhGVGtKUlZVNUtURVZPUWxGVlVYTlJNRVpDWkd0Sk4xSXdSa1ZTZVhoR1VWVldiVk5EZUZaUlZVWldURVpXUWxGV1RraE1SVTVDVVZaUmMxSlZSa0pXZW5SWVVWVkdVa3hGVGtKUlZVNUNURVZPUWxGVlVYTlJNRVpDVlVSMFNGRlZXbEZNUlU1Q1VWZHdRMDk2ZEdoUlZYUllVWGw0VEZGVlJsbE1SV1JDVVRCa1JFeEZNVUpTUldkelVUQkdSRlpXUVhOVFZVWkZWbXB6TjFVd1JraFVNR056VmxWR1FsVkVkRVJSVmxwTVQzcDBRbEZYUmxGTVJVWkNVVlU0YzFOVlJrSlVWWE56VmpCR1FsWjVlRlJSVlVaWlVWTjRVbEZWUmxoTVJVNUNVVlpPVjB4Rk1VSlJWbEZ6VWxWR1Fsb3dTa1JNUmtaQ1VWZG9RMHhGVmtKUldHeERVWGw0U2xGVlJqWlJhWGhHVVZWRk5GRnJUWE5UVlVaQ1QxVkpjMUpWUmtKaVZVNUVURVV4UWxGWE5VUk1SVlpDVVZSS1JFOHdNVUpSZW1SRlVtbDRVRkZWUmxCUlUzaFNVVlZHVWt4RmRFSlJWelZEVHpBeFFsRXdiRWhNUjBaQ1VWZEdUVXhGT1VKUlZUbE9URVpPUWxGV1FYTlJNRVpDWVZWS1RVeEdSa0pSVjNCRFRFVldRbEZVU2tOU1UzaEtVVlZGZWxGcGVFUlJWVTV0VVZONFVsRlZSbEpNUmxaQ1VWWk9Ta3hGVGtKUlZsRnpVbFZHUWxaNmRGaFJWVVpTVVZONFJGRlZSbEZQTUdSQ1VrVjNjMUpWUmtaYWEyZHpWbFZHUWxaVGVGWlJWVVpVVW5sNFJGRlZSbFZNUlZaQ1VWWmpOMVl3UmtKVlZVVnpVVEJHUWxWRWRFaFJWVnBSVEVWT1FsRlhjRU5QZW5Sb1VWVjBXRkY1ZUV4UlZVWlpURVZrUWxFd1pFUk1SVEZDVWtWbmMxRXdSa1JXVmtGelUxVkdSVlpxY3pkVk1FWklWREJqYzFaVlJrSlZSSFJFVVZaYVRFOTZkRUpSVjBaUlRFVkdRbEZWT0hOVk1FWkNWVEF3YzFWVlJrSldRM2hFVVZWR2NsRnNaM05VVlVaQ1lrVkpjMUpWUmtKbFZVcGFURVZrUWxGWWNFTk1SVlpDVVZSYVExWnBlRXBSVlVVelVXbDRSbEZWUm5KUk1FMXpVMVZHUW1KRlRYTlNWVVpDWkRCTk4xVXdSa1JrUlU1TFRFZE9RbEZYVGtSTVJURkNVVmRSYzFKVlJrSmpWVWx6VkZWR1FsUldhM05TTUVaQ1RUQkpjMUpWUmtKYU1FNVhURVpHUWxGV1JYTlRNRVpDWlVWTmMxSlZSa0pQUlU1RVRFVnNRbEZVYkVSTVJWWkNVVEJ3Vmt4Rk9VSlNSV3R6VVRCR1JGTlZVWE5TTUVaRlUybDRSbEZWVGxKTVJXeENVa1pKYzFFd1JrSlZSSE0zVHpCR1FsTlZXWE5SVlVaQ1ZIbDRWRkZWUmxSU1UzaEtVVlZHVlV4RlpFSlJWMlJEVHpCR1FsRXpXa05NUlVaQ1VWVTRjMVV3UmtKVk1FMXpWVlZHUWxaRGVFUlJWVVp5VVd4SmMxRXdSa0ppUlVselVsVkdRbU5WU1RkVk1FWkNWVEJGYzFFd1JrSlZSSE0zVVZWR1JFOVZTWE5SVlVaQ1ZIbDRWRkZWUmxSVmVYaElVVlZHVlV4RlRrSlJWMFpWVEVWT1FsRlhTWE5TVlVaQ1dqQkpOMVV3UmtKVk1FVnpVbFZHUWxKV1RYTlNNRVpDVmtSek4wOHdSa0pTV0hCRFRFVkdRbEZWT0hOVk1FWkNWVEJOYzFWVlJrSldRM2hFVVZWR2NsRnJUWE5UVlVaQ1lrVkpjMUpWUmtKa01FcEVURVZrUWxGWWFFTk1SVlpDVVZSYVEwOHdNVUpSZW14RFVWTjRVbEZWUmxKUmVYaFVVVlZHWVV4RlZrSlJXRlpEVEVVNVFsRlZPSE5UTUVaQ1UzbDRUbEZWUms1U2FYaEtVVlZHV1V4RlRrSlJWa0UzVkRCR1JHSkZTWE5VVlVaQ1ZGVkZjMU5WUmtKWFEzaEtVVlZHZEZGclRYTlNNRVpDWW10Sk4xVXdSa1JVZVhoS1VWVkdVVTk2Y3pkUlZVWklVbWw0U2xGVlJtaFNVM2hzVVZWR2FVOTZTa05SVlU1cVkydEpjMVJWUmtKWGFYaEdVVlZHZGxGcWN6ZFBlbk0zVlRCR1JGbHVUa05NUlRsQ1VWVjNjMUl3UmtKYVdGSkRURVV4UWxGWFdUZFZNRVpFVXpOV1EweEZaRUpSVlhkelVqQkdRbFo1ZUVaUlZVWlpUekZPUWxFd2RFUk1SWFJDVVZWM2MxSXdSa0paVlUxelVqQkdRbGxwZUVSUlZVWndVV2w0YUZGVlJreFBNV3hDVVRKYWMxRnBlRVJSVlVaTlRFVnNRbEZXVmxaTVJrNUNVVlpPVkV4RmJFSlJWbEZ6VlZWR1FtSlZTblZSYVhoRVVWVkdkVkZwZUVSUlZVWlhUekIwUWxKRldUZFBlbk0zVDNwU1ExRlZiRTVQTWtaQ1VUQk5jMUV3UmtKUmVYaE9VVlZHUlV4RlRrSlJWa0UzVDNwek4yUlZTa0pTVlU1MlVXbDRUbEZXYUUxTVJWWkNWakZzUkV4RlZrSlhSbTl6VWxWR1dGb3dTVGRXVlVaRVZXdEZjMVF3UmtKVU1VbHpWVEJHUWxkRGVFWlJWVVo2VVdsNFVGRlZSbEJNUlhSQ1VWVjBTRXhGWkVKUlZYZHpVVEJHUWxVd2EzTlVWVVpDVmtONFRGRlZSblpSYlVselUxVkdRazB3U1RkV01FWkVZV3RLVkV4RlpFSlJWWGR6VVRCR1FsVXdhM05VVlVaQ1ZrTjRTbEZWUm5SUmEwMXpVbFZHUW1KclNUZFpWVVpFVkhsNFNsRlZSbEZQZW5NM1QzcHpOMUZWVGpKU1JXOXpVMVZHUWxOVlRYTldWVVpDVmxONFVGRlZSbXRQZW5NM1QzbEtPVnh1SWl3aWFXMXdiM0owSUh0a00xOTFjR1JoZEdWaFlteGxMQ0JrTTE5emNHeGhkSDBnWm5KdmJTQW5RSEp2WTJ0bGNtSnZlQzlvWld4d1pYSnpKMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYzJsdGNHeGxWR2x0WlhObGNtbGxjeWgwWVhKblpYUXNaR0YwWVN4M0xHZ3NiV2x1S1NCN1hHNGdJSFpoY2lCM2FXUjBhQ0E5SUhjZ2ZId2dNVEl3WEc0Z0lDQWdMQ0JvWldsbmFIUWdQU0JvSUh4OElETXdYRzVjYmlBZ2RtRnlJSGdnUFNCa015NXpZMkZzWlM1dmNtUnBibUZzS0NrdVpHOXRZV2x1S0dRekxuSmhibWRsS0RBc1pHRjBZUzVzWlc1bmRHZ3BLUzV5WVc1blpTaGtNeTV5WVc1blpTZ3dMSGRwWkhSb0xIZHBaSFJvTDJSaGRHRXViR1Z1WjNSb0tTbGNiaUFnZG1GeUlIa2dQU0JrTXk1elkyRnNaUzVzYVc1bFlYSW9LUzV5WVc1blpTaGJOQ3hvWldsbmFIUmRLUzVrYjIxaGFXNG9XMjFwYmlCOGZDQmtNeTV0YVc0b1pHRjBZU2tzWkRNdWJXRjRLR1JoZEdFcFhTbGNibHh1SUNCMllYSWdkM0poY0NBOUlHUXpYM1Z3WkdGMFpXRmliR1VvZEdGeVoyVjBMRndpWjF3aUxGd2laMXdpTEdSaGRHRXNablZ1WTNScGIyNG9lQ3hwS1NCN0lISmxkSFZ5YmlBeGZTbGNibHh1SUNCa00xOXpjR3hoZENoM2NtRndMRndpY21WamRGd2lMRndpY21WamRGd2lMSGdnUFQ0Z2VDd2dLSGdzYVNrZ1BUNGdhU2xjYmlBZ0lDQXVZWFIwY2loY0luaGNJaXdvZWl4cEtTQTlQaUI0S0drcEtWeHVJQ0FnSUM1aGRIUnlLRndpZDJsa2RHaGNJaXdnZDJsa2RHZ3ZaR0YwWVM1c1pXNW5kR2dnTFRFdU1pbGNiaUFnSUNBdVlYUjBjaWhjSW5sY0lpd2dlaUE5UGlCb1pXbG5hSFFnTFNCNUtIb3BJQ2xjYmlBZ0lDQXVZWFIwY2loY0ltaGxhV2RvZEZ3aUxDQjZJRDArSUhvZ1B5QjVLSG9wSURvZ01DbGNibHh1SUNCeVpYUjFjbTRnZDNKaGNGeHVYRzU5WEc0aUxDSnBiWEJ2Y25RZ2UzTnBiWEJzWlZScGJXVnpaWEpwWlhOOUlHWnliMjBnSnk0dmMybHRjR3hsWDNScGJXVnpaWEpwWlhNblhHNXBiWEJ2Y25RZ2UyUXpYMk5zWVhOekxDQkVNME52YlhCdmJtVnVkRUpoYzJWOUlHWnliMjBnSjBCeWIyTnJaWEppYjNndmFHVnNjR1Z5Y3lkY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHSmxabTl5WlY5aFpuUmxjbDkwYVcxbGMyVnlhV1Z6S0hSaGNtZGxkQ2tnZTF4dUlDQnlaWFIxY200Z2JtVjNJRUpsWm05eVpVRm1kR1Z5VkdsdFpYTmxjbWxsY3loMFlYSm5aWFFwWEc1OVhHNWNibU5zWVhOeklFSmxabTl5WlVGbWRHVnlWR2x0WlhObGNtbGxjeUJsZUhSbGJtUnpJRVF6UTI5dGNHOXVaVzUwUW1GelpTQjdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9kR0Z5WjJWMEtTQjdYRzRnSUNBZ2MzVndaWElvZEdGeVoyVjBLVnh1SUNBZ0lIUm9hWE11WDNkeVlYQndaWEpmWTJ4aGMzTWdQU0JjSW1KaExYUnBiV1Z6WlhKcFpYTXRkM0poY0Z3aVhHNGdJSDFjYmx4dUlDQndjbTl3Y3lncElIc2djbVYwZFhKdUlGdGNJbVJoZEdGY0lpeGNJbUpsWm05eVpWd2lMRndpWVdaMFpYSmNJaXhjSW5keVlYQndaWEpmWTJ4aGMzTmNJbDBnZlZ4dVhHNGdJR1J5WVhjb0tTQjdYRzVjYmlBZ0lDQmpiMjV6ZENCMGMzY2dQU0F5TlRCY2JpQWdJQ0FnSUN3Z2RXNXBkRjl6YVhwbElEMGdkSE4zTDNSb2FYTXVaR0YwWVNncExteGxibWQwYUZ4dUlDQWdJQ0FnTENCaVpXWnZjbVZmY0c5eklEMGdkR2hwY3k1aVpXWnZjbVVvS1Z4dUlDQWdJQ0FnTENCaFpuUmxjbDl3YjNNZ1BTQjBhR2x6TG1GbWRHVnlLQ2xjYmx4dVhHNGdJQ0FnWTI5dWMzUWdkR2x0WlhObGNtbGxjeUE5SUdRelgyTnNZWE56S0hSb2FYTXVYM1JoY21kbGRDeDBhR2x6TG5keVlYQndaWEpmWTJ4aGMzTW9LU3hjSW5OMloxd2lLVnh1SUNBZ0lDQWdMbk4wZVd4bEtGd2laR2x6Y0d4aGVWd2lMRndpWW14dlkydGNJaWxjYmlBZ0lDQWdJQzV6ZEhsc1pTaGNJbTFoY21kcGJsd2lMRndpWVhWMGIxd2lLVnh1SUNBZ0lDQWdMbk4wZVd4bEtGd2liV0Z5WjJsdUxXSnZkSFJ2YlZ3aUxGd2lNekJ3ZUZ3aUtWeHVJQ0FnSUNBZ0xtRjBkSElvWENKM2FXUjBhRndpTEhSemR5QXJJRndpY0hoY0lpbGNiaUFnSUNBZ0lDNWhkSFJ5S0Z3aWFHVnBaMmgwWENJc1hDSTNNSEI0WENJcFhHNWNiaUFnSUNCemFXMXdiR1ZVYVcxbGMyVnlhV1Z6S0hScGJXVnpaWEpwWlhNc2RHaHBjeTVrWVhSaEtDa3NkSE4zS1Z4dVhHNGdJQ0FnTHk4Z1lXUmtJR1JsWTI5eVlYUnBiMjV6WEc1Y2JpQWdJQ0JrTTE5amJHRnpjeWgwYVcxbGMyVnlhV1Z6TEZ3aWJXbGtaR3hsWENJc1hDSnNhVzVsWENJcFhHNGdJQ0FnSUNBdWMzUjViR1VvWENKemRISnZhMlV0WkdGemFHRnljbUY1WENJc0lGd2lNU3cxWENJcFhHNGdJQ0FnSUNBdVlYUjBjaWhjSW5OMGNtOXJaUzEzYVdSMGFGd2lMREVwWEc0Z0lDQWdJQ0F1WVhSMGNpaGNJbk4wY205clpWd2lMRndpWW14aFkydGNJaWxjYmlBZ0lDQWdJQzVoZEhSeUtGd2llVEZjSWl3Z01DbGNiaUFnSUNBZ0lDNWhkSFJ5S0Z3aWVUSmNJaXdnTlRVcFhHNGdJQ0FnSUNBdVlYUjBjaWhjSW5neFhDSXNJSFJ6ZHk4eUtWeHVJQ0FnSUNBZ0xtRjBkSElvWENKNE1sd2lMQ0IwYzNjdk1pbGNibHh1SUNBZ0lHUXpYMk5zWVhOektIUnBiV1Z6WlhKcFpYTXNYQ0p0YVdSa2JHVXRkR1Y0ZEZ3aUxGd2lkR1Y0ZEZ3aUtWeHVJQ0FnSUNBZ0xtRjBkSElvWENKNFhDSXNJSFJ6ZHk4eUtWeHVJQ0FnSUNBZ0xtRjBkSElvWENKNVhDSXNJRFkzS1Z4dUlDQWdJQ0FnTG5OMGVXeGxLRndpZEdWNGRDMWhibU5vYjNKY0lpeGNJbTFwWkdSc1pWd2lLVnh1SUNBZ0lDQWdMblJsZUhRb1hDSlBiaTF6YVhSbFhDSXBYRzVjYmlBZ0lDQmtNMTlqYkdGemN5aDBhVzFsYzJWeWFXVnpMRndpWW1WbWIzSmxYQ0lzWENKc2FXNWxYQ0lwWEc0Z0lDQWdJQ0F1YzNSNWJHVW9YQ0p6ZEhKdmEyVXRaR0Z6YUdGeWNtRjVYQ0lzSUZ3aU1TdzFYQ0lwWEc0Z0lDQWdJQ0F1WVhSMGNpaGNJbk4wY205clpTMTNhV1IwYUZ3aUxERXBYRzRnSUNBZ0lDQXVZWFIwY2loY0luTjBjbTlyWlZ3aUxGd2lZbXhoWTJ0Y0lpbGNiaUFnSUNBZ0lDNWhkSFJ5S0Z3aWVURmNJaXdnTXprcFhHNGdJQ0FnSUNBdVlYUjBjaWhjSW5reVhDSXNJRFExS1Z4dUlDQWdJQ0FnTG1GMGRISW9YQ0o0TVZ3aUxDQjFibWwwWDNOcGVtVXFZbVZtYjNKbFgzQnZjeWxjYmlBZ0lDQWdJQzVoZEhSeUtGd2llREpjSWl3Z2RXNXBkRjl6YVhwbEttSmxabTl5WlY5d2IzTXBYRzVjYmlBZ0lDQmtNMTlqYkdGemN5aDBhVzFsYzJWeWFXVnpMRndpWW1WbWIzSmxMWFJsZUhSY0lpeGNJblJsZUhSY0lpbGNiaUFnSUNBZ0lDNWhkSFJ5S0Z3aWVGd2lMQ0IxYm1sMFgzTnBlbVVxWW1WbWIzSmxYM0J2Y3lBdElEZ3BYRzRnSUNBZ0lDQXVZWFIwY2loY0lubGNJaXdnTkRncFhHNGdJQ0FnSUNBdWMzUjViR1VvWENKMFpYaDBMV0Z1WTJodmNsd2lMRndpWlc1a1hDSXBYRzRnSUNBZ0lDQXVkR1Y0ZENoY0lrTnZibk5wWkdWeVlYUnBiMjVjSWlsY2JseHVJQ0FnSUdRelgyTnNZWE56S0hScGJXVnpaWEpwWlhNc1hDSjNhVzVrYjNkY0lpeGNJbXhwYm1WY0lpbGNiaUFnSUNBZ0lDNXpkSGxzWlNoY0luTjBjbTlyWlMxa1lYTm9ZWEp5WVhsY0lpd2dYQ0l4TERWY0lpbGNiaUFnSUNBZ0lDNWhkSFJ5S0Z3aWMzUnliMnRsTFhkcFpIUm9YQ0lzTVNsY2JpQWdJQ0FnSUM1aGRIUnlLRndpYzNSeWIydGxYQ0lzWENKaWJHRmphMXdpS1Z4dUlDQWdJQ0FnTG1GMGRISW9YQ0o1TVZ3aUxDQTBOU2xjYmlBZ0lDQWdJQzVoZEhSeUtGd2llVEpjSWl3Z05EVXBYRzRnSUNBZ0lDQXVZWFIwY2loY0luZ3hYQ0lzSUhWdWFYUmZjMmw2WlNvb1ltVm1iM0psWDNCdmN5a3BYRzRnSUNBZ0lDQXVZWFIwY2loY0luZ3lYQ0lzSUhWdWFYUmZjMmw2WlNvb1lXWjBaWEpmY0c5ekt6RXBLekVwWEc1Y2JpQWdJQ0JrTTE5amJHRnpjeWgwYVcxbGMyVnlhV1Z6TEZ3aVlXWjBaWEpjSWl4Y0lteHBibVZjSWlsY2JpQWdJQ0FnSUM1emRIbHNaU2hjSW5OMGNtOXJaUzFrWVhOb1lYSnlZWGxjSWl3Z1hDSXhMRFZjSWlsY2JpQWdJQ0FnSUM1aGRIUnlLRndpYzNSeWIydGxMWGRwWkhSb1hDSXNNU2xjYmlBZ0lDQWdJQzVoZEhSeUtGd2ljM1J5YjJ0bFhDSXNYQ0ppYkdGamExd2lLVnh1SUNBZ0lDQWdMbUYwZEhJb1hDSjVNVndpTENBek9TbGNiaUFnSUNBZ0lDNWhkSFJ5S0Z3aWVUSmNJaXdnTkRVcFhHNGdJQ0FnSUNBdVlYUjBjaWhjSW5neFhDSXNJSFZ1YVhSZmMybDZaU29vWVdaMFpYSmZjRzl6S3pFcEtWeHVJQ0FnSUNBZ0xtRjBkSElvWENKNE1sd2lMQ0IxYm1sMFgzTnBlbVVxS0dGbWRHVnlYM0J2Y3lzeEtTbGNibHh1SUNBZ0lHUXpYMk5zWVhOektIUnBiV1Z6WlhKcFpYTXNYQ0poWm5SbGNpMTBaWGgwWENJc1hDSjBaWGgwWENJcFhHNGdJQ0FnSUNBdVlYUjBjaWhjSW5oY0lpd2dkVzVwZEY5emFYcGxLaWhoWm5SbGNsOXdiM01yTVNrZ0t5QTRLVnh1SUNBZ0lDQWdMbUYwZEhJb1hDSjVYQ0lzSURRNEtWeHVJQ0FnSUNBZ0xuTjBlV3hsS0Z3aWRHVjRkQzFoYm1Ob2IzSmNJaXhjSW5OMFlYSjBYQ0lwWEc0Z0lDQWdJQ0F1ZEdWNGRDaGNJbFpoYkdsa1lYUnBiMjVjSWlsY2JseHVYRzVjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6WEc0Z0lIMWNibHh1ZlZ4dVhHNWNiaUlzSW1sdGNHOXlkQ0I3WkROZmRYQmtZWFJsWVdKc1pTd2daRE5mYzNCc1lYUjlJR1p5YjIwZ0owQnliMk5yWlhKaWIzZ3ZhR1ZzY0dWeWN5ZGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSE5wYlhCc1pVSmhjaWgzY21Gd0xIWmhiSFZsTEhOallXeGxMR052Ykc5eUtTQjdYRzVjYmlBZ2RtRnlJR2hsYVdkb2RDQTlJREl3WEc0Z0lDQWdMQ0IzYVdSMGFDQTlJSGR5WVhBdWMzUjViR1VvWENKM2FXUjBhRndpS1M1eVpYQnNZV05sS0Z3aWNIaGNJaXhjSWx3aUtWeHVYRzRnSUhaaGNpQmpZVzUyWVhNZ1BTQmtNMTkxY0dSaGRHVmhZbXhsS0hkeVlYQXNYQ0p6ZG1kY0lpeGNJbk4yWjF3aUxGdDJZV3gxWlYwc1puVnVZM1JwYjI0b0tTQjdJSEpsZEhWeWJpQXhmU2xjYmlBZ0lDQXVjM1I1YkdVb1hDSjNhV1IwYUZ3aUxIZHBaSFJvSzF3aWNIaGNJaWxjYmlBZ0lDQXVjM1I1YkdVb1hDSm9aV2xuYUhSY0lpeG9aV2xuYUhRclhDSndlRndpS1Z4dVhHNGdJSFpoY2lCamFHRnlkQ0E5SUdRelgzVndaR0YwWldGaWJHVW9ZMkZ1ZG1GekxDZG5MbU5vWVhKMEp5d25aeWNzWm1Gc2MyVXNablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUF4SUgwcFhHNGdJQ0FnTG1GMGRISW9YQ0pqYkdGemMxd2lMRndpWTJoaGNuUmNJaWxjYmlBZ1hHNGdJSFpoY2lCaVlYSnpJRDBnWkROZmMzQnNZWFFvWTJoaGNuUXNYQ0l1Y0c5d0xXSmhjbHdpTEZ3aWNtVmpkRndpTEdaMWJtTjBhVzl1S0hncElIc2djbVYwZFhKdUlIaDlMQ0JtZFc1amRHbHZiaWg0TEdrcElIc2djbVYwZFhKdUlHa2dmU2xjYmlBZ0lDQXVZWFIwY2loY0ltTnNZWE56WENJc1hDSndiM0F0WW1GeVhDSXBYRzRnSUNBZ0xtRjBkSElvSjJobGFXZG9kQ2NzYUdWcFoyaDBMVFFwWEc0Z0lDQWdMbUYwZEhJb2V5ZDRKem93TENkNUp6b3dmU2xjYmlBZ0lDQXVjM1I1YkdVb0oyWnBiR3duTEdOdmJHOXlLVnh1SUNBZ0lDNWhkSFJ5S0Z3aWQybGtkR2hjSWl4bWRXNWpkR2x2YmloNEtTQjdJSEpsZEhWeWJpQnpZMkZzWlNoNEtTQjlLVnh1WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMlF6WDNWd1pHRjBaV0ZpYkdVc0lHUXpYM053YkdGMExDQkVNME52YlhCdmJtVnVkRUpoYzJWOUlHWnliMjBnSjBCeWIyTnJaWEppYjNndmFHVnNjR1Z5Y3lkY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHUnZiV0ZwYmw5aWRXeHNaWFFvZEdGeVoyVjBLU0I3WEc0Z0lISmxkSFZ5YmlCdVpYY2dSRzl0WVdsdVFuVnNiR1YwS0hSaGNtZGxkQ2xjYm4xY2JseHVMeThnWkdGMFlTQnpZMmhsYldFNklGdDdjRzl3WDNCbGNtTmxiblFzSUhOaGJYQnNaVjl3WlhKalpXNTBYMjV2Y20xOVhHNWNibU5zWVhOeklFUnZiV0ZwYmtKMWJHeGxkQ0JsZUhSbGJtUnpJRVF6UTI5dGNHOXVaVzUwUW1GelpTQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtIUmhjbWRsZENrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2xjYmlBZ0lDQjBhR2x6TG5SaGNtZGxkQ0E5SUhSaGNtZGxkRnh1SUNCOVhHNGdJSEJ5YjNCektDa2dleUJ5WlhSMWNtNGdXMXdpWkdGMFlWd2lMRndpYldGNFhDSmRJSDFjYmx4dUlDQmtjbUYzS0NrZ2UxeHVJQ0FnSUhaaGNpQjNhV1IwYUNBOUlDaDBhR2x6TG5SaGNtZGxkQzV6ZEhsc1pTaGNJbmRwWkhSb1hDSXBMbkpsY0d4aFkyVW9YQ0p3ZUZ3aUxGd2lYQ0lwSUh4OElIUm9hWE11YjJabWMyVjBWMmxrZEdncElDMGdOVEJjYmlBZ0lDQWdJQ3dnYUdWcFoyaDBJRDBnTWpnN1hHNWNiaUFnSUNCMllYSWdlQ0E5SUdRekxuTmpZV3hsTG14cGJtVmhjaWdwWEc0Z0lDQWdJQ0F1Y21GdVoyVW9XekFzSUhkcFpIUm9YU2xjYmlBZ0lDQWdJQzVrYjIxaGFXNG9XekFzSUhSb2FYTXViV0Y0S0NsZEtWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdWRHRnlaMlYwTG5SbGVIUW9LU2tnZEdocGN5NTBZWEpuWlhRdWRHVjRkQ2hjSWx3aUtWeHVYRzRnSUNBZ2RtRnlJR0oxYkd4bGRDQTlJR1F6WDNWd1pHRjBaV0ZpYkdVb2RHaHBjeTUwWVhKblpYUXNYQ0l1WW5Wc2JHVjBYQ0lzWENKa2FYWmNJaXgwYUdsekxtUmhkR0VvS1N4bWRXNWpkR2x2YmloNEtTQjdJSEpsZEhWeWJpQXhJSDBwWEc0Z0lDQWdJQ0F1WTJ4aGMzTmxaQ2hjSW1KMWJHeGxkRndpTEhSeWRXVXBYRzRnSUNBZ0lDQXVjM1I1YkdVb1hDSnRZWEpuYVc0dGRHOXdYQ0lzWENJemNIaGNJaWxjYmx4dUlDQWdJSFpoY2lCemRtY2dQU0JrTTE5MWNHUmhkR1ZoWW14bEtHSjFiR3hsZEN4Y0luTjJaMXdpTEZ3aWMzWm5YQ0lzWm1Gc2MyVXNablZ1WTNScGIyNG9lQ2tnZXlCeVpYUjFjbTRnTVgwcFhHNGdJQ0FnSUNBdVlYUjBjaWhjSW5kcFpIUm9YQ0lzZDJsa2RHZ3BYRzRnSUNBZ0lDQXVZWFIwY2loY0ltaGxhV2RvZEZ3aUxHaGxhV2RvZENsY2JpQWdYRzRnSUNCY2JpQWdJQ0JrTTE5MWNHUmhkR1ZoWW14bEtITjJaeXhjSWk1aVlYSXRNVndpTEZ3aWNtVmpkRndpTEdaaGJITmxMR1oxYm1OMGFXOXVLSGdwSUhzZ2NtVjBkWEp1SURGOUtWeHVJQ0FnSUNBZ0xtTnNZWE56WldRb1hDSmlZWEl0TVZ3aUxIUnlkV1VwWEc0Z0lDQWdJQ0F1WVhSMGNpaGNJbmhjSWl3d0tWeHVJQ0FnSUNBZ0xtRjBkSElvWENKM2FXUjBhRndpTENCbWRXNWpkR2x2Ymloa0tTQjdjbVYwZFhKdUlIZ29aQzV3YjNCZmNHVnlZMlZ1ZENrZ2ZTbGNiaUFnSUNBZ0lDNWhkSFJ5S0Z3aWFHVnBaMmgwWENJc0lHaGxhV2RvZENsY2JpQWdJQ0FnSUM1aGRIUnlLRndpWm1sc2JGd2lMRndpSXpnNE9Gd2lLVnh1SUNCY2JpQWdJQ0JrTTE5MWNHUmhkR1ZoWW14bEtITjJaeXhjSWk1aVlYSXRNbHdpTEZ3aWNtVmpkRndpTEdaaGJITmxMR1oxYm1OMGFXOXVLSGdwSUhzZ2NtVjBkWEp1SURGOUtWeHVJQ0FnSUNBZ0xtTnNZWE56WldRb1hDSmlZWEl0TWx3aUxIUnlkV1VwWEc0Z0lDQWdJQ0F1WVhSMGNpaGNJbmhjSWl3d0tWeHVJQ0FnSUNBZ0xtRjBkSElvWENKNVhDSXNhR1ZwWjJoMEx6UXBYRzRnSUNBZ0lDQXVZWFIwY2loY0luZHBaSFJvWENJc0lHWjFibU4wYVc5dUtHUXBJSHR5WlhSMWNtNGdlQ2hrTG5OaGJYQnNaVjl3WlhKalpXNTBYMjV2Y20wcElIMHBYRzRnSUNBZ0lDQXVZWFIwY2loY0ltaGxhV2RvZEZ3aUxDQm9aV2xuYUhRdk1pbGNiaUFnSUNBZ0lDNWhkSFJ5S0Z3aVptbHNiRndpTEZ3aWNtZGlLRGdzSURJNUxDQTRPQ2xjSWlsY2JseHVJQ0FnSUhKbGRIVnliaUIwYUdseklGeHVJQ0I5WEc1OVhHNGlMQ0oyWVhJZ2RtVnljMmx2YmlBOUlGd2lNQzR3TGpGY0lqc2daWGh3YjNKMElDb2dabkp2YlNCY0lpNHVMMmx1WkdWNFhDSTdJR1Y0Y0c5eWRDQjdkbVZ5YzJsdmJuMDdJbDBzSW01aGJXVnpJanBiSW5OcGJYQnNaVlJwYldWelpYSnBaWE1pTENKMFlYSm5aWFFpTENKa1lYUmhJaXdpZHlJc0ltZ2lMQ0p0YVc0aUxDSjNhV1IwYUNJc0ltaGxhV2RvZENJc0luZ2lMQ0prTXlJc0luTmpZV3hsSWl3aWIzSmthVzVoYkNJc0ltUnZiV0ZwYmlJc0luSmhibWRsSWl3aWJHVnVaM1JvSWl3aWVTSXNJbXhwYm1WaGNpSXNJbTFoZUNJc0luZHlZWEFpTENKa00xOTFjR1JoZEdWaFlteGxJaXdpYVNJc0ltRjBkSElpTENKNklpd2lZbVZtYjNKbFgyRm1kR1Z5WDNScGJXVnpaWEpwWlhNaUxDSkNaV1p2Y21WQlpuUmxjbFJwYldWelpYSnBaWE1pTENKZmQzSmhjSEJsY2w5amJHRnpjeUlzSW5SemR5SXNJblZ1YVhSZmMybDZaU0lzSW1KbFptOXlaVjl3YjNNaUxDSmlaV1p2Y21VaUxDSmhablJsY2w5d2IzTWlMQ0poWm5SbGNpSXNJblJwYldWelpYSnBaWE1pTENKa00xOWpiR0Z6Y3lJc0lsOTBZWEpuWlhRaUxDSjNjbUZ3Y0dWeVgyTnNZWE56SWl3aWMzUjViR1VpTENKMFpYaDBJaXdpUkRORGIyMXdiMjVsYm5SQ1lYTmxJaXdpYzJsdGNHeGxRbUZ5SWl3aWRtRnNkV1VpTENKamIyeHZjaUlzSW5KbGNHeGhZMlVpTENKallXNTJZWE1pTENKamFHRnlkQ0lzSW1KaGNuTWlMQ0prTTE5emNHeGhkQ0lzSW1SdmJXRnBibDlpZFd4c1pYUWlMQ0pFYjIxaGFXNUNkV3hzWlhRaUxDSnZabVp6WlhSWGFXUjBhQ0lzSW1KMWJHeGxkQ0lzSW1Oc1lYTnpaV1FpTENKemRtY2lMQ0prSWl3aWNHOXdYM0JsY21ObGJuUWlMQ0p6WVcxd2JHVmZjR1Z5WTJWdWRGOXViM0p0SWl3aWRtVnljMmx2YmlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJRVThzU1VGQlRTeG5Ra0ZCWjBJc1UwRkJhRUlzWTBGQlowSXNVVUZCUVN4VlFVRkJMRTFCUVVFc1RVRkJRU3hSUVVFeVF6dE5RVU5zUlN4UFFVRlBMRkZCUVZnN1RVRkRTU3h2UWtGQllTeFZRVUZCTEZWQlFVRXNTMEZEWml4VlFVRkJMRWRCUVZjN1YwRkJVU3hQUVVGUExFTkJRVkFzVVVGQlowSXNRMEZCZGtJN1IwRkVSeXhGUVVWbUxGVkJRVlVzVlVGQlFTeEhRVUZYTzFkQlFWRXNRMEZCVURzN08yRkJSM2hDTEZGQlFVRXNUMEZCUVRzN1UwRkhRVHM3TzBGQlIwWXNTVUZCWVN4WFFVRlhMRk5CUVZnc1UwRkJWeXhSUVVGQkxGVkJRVUVzVFVGQlFTeE5RVUZCTEZGQlFUSkRPMDFCUXpkRUxFOUJRVThzVVVGQldEdE5RVU5KTEc5Q1FVRmhMRlZCUVVFc1ZVRkJRU3hMUVVObUxGRkJRVkVzVlVGQlFTeEhRVUZYTzFkQlFVTTdSMEZFVEN4RlFVVm1MRlZCUVZVc1ZVRkJRU3hIUVVGWE8xZEJRVU03T3p0aFFVZDRRaXhSUVVGQkxFOUJRVUU3TzFOQlIwRTdPenRCUVVkR0xGTkJRVThzVTBGQlFTeFJRVUZCTEV0QlFVRXNUVUZCUVN4TlFVRjNRenRUUVVOMFF5eGpRVUZCTEZGQlFYRkNMRTFCUVhKQ0xFdEJRV2RETEZGQlFXaERMRTlCUVVFc1RVRkJRU3hSUVVGQkxFdEJRVkE3T3p0QlFVbEdMRk5CUVU4c1QwRkJaMEk3UVVGRGRrSXNRVUZIUVN4VFFVRlBMRk5CUVVFc1RVRkJRU3hMUVVFMlFqdE5RVU01UWl4UlFVRktMRmRCUVhWQ0xFOUJRVThzUzBGQlN5eE5RVUZhTzA5QlEyeENMRTFCUVV3c1VVRkJRVHRUUVVOQk96czdRVUZIUml4SlFVRkJPekpDUVVORkxGRkJRVzlDT3pzN096dFRRVU5zUWl4VlFVRkJPMU5CUTBFc1RVRkJRVHRUUVVOQkxGRkJRVUVzU1VGQmFVSXNZVUZCU3p0WlFVTndRaXhMUVVGVkxGTkJRVUVzV1VGQlZqczdPenM3T3pSQ1FVZEpPMkZCUTBNc1EwRkJVRHM3T3p0MVFrRlVTaXhSUVVGQkxFbEJWMmRDTzFWQlExSXNUMEZCU2l4WFFVRnpRaXhQUVVGUExFdEJRVUVzU1VGQlFTeFhRVUZRTzFkQlEzUkNMRWxCUVVFc1ZVRkJRVHRoUVVOQk96czdPenM3UVVOeVJFY3NVMEZCVTBFc1owSkJRVlFzUTBGQk1FSkRMRTFCUVRGQ0xFVkJRV2xEUXl4SlFVRnFReXhGUVVGelEwTXNRMEZCZEVNc1JVRkJkME5ETEVOQlFYaERMRVZCUVRCRFF5eEhRVUV4UXl4RlFVRXJRenROUVVOb1JFTXNVVUZCVVVnc1MwRkJTeXhIUVVGcVFqdE5RVU5KU1N4VFFVRlRTQ3hMUVVGTExFVkJSR3hDT3p0TlFVZEpTU3hKUVVGSlF5eEhRVUZIUXl4TFFVRklMRU5CUVZORExFOUJRVlFzUjBGQmJVSkRMRTFCUVc1Q0xFTkJRVEJDU0N4SFFVRkhTU3hMUVVGSUxFTkJRVk1zUTBGQlZDeEZRVUZYV0N4TFFVRkxXU3hOUVVGb1FpeERRVUV4UWl4RlFVRnRSRVFzUzBGQmJrUXNRMEZCZVVSS0xFZEJRVWRKTEV0QlFVZ3NRMEZCVXl4RFFVRlVMRVZCUVZkUUxFdEJRVmdzUlVGQmFVSkJMRkZCUVUxS0xFdEJRVXRaTEUxQlFUVkNMRU5CUVhwRUxFTkJRVkk3VFVGRFNVTXNTVUZCU1U0c1IwRkJSME1zUzBGQlNDeERRVUZUVFN4TlFVRlVMRWRCUVd0Q1NDeExRVUZzUWl4RFFVRjNRaXhEUVVGRExFTkJRVVFzUlVGQlIwNHNUVUZCU0N4RFFVRjRRaXhGUVVGdlEwc3NUVUZCY0VNc1EwRkJNa01zUTBGQlExQXNUMEZCVDBrc1IwRkJSMG9zUjBGQlNDeERRVUZQU0N4SlFVRlFMRU5CUVZJc1JVRkJjVUpQTEVkQlFVZFJMRWRCUVVnc1EwRkJUMllzU1VGQlVDeERRVUZ5UWl4RFFVRXpReXhEUVVGU096dE5RVVZKWjBJc1QwRkJUME1zWTBGQlkyeENMRTFCUVdRc1JVRkJjVUlzUjBGQmNrSXNSVUZCZVVJc1IwRkJla0lzUlVGQk5rSkRMRWxCUVRkQ0xFVkJRV3RETEZWQlFWTk5MRU5CUVZRc1JVRkJWMWtzUTBGQldDeEZRVUZqTzFkQlFWTXNRMEZCVUR0SFFVRnNSQ3hEUVVGWU96dFhRVVZUUml4SlFVRlVMRVZCUVdNc1RVRkJaQ3hGUVVGeFFpeE5RVUZ5UWl4RlFVRTBRanRYUVVGTFZpeERRVUZNTzBkQlFUVkNMRVZCUVc5RExGVkJRVU5CTEVOQlFVUXNSVUZCUjFrc1EwRkJTRHRYUVVGVFFTeERRVUZVTzBkQlFYQkRMRVZCUTBkRExFbEJSRWdzUTBGRFVTeEhRVVJTTEVWQlExa3NWVUZCUTBNc1EwRkJSQ3hGUVVGSFJpeERRVUZJTzFkQlFWTmFMRVZCUVVWWkxFTkJRVVlzUTBGQlZEdEhRVVJhTEVWQlJVZERMRWxCUmtnc1EwRkZVU3hQUVVaU0xFVkJSV2xDWml4UlFVRk5TaXhMUVVGTFdTeE5RVUZZTEVkQlFXMUNMRWRCUm5CRExFVkJSMGRQTEVsQlNFZ3NRMEZIVVN4SFFVaFNMRVZCUjJFN1YwRkJTMlFzVTBGQlUxRXNSVUZCUlU4c1EwRkJSaXhEUVVGa08wZEJTR0lzUlVGSlIwUXNTVUZLU0N4RFFVbFJMRkZCU2xJc1JVRkphMEk3VjBGQlMwTXNTVUZCU1ZBc1JVRkJSVThzUTBGQlJpeERRVUZLTEVkQlFWY3NRMEZCYUVJN1IwRktiRUk3TzFOQlRVOUtMRWxCUVZBN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJSTExGTkJRVk5MTEhWQ1FVRlVMRU5CUVdsRGRFSXNUVUZCYWtNc1JVRkJlVU03VTBGRGRrTXNTVUZCU1hWQ0xIRkNRVUZLTEVOQlFUQkNka0lzVFVGQk1VSXNRMEZCVURzN08wbEJSMGwxUWpzN08ybERRVVZSZGtJc1RVRkJXaXhGUVVGdlFqczdPelpKUVVOYVFTeE5RVVJaT3p0VlFVVmlkMElzWTBGQlRDeEhRVUZ6UWl4dlFrRkJkRUk3T3pzN096czBRa0ZIVFR0aFFVRlRMRU5CUVVNc1RVRkJSQ3hGUVVGUkxGRkJRVklzUlVGQmFVSXNUMEZCYWtJc1JVRkJlVUlzWlVGQmVrSXNRMEZCVURzN096c3lRa0ZGU0RzN1ZVRkZRME1zVFVGQlRTeEhRVUZhTzFWQlEwbERMRmxCUVZsRUxFMUJRVWtzUzBGQlMzaENMRWxCUVV3c1IwRkJXVmtzVFVGRWFFTTdWVUZGU1dNc1lVRkJZU3hMUVVGTFF5eE5RVUZNTEVWQlJtcENPMVZCUjBsRExGbEJRVmtzUzBGQlMwTXNTMEZCVEN4RlFVaG9RanM3VlVGTlRVTXNZVUZCWVVNc1UwRkJVeXhMUVVGTFF5eFBRVUZrTEVWQlFYTkNMRXRCUVV0RExHRkJRVXdzUlVGQmRFSXNSVUZCTWtNc1MwRkJNME1zUlVGRGFFSkRMRXRCUkdkQ0xFTkJRMVlzVTBGRVZTeEZRVU5CTEU5QlJFRXNSVUZGYUVKQkxFdEJSbWRDTEVOQlJWWXNVVUZHVlN4RlFVVkVMRTFCUmtNc1JVRkhhRUpCTEV0QlNHZENMRU5CUjFZc1pVRklWU3hGUVVkTkxFMUJTRTRzUlVGSmFFSm1MRWxCU21kQ0xFTkJTVmdzVDBGS1Z5eEZRVWxJU3l4TlFVRk5MRWxCU2tnc1JVRkxhRUpNTEVsQlRHZENMRU5CUzFnc1VVRk1WeXhGUVV0R0xFMUJURVVzUTBGQmJrSTdPM1ZDUVU5cFFsY3NWVUZCYWtJc1JVRkJORUlzUzBGQlN6bENMRWxCUVV3c1JVRkJOVUlzUlVGQmQwTjNRaXhIUVVGNFF6czdPenRsUVVsVFRTeFZRVUZVTEVWQlFXOUNMRkZCUVhCQ0xFVkJRVFpDTEUxQlFUZENMRVZCUTBkSkxFdEJSRWdzUTBGRFV5eHJRa0ZFVkN4RlFVTTJRaXhMUVVRM1FpeEZRVVZIWml4SlFVWklMRU5CUlZFc1kwRkdVaXhGUVVWMVFpeERRVVoyUWl4RlFVZEhRU3hKUVVoSUxFTkJSMUVzVVVGSVVpeEZRVWRwUWl4UFFVaHFRaXhGUVVsSFFTeEpRVXBJTEVOQlNWRXNTVUZLVWl4RlFVbGpMRU5CU21Rc1JVRkxSMEVzU1VGTVNDeERRVXRSTEVsQlRGSXNSVUZMWXl4RlFVeGtMRVZCVFVkQkxFbEJUa2dzUTBGTlVTeEpRVTVTTEVWQlRXTkxMRTFCUVVrc1EwRk9iRUlzUlVGUFIwd3NTVUZRU0N4RFFVOVJMRWxCVUZJc1JVRlBZMHNzVFVGQlNTeERRVkJzUWpzN1pVRlRVMDBzVlVGQlZDeEZRVUZ2UWl4aFFVRndRaXhGUVVGclF5eE5RVUZzUXl4RlFVTkhXQ3hKUVVSSUxFTkJRMUVzUjBGRVVpeEZRVU5oU3l4TlFVRkpMRU5CUkdwQ0xFVkJSVWRNTEVsQlJrZ3NRMEZGVVN4SFFVWlNMRVZCUldFc1JVRkdZaXhGUVVkSFpTeExRVWhJTEVOQlIxTXNZVUZJVkN4RlFVZDFRaXhSUVVoMlFpeEZRVWxIUXl4SlFVcElMRU5CU1ZFc1UwRktVanM3WlVGTlUwd3NWVUZCVkN4RlFVRnZRaXhSUVVGd1FpeEZRVUUyUWl4TlFVRTNRaXhGUVVOSFNTeExRVVJJTEVOQlExTXNhMEpCUkZRc1JVRkROa0lzUzBGRU4wSXNSVUZGUjJZc1NVRkdTQ3hEUVVWUkxHTkJSbElzUlVGRmRVSXNRMEZHZGtJc1JVRkhSMEVzU1VGSVNDeERRVWRSTEZGQlNGSXNSVUZIYVVJc1QwRklha0lzUlVGSlIwRXNTVUZLU0N4RFFVbFJMRWxCU2xJc1JVRkpZeXhGUVVwa0xFVkJTMGRCTEVsQlRFZ3NRMEZMVVN4SlFVeFNMRVZCUzJNc1JVRk1aQ3hGUVUxSFFTeEpRVTVJTEVOQlRWRXNTVUZPVWl4RlFVMWpUU3haUVVGVlF5eFZRVTU0UWl4RlFVOUhVQ3hKUVZCSUxFTkJUMUVzU1VGUVVpeEZRVTlqVFN4WlFVRlZReXhWUVZCNFFqczdaVUZUVTBrc1ZVRkJWQ3hGUVVGdlFpeGhRVUZ3UWl4RlFVRnJReXhOUVVGc1F5eEZRVU5IV0N4SlFVUklMRU5CUTFFc1IwRkVVaXhGUVVOaFRTeFpRVUZWUXl4VlFVRldMRWRCUVhWQ0xFTkJSSEJETEVWQlJVZFFMRWxCUmtnc1EwRkZVU3hIUVVaU0xFVkJSV0VzUlVGR1lpeEZRVWRIWlN4TFFVaElMRU5CUjFNc1lVRklWQ3hGUVVkMVFpeExRVWgyUWl4RlFVbEhReXhKUVVwSUxFTkJTVkVzWlVGS1VqczdaVUZOVTB3c1ZVRkJWQ3hGUVVGdlFpeFJRVUZ3UWl4RlFVRTJRaXhOUVVFM1FpeEZRVU5IU1N4TFFVUklMRU5CUTFNc2EwSkJSRlFzUlVGRE5rSXNTMEZFTjBJc1JVRkZSMllzU1VGR1NDeERRVVZSTEdOQlJsSXNSVUZGZFVJc1EwRkdka0lzUlVGSFIwRXNTVUZJU0N4RFFVZFJMRkZCU0ZJc1JVRkhhVUlzVDBGSWFrSXNSVUZKUjBFc1NVRktTQ3hEUVVsUkxFbEJTbElzUlVGSll5eEZRVXBrTEVWQlMwZEJMRWxCVEVnc1EwRkxVU3hKUVV4U0xFVkJTMk1zUlVGTVpDeEZRVTFIUVN4SlFVNUlMRU5CVFZFc1NVRk9VaXhGUVUxalRTeFpRVUZYUXl4VlFVNTZRaXhGUVU5SFVDeEpRVkJJTEVOQlQxRXNTVUZRVWl4RlFVOWpUU3hoUVVGWFJ5eFpRVUZWTEVOQlFYSkNMRWxCUVhkQ0xFTkJVSFJET3p0bFFWTlRSU3hWUVVGVUxFVkJRVzlDTEU5QlFYQkNMRVZCUVRSQ0xFMUJRVFZDTEVWQlEwZEpMRXRCUkVnc1EwRkRVeXhyUWtGRVZDeEZRVU0yUWl4TFFVUTNRaXhGUVVWSFppeEpRVVpJTEVOQlJWRXNZMEZHVWl4RlFVVjFRaXhEUVVaMlFpeEZRVWRIUVN4SlFVaElMRU5CUjFFc1VVRklVaXhGUVVkcFFpeFBRVWhxUWl4RlFVbEhRU3hKUVVwSUxFTkJTVkVzU1VGS1VpeEZRVWxqTEVWQlNtUXNSVUZMUjBFc1NVRk1TQ3hEUVV0UkxFbEJURklzUlVGTFl5eEZRVXhrTEVWQlRVZEJMRWxCVGtnc1EwRk5VU3hKUVU1U0xFVkJUV05OTEdGQlFWZEhMRmxCUVZVc1EwRkJja0lzUTBGT1pDeEZRVTlIVkN4SlFWQklMRU5CVDFFc1NVRlFVaXhGUVU5alRTeGhRVUZYUnl4WlFVRlZMRU5CUVhKQ0xFTkJVR1E3TzJWQlUxTkZMRlZCUVZRc1JVRkJiMElzV1VGQmNFSXNSVUZCYVVNc1RVRkJha01zUlVGRFIxZ3NTVUZFU0N4RFFVTlJMRWRCUkZJc1JVRkRZVTBzWVVGQlYwY3NXVUZCVlN4RFFVRnlRaXhKUVVFd1FpeERRVVIyUXl4RlFVVkhWQ3hKUVVaSUxFTkJSVkVzUjBGR1VpeEZRVVZoTEVWQlJtSXNSVUZIUjJVc1MwRklTQ3hEUVVkVExHRkJTRlFzUlVGSGRVSXNUMEZJZGtJc1JVRkpSME1zU1VGS1NDeERRVWxSTEZsQlNsSTdPMkZCVTA4c1NVRkJVRHM3T3p0RlFYSkdaME5ET3p0QlEwdzNRaXhUUVVGVFF5eFRRVUZVTEVOQlFXMUNja0lzU1VGQmJrSXNSVUZCZDBKelFpeExRVUY0UWl4RlFVRTRRamxDTEV0QlFUbENMRVZCUVc5REswSXNTMEZCY0VNc1JVRkJNa003TzAxQlJUVkRiRU1zVTBGQlV5eEZRVUZpTzAxQlEwbEVMRkZCUVZGWkxFdEJRVXRyUWl4TFFVRk1MRU5CUVZjc1QwRkJXQ3hGUVVGdlFrMHNUMEZCY0VJc1EwRkJORUlzU1VGQk5VSXNSVUZCYVVNc1JVRkJha01zUTBGRVdqczdUVUZIU1VNc1UwRkJVM2hDTEdOQlFXTkVMRWxCUVdRc1JVRkJiVUlzUzBGQmJrSXNSVUZCZVVJc1MwRkJla0lzUlVGQkswSXNRMEZCUTNOQ0xFdEJRVVFzUTBGQkwwSXNSVUZCZFVNc1dVRkJWenRYUVVGVExFTkJRVkE3UjBGQmNFUXNSVUZEVmtvc1MwRkVWU3hEUVVOS0xFOUJSRWtzUlVGRFNUbENMRkZCUVUwc1NVRkVWaXhGUVVWV09FSXNTMEZHVlN4RFFVVktMRkZCUmtrc1JVRkZTemRDTEZOQlFVOHNTVUZHV2l4RFFVRmlPenROUVVsSmNVTXNVVUZCVVhwQ0xHTkJRV04zUWl4TlFVRmtMRVZCUVhGQ0xGTkJRWEpDTEVWQlFTdENMRWRCUVM5Q0xFVkJRVzFETEV0QlFXNURMRVZCUVhsRExGbEJRVmM3VjBGQlV5eERRVUZRTzBkQlFYUkVMRVZCUTFSMFFpeEpRVVJUTEVOQlEwb3NUMEZFU1N4RlFVTkpMRTlCUkVvc1EwRkJXanM3VFVGSFNYZENMRTlCUVU5RExGTkJRVk5HTEV0QlFWUXNSVUZCWlN4VlFVRm1MRVZCUVRCQ0xFMUJRVEZDTEVWQlFXbERMRlZCUVZOd1F5eERRVUZVTEVWQlFWazdWMEZCVTBFc1EwRkJVRHRIUVVFdlF5eEZRVUV3UkN4VlFVRlRRU3hEUVVGVUxFVkJRVmRaTEVOQlFWZ3NSVUZCWXp0WFFVRlRRU3hEUVVGUU8wZEJRVEZGTEVWQlExSkRMRWxCUkZFc1EwRkRTQ3hQUVVSSExFVkJRMHNzVTBGRVRDeEZRVVZTUVN4SlFVWlJMRU5CUlVnc1VVRkdSeXhGUVVWTlpDeFRRVUZQTEVOQlJtSXNSVUZIVW1Nc1NVRklVU3hEUVVkSUxFVkJRVU1zUzBGQlNTeERRVUZNTEVWQlFVOHNTMEZCU1N4RFFVRllMRVZCU0Vjc1JVRkpVbVVzUzBGS1VTeERRVWxHTEUxQlNrVXNSVUZKUzBzc1MwRktUQ3hGUVV0U2NFSXNTVUZNVVN4RFFVdElMRTlCVEVjc1JVRkxTeXhWUVVGVFlpeERRVUZVTEVWQlFWazdWMEZCVTBVc1RVRkJUVVlzUTBGQlRpeERRVUZRTzBkQlRHNUNMRU5CUVZnN096dEJRMXBMTEZOQlFWTjFReXhoUVVGVUxFTkJRWFZDT1VNc1RVRkJka0lzUlVGQkswSTdVMEZETjBJc1NVRkJTU3RETEZsQlFVb3NRMEZCYVVJdlF5eE5RVUZxUWl4RFFVRlFPenM3T3p0SlFVdEpLME03T3p0M1FrRkRVUzlETEUxQlFWb3NSVUZCYjBJN096czdPMVZCUldKQkxFMUJRVXdzUjBGQlkwRXNUVUZCWkRzN096czdPelJDUVVWTk8yRkJRVk1zUTBGQlF5eE5RVUZFTEVWQlFWRXNTMEZCVWl4RFFVRlFPenM3T3pKQ1FVVklPMVZCUTBSTExGRkJRVkVzUTBGQlF5eExRVUZMVEN4TlFVRk1MRU5CUVZsdFF5eExRVUZhTEVOQlFXdENMRTlCUVd4Q0xFVkJRVEpDVFN4UFFVRXpRaXhEUVVGdFF5eEpRVUZ1UXl4RlFVRjNReXhGUVVGNFF5eExRVUVyUXl4TFFVRkxUeXhYUVVGeVJDeEpRVUZ2UlN4RlFVRm9SanRWUVVOSk1VTXNVMEZCVXl4RlFVUmlPenRWUVVkSlF5eEpRVUZKUXl4SFFVRkhReXhMUVVGSUxFTkJRVk5OTEUxQlFWUXNSMEZEVEVnc1MwRkVTeXhEUVVORExFTkJRVU1zUTBGQlJDeEZRVUZKVUN4TFFVRktMRU5CUkVRc1JVRkZURTBzVFVGR1N5eERRVVZGTEVOQlFVTXNRMEZCUkN4RlFVRkpMRXRCUVV0TExFZEJRVXdzUlVGQlNpeERRVVpHTEVOQlFWSTdPMVZCU1Vrc1MwRkJTMmhDTEUxQlFVd3NRMEZCV1c5RExFbEJRVm9zUlVGQlNpeEZRVUYzUWl4TFFVRkxjRU1zVFVGQlRDeERRVUZaYjBNc1NVRkJXaXhEUVVGcFFpeEZRVUZxUWpzN1ZVRkZjRUpoTEZOQlFWTXZRaXhqUVVGakxFdEJRVXRzUWl4TlFVRnVRaXhGUVVFd1FpeFRRVUV4UWl4RlFVRnZReXhMUVVGd1F5eEZRVUV3UXl4TFFVRkxReXhKUVVGTUxFVkJRVEZETEVWQlFYTkVMRlZCUVZOTkxFTkJRVlFzUlVGQldUdGxRVUZUTEVOQlFWQTdUMEZCY0VVc1JVRkRWakpETEU5QlJGVXNRMEZEUml4UlFVUkZMRVZCUTA4c1NVRkVVQ3hGUVVWV1ppeExRVVpWTEVOQlJVb3NXVUZHU1N4RlFVVlRMRXRCUmxRc1EwRkJZanM3VlVGSlNXZENMRTFCUVUxcVF5eGpRVUZqSzBJc1RVRkJaQ3hGUVVGeFFpeExRVUZ5UWl4RlFVRXlRaXhMUVVFelFpeEZRVUZwUXl4TFFVRnFReXhGUVVGMVF5eFZRVUZUTVVNc1EwRkJWQ3hGUVVGWk8yVkJRVk1zUTBGQlVEdFBRVUZ5UkN4RlFVTlFZU3hKUVVSUExFTkJRMFlzVDBGRVJTeEZRVU5OWml4TFFVUk9MRVZCUlZCbExFbEJSazhzUTBGRlJpeFJRVVpGTEVWQlJVOWtMRTFCUmxBc1EwRkJWanM3YjBKQlMyTTJReXhIUVVGa0xFVkJRV3RDTEZGQlFXeENMRVZCUVRKQ0xFMUJRVE5DTEVWQlFXdERMRXRCUVd4RExFVkJRWGRETEZWQlFWTTFReXhEUVVGVUxFVkJRVms3WlVGQlV5eERRVUZRTzA5QlFYUkVMRVZCUTBjeVF5eFBRVVJJTEVOQlExY3NUMEZFV0N4RlFVTnRRaXhKUVVSdVFpeEZRVVZIT1VJc1NVRkdTQ3hEUVVWUkxFZEJSbElzUlVGRldTeERRVVphTEVWQlIwZEJMRWxCU0Vnc1EwRkhVU3hQUVVoU0xFVkJSMmxDTEZWQlFWTm5ReXhEUVVGVUxFVkJRVms3WlVGQlVUZERMRVZCUVVVMlF5eEZRVUZGUXl4WFFVRktMRU5CUVZBN1QwRklPVUlzUlVGSlIycERMRWxCU2tnc1EwRkpVU3hSUVVwU0xFVkJTV3RDWkN4TlFVcHNRaXhGUVV0SFl5eEpRVXhJTEVOQlMxRXNUVUZNVWl4RlFVdGxMRTFCVEdZN08yOUNRVTlqSzBJc1IwRkJaQ3hGUVVGclFpeFJRVUZzUWl4RlFVRXlRaXhOUVVFelFpeEZRVUZyUXl4TFFVRnNReXhGUVVGM1F5eFZRVUZUTlVNc1EwRkJWQ3hGUVVGWk8yVkJRVk1zUTBGQlVEdFBRVUYwUkN4RlFVTkhNa01zVDBGRVNDeERRVU5YTEU5QlJGZ3NSVUZEYlVJc1NVRkVia0lzUlVGRlJ6bENMRWxCUmtnc1EwRkZVU3hIUVVaU0xFVkJSVmtzUTBGR1dpeEZRVWRIUVN4SlFVaElMRU5CUjFFc1IwRklVaXhGUVVkWlpDeFRRVUZQTEVOQlNHNUNMRVZCU1VkakxFbEJTa2dzUTBGSlVTeFBRVXBTTEVWQlNXbENMRlZCUVZOblF5eERRVUZVTEVWQlFWazdaVUZCVVRkRExFVkJRVVUyUXl4RlFVRkZSU3h0UWtGQlNpeERRVUZRTzA5QlNqbENMRVZCUzBkc1F5eEpRVXhJTEVOQlMxRXNVVUZNVWl4RlFVdHJRbVFzVTBGQlR5eERRVXg2UWl4RlFVMUhZeXhKUVU1SUxFTkJUVkVzVFVGT1VpeEZRVTFsTEdkQ1FVNW1PenRoUVZGUExFbEJRVkE3T3pzN1JVRjZRM1ZDYVVJN08wRkRVak5DTEVsQlFVbHJRaXhWUVVGVkxFOUJRV1E3T3pzN0luMD1cbiIsImltcG9ydCB7ZDNfY2xhc3MsIGQzX3NwbGF0LCBkM191cGRhdGVhYmxlLCBEM0NvbXBvbmVudEJhc2V9IGZyb20gJ2hlbHBlcnMnXG5pbXBvcnQge3NpbXBsZVRpbWVzZXJpZXN9IGZyb20gJ2NoYXJ0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJ1bGFyQm9keSBleHRlbmRzIEQzQ29tcG9uZW50QmFzZSB7XG4gIGNvbnN0cnVjdG9yKHRhcmdldCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXRcbiAgfVxuXG4gIHByb3BzKCkgeyByZXR1cm4gW1wiZGF0YVwiLFwic3BsaXRcIl0gfVxuXG4gIGRyYXcoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICAgIGxldCBleHBhbnNpb25fcm93ID0gdGhpcy5fdGFyZ2V0XG5cbiAgICB2YXIgZXhwYW5zaW9uID0gZDNfY2xhc3MoZXhwYW5zaW9uX3JvdyxcImV4cGFuc2lvbi11cmxzXCIpXG4gICAgICAgIC5jbGFzc2VkKFwic2Nyb2xsYm94XCIsdHJ1ZSlcblxuICAgIGV4cGFuc2lvbi5odG1sKFwiXCIpXG5cbiAgICB2YXIgdXJsX3JvdyA9IGQzX3NwbGF0KGV4cGFuc2lvbixcIi51cmwtcm93XCIsXCJkaXZcIix0aGlzLmRhdGEoKS5zbGljZSgwLDUwMCksZnVuY3Rpb24oeCkgeyByZXR1cm4geC5rZXkgfSlcbiAgICAgIC5jbGFzc2VkKFwidXJsLXJvd1wiLHRydWUpXG5cbiAgICB2YXIgdXJsX25hbWUgPSBkM191cGRhdGVhYmxlKHVybF9yb3csXCIubmFtZVwiLFwiZGl2XCIpLmNsYXNzZWQoXCJuYW1lXCIsdHJ1ZSlcblxuICAgIGQzX3VwZGF0ZWFibGUodXJsX25hbWUsXCJpbnB1dFwiLFwiaW5wdXRcIilcbiAgICAgIC5hdHRyKFwidHlwZVwiLFwiY2hlY2tib3hcIilcbiAgICAgIC5vbihcImNsaWNrXCIsIHNlbGYub24oXCJzdGFnZS1maWx0ZXJcIikpXG5cbiAgICBkM19jbGFzcyh1cmxfbmFtZSxcInVybFwiLFwiYVwiKVxuICAgICAgLnRleHQoeCA9PiB7IHJldHVybiB0aGlzLnNwbGl0KCkgPyB4LmtleS5zcGxpdCh0aGlzLnNwbGl0KCkpWzFdIHx8IHgua2V5IDogeC5rZXkgfSlcbiAgICAgIC5hdHRyKFwiaHJlZlwiLCB4ID0+IHgudXJsID8geC51cmwgOiB1bmRlZmluZWQgKVxuICAgICAgLmF0dHIoXCJ0YXJnZXRcIiwgXCJfYmxhbmtcIilcblxuICAgIGQzX3VwZGF0ZWFibGUodXJsX3JvdyxcIi5udW1iZXJcIixcImRpdlwiKS5jbGFzc2VkKFwibnVtYmVyXCIsdHJ1ZSlcbiAgICAgIC50ZXh0KGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHgudG90YWwgfSlcblxuXG4gICAgZDNfdXBkYXRlYWJsZSh1cmxfcm93LFwiLnBsb3RcIixcInN2Z1wiKS5jbGFzc2VkKFwicGxvdFwiLHRydWUpXG4gICAgICAuZWFjaChmdW5jdGlvbih4KSB7XG4gICAgICAgIHZhciBkdGhpcyA9IGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICB2YXIgdmFsdWVzID0geC52YWx1ZXMgfHwgeC52YWx1ZVxuICAgICAgICBzaW1wbGVUaW1lc2VyaWVzKGR0aGlzLHZhbHVlcywxNDQsMjApXG4gICAgICB9KVxuXG4gIH1cbn1cbiIsImltcG9ydCB7ZDNfY2xhc3MsIGQzX3NwbGF0LCBkM191cGRhdGVhYmxlLCBhY2Nlc3NvciwgRDNDb21wb25lbnRCYXNlfSBmcm9tICdoZWxwZXJzJ1xuaW1wb3J0IFRhYnVsYXJIZWFkZXIgZnJvbSAnLi9oZWFkZXInXG5pbXBvcnQgVGFidWxhckJvZHkgZnJvbSAnLi9ib2R5J1xuXG5pbXBvcnQgJy4vdGFidWxhcl90aW1lc2VyaWVzLmNzcydcblxuZXhwb3J0IGZ1bmN0aW9uIHRhYnVsYXJfdGltZXNlcmllcyh0YXJnZXQpIHtcbiAgcmV0dXJuIG5ldyBUYWJ1bGFyVGltZXNlcmllcyh0YXJnZXQpXG59XG5cbmNsYXNzIFRhYnVsYXJUaW1lc2VyaWVzIGV4dGVuZHMgRDNDb21wb25lbnRCYXNlIHtcbiAgY29uc3RydWN0b3IodGFyZ2V0KSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldFxuICAgIHRoaXMuX2hlYWRlcnMgPSBbXCIxMmFtXCIsXCIxMnBtXCIsXCIxMmFtXCJdXG4gIH1cblxuICBwcm9wcygpIHsgcmV0dXJuIFtcImRhdGFcIixcImxhYmVsXCIsXCJzcGxpdFwiLFwiaGVhZGVyc1wiXSB9XG5cbiAgZHJhdygpIHtcbiAgICBsZXQgdGQgPSB0aGlzLl90YXJnZXRcblxuICAgIHZhciB0aXRsZV9yb3cgPSBkM19jbGFzcyh0ZCxcInRpdGxlLXJvd1wiKVxuICAgIHZhciBleHBhbnNpb25fcm93ID0gZDNfY2xhc3ModGQsXCJleHBhbnNpb24tcm93XCIpXG5cbiAgICB2YXIgaGVhZGVyID0gKG5ldyBUYWJ1bGFySGVhZGVyKHRpdGxlX3JvdykpXG4gICAgICAubGFiZWwodGhpcy5sYWJlbCgpKVxuICAgICAgLmhlYWRlcnModGhpcy5oZWFkZXJzKCkpXG4gICAgICAuZHJhdygpXG5cbiAgICB2YXIgYm9keSA9IChuZXcgVGFidWxhckJvZHkoZXhwYW5zaW9uX3JvdykpXG4gICAgICAuZGF0YSh0aGlzLmRhdGEoKSlcbiAgICAgIC5zcGxpdCh0aGlzLnNwbGl0KCkgfHwgZmFsc2UpXG4gICAgICAub24oXCJzdGFnZS1maWx0ZXJcIix0aGlzLm9uKFwic3RhZ2UtZmlsdGVyXCIpKVxuICAgICAgLmRyYXcoKVxuXG4gIH1cbn1cbiIsIiFmdW5jdGlvbigpIHtcbiAgdmFyIGQzID0ge1xuICAgIHZlcnNpb246IFwiMy41LjEyXCJcbiAgfTtcbiAgdmFyIGQzX2FycmF5U2xpY2UgPSBbXS5zbGljZSwgZDNfYXJyYXkgPSBmdW5jdGlvbihsaXN0KSB7XG4gICAgcmV0dXJuIGQzX2FycmF5U2xpY2UuY2FsbChsaXN0KTtcbiAgfTtcbiAgdmFyIGQzX2RvY3VtZW50ID0gdGhpcy5kb2N1bWVudDtcbiAgZnVuY3Rpb24gZDNfZG9jdW1lbnRFbGVtZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZSAmJiAobm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUuZG9jdW1lbnQgfHwgbm9kZSkuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3dpbmRvdyhub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgJiYgKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgbm9kZS5kb2N1bWVudCAmJiBub2RlIHx8IG5vZGUuZGVmYXVsdFZpZXcpO1xuICB9XG4gIGlmIChkM19kb2N1bWVudCkge1xuICAgIHRyeSB7XG4gICAgICBkM19hcnJheShkM19kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2hpbGROb2RlcylbMF0ubm9kZVR5cGU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZDNfYXJyYXkgPSBmdW5jdGlvbihsaXN0KSB7XG4gICAgICAgIHZhciBpID0gbGlzdC5sZW5ndGgsIGFycmF5ID0gbmV3IEFycmF5KGkpO1xuICAgICAgICB3aGlsZSAoaS0tKSBhcnJheVtpXSA9IGxpc3RbaV07XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGlmICghRGF0ZS5ub3cpIERhdGUubm93ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICtuZXcgRGF0ZSgpO1xuICB9O1xuICBpZiAoZDNfZG9jdW1lbnQpIHtcbiAgICB0cnkge1xuICAgICAgZDNfZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKS5zdHlsZS5zZXRQcm9wZXJ0eShcIm9wYWNpdHlcIiwgMCwgXCJcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHZhciBkM19lbGVtZW50X3Byb3RvdHlwZSA9IHRoaXMuRWxlbWVudC5wcm90b3R5cGUsIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlID0gZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlLCBkM19lbGVtZW50X3NldEF0dHJpYnV0ZU5TID0gZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlTlMsIGQzX3N0eWxlX3Byb3RvdHlwZSA9IHRoaXMuQ1NTU3R5bGVEZWNsYXJhdGlvbi5wcm90b3R5cGUsIGQzX3N0eWxlX3NldFByb3BlcnR5ID0gZDNfc3R5bGVfcHJvdG90eXBlLnNldFByb3BlcnR5O1xuICAgICAgZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgICAgZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSArIFwiXCIpO1xuICAgICAgfTtcbiAgICAgIGQzX2VsZW1lbnRfcHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TID0gZnVuY3Rpb24oc3BhY2UsIGxvY2FsLCB2YWx1ZSkge1xuICAgICAgICBkM19lbGVtZW50X3NldEF0dHJpYnV0ZU5TLmNhbGwodGhpcywgc3BhY2UsIGxvY2FsLCB2YWx1ZSArIFwiXCIpO1xuICAgICAgfTtcbiAgICAgIGQzX3N0eWxlX3Byb3RvdHlwZS5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgICAgICBkM19zdHlsZV9zZXRQcm9wZXJ0eS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlICsgXCJcIiwgcHJpb3JpdHkpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgZDMuYXNjZW5kaW5nID0gZDNfYXNjZW5kaW5nO1xuICBmdW5jdGlvbiBkM19hc2NlbmRpbmcoYSwgYikge1xuICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbiAgfVxuICBkMy5kZXNjZW5kaW5nID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIDwgYSA/IC0xIDogYiA+IGEgPyAxIDogYiA+PSBhID8gMCA6IE5hTjtcbiAgfTtcbiAgZDMubWluID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBiO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+PSBiKSB7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBhID4gYikgYSA9IGI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGEgPiBiKSBhID0gYjtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH07XG4gIGQzLm1heCA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgYjtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikge1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+IGEpIGEgPSBiO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwgJiYgYiA+PSBiKSB7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID4gYSkgYSA9IGI7XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9O1xuICBkMy5leHRlbnQgPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBpID0gLTEsIG4gPSBhcnJheS5sZW5ndGgsIGEsIGIsIGM7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGMgPSBiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYSA+IGIpIGEgPSBiO1xuICAgICAgICBpZiAoYyA8IGIpIGMgPSBiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwgJiYgYiA+PSBiKSB7XG4gICAgICAgIGEgPSBjID0gYjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGEgPiBiKSBhID0gYjtcbiAgICAgICAgaWYgKGMgPCBiKSBjID0gYjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFsgYSwgYyBdO1xuICB9O1xuICBmdW5jdGlvbiBkM19udW1iZXIoeCkge1xuICAgIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbnVtZXJpYyh4KSB7XG4gICAgcmV0dXJuICFpc05hTih4KTtcbiAgfVxuICBkMy5zdW0gPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBzID0gMCwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgaSA9IC0xO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9ICthcnJheVtpXSkpIHMgKz0gYTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSArZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpKSBzICs9IGE7XG4gICAgfVxuICAgIHJldHVybiBzO1xuICB9O1xuICBkMy5tZWFuID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgcyA9IDAsIG4gPSBhcnJheS5sZW5ndGgsIGEsIGkgPSAtMSwgaiA9IG47XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGFycmF5W2ldKSkpIHMgKz0gYTsgZWxzZSAtLWo7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSkpIHMgKz0gYTsgZWxzZSAtLWo7XG4gICAgfVxuICAgIGlmIChqKSByZXR1cm4gcyAvIGo7XG4gIH07XG4gIGQzLnF1YW50aWxlID0gZnVuY3Rpb24odmFsdWVzLCBwKSB7XG4gICAgdmFyIEggPSAodmFsdWVzLmxlbmd0aCAtIDEpICogcCArIDEsIGggPSBNYXRoLmZsb29yKEgpLCB2ID0gK3ZhbHVlc1toIC0gMV0sIGUgPSBIIC0gaDtcbiAgICByZXR1cm4gZSA/IHYgKyBlICogKHZhbHVlc1toXSAtIHYpIDogdjtcbiAgfTtcbiAgZDMubWVkaWFuID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgbnVtYmVycyA9IFtdLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBpID0gLTE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGFycmF5W2ldKSkpIG51bWJlcnMucHVzaChhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpKSkgbnVtYmVycy5wdXNoKGEpO1xuICAgIH1cbiAgICBpZiAobnVtYmVycy5sZW5ndGgpIHJldHVybiBkMy5xdWFudGlsZShudW1iZXJzLnNvcnQoZDNfYXNjZW5kaW5nKSwgLjUpO1xuICB9O1xuICBkMy52YXJpYW5jZSA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIG4gPSBhcnJheS5sZW5ndGgsIG0gPSAwLCBhLCBkLCBzID0gMCwgaSA9IC0xLCBqID0gMDtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihhcnJheVtpXSkpKSB7XG4gICAgICAgICAgZCA9IGEgLSBtO1xuICAgICAgICAgIG0gKz0gZCAvICsrajtcbiAgICAgICAgICBzICs9IGQgKiAoYSAtIG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpKSkge1xuICAgICAgICAgIGQgPSBhIC0gbTtcbiAgICAgICAgICBtICs9IGQgLyArK2o7XG4gICAgICAgICAgcyArPSBkICogKGEgLSBtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaiA+IDEpIHJldHVybiBzIC8gKGogLSAxKTtcbiAgfTtcbiAgZDMuZGV2aWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSBkMy52YXJpYW5jZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2ID8gTWF0aC5zcXJ0KHYpIDogdjtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfYmlzZWN0b3IoY29tcGFyZSkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBsbyA9IDA7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxOyBlbHNlIGhpID0gbWlkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsbztcbiAgICAgIH0sXG4gICAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgbG8gPSAwO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDQpIGhpID0gYS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkOyBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG87XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfYmlzZWN0ID0gZDNfYmlzZWN0b3IoZDNfYXNjZW5kaW5nKTtcbiAgZDMuYmlzZWN0TGVmdCA9IGQzX2Jpc2VjdC5sZWZ0O1xuICBkMy5iaXNlY3QgPSBkMy5iaXNlY3RSaWdodCA9IGQzX2Jpc2VjdC5yaWdodDtcbiAgZDMuYmlzZWN0b3IgPSBmdW5jdGlvbihmKSB7XG4gICAgcmV0dXJuIGQzX2Jpc2VjdG9yKGYubGVuZ3RoID09PSAxID8gZnVuY3Rpb24oZCwgeCkge1xuICAgICAgcmV0dXJuIGQzX2FzY2VuZGluZyhmKGQpLCB4KTtcbiAgICB9IDogZik7XG4gIH07XG4gIGQzLnNodWZmbGUgPSBmdW5jdGlvbihhcnJheSwgaTAsIGkxKSB7XG4gICAgaWYgKChtID0gYXJndW1lbnRzLmxlbmd0aCkgPCAzKSB7XG4gICAgICBpMSA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChtIDwgMikgaTAgPSAwO1xuICAgIH1cbiAgICB2YXIgbSA9IGkxIC0gaTAsIHQsIGk7XG4gICAgd2hpbGUgKG0pIHtcbiAgICAgIGkgPSBNYXRoLnJhbmRvbSgpICogbS0tIHwgMDtcbiAgICAgIHQgPSBhcnJheVttICsgaTBdLCBhcnJheVttICsgaTBdID0gYXJyYXlbaSArIGkwXSwgYXJyYXlbaSArIGkwXSA9IHQ7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfTtcbiAgZDMucGVybXV0ZSA9IGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgdmFyIGkgPSBpbmRleGVzLmxlbmd0aCwgcGVybXV0ZXMgPSBuZXcgQXJyYXkoaSk7XG4gICAgd2hpbGUgKGktLSkgcGVybXV0ZXNbaV0gPSBhcnJheVtpbmRleGVzW2ldXTtcbiAgICByZXR1cm4gcGVybXV0ZXM7XG4gIH07XG4gIGQzLnBhaXJzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGggLSAxLCBwMCwgcDEgPSBhcnJheVswXSwgcGFpcnMgPSBuZXcgQXJyYXkobiA8IDAgPyAwIDogbik7XG4gICAgd2hpbGUgKGkgPCBuKSBwYWlyc1tpXSA9IFsgcDAgPSBwMSwgcDEgPSBhcnJheVsrK2ldIF07XG4gICAgcmV0dXJuIHBhaXJzO1xuICB9O1xuICBkMy56aXAgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIShuID0gYXJndW1lbnRzLmxlbmd0aCkpIHJldHVybiBbXTtcbiAgICBmb3IgKHZhciBpID0gLTEsIG0gPSBkMy5taW4oYXJndW1lbnRzLCBkM196aXBMZW5ndGgpLCB6aXBzID0gbmV3IEFycmF5KG0pOyArK2kgPCBtOyApIHtcbiAgICAgIGZvciAodmFyIGogPSAtMSwgbiwgemlwID0gemlwc1tpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjsgKSB7XG4gICAgICAgIHppcFtqXSA9IGFyZ3VtZW50c1tqXVtpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHppcHM7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3ppcExlbmd0aChkKSB7XG4gICAgcmV0dXJuIGQubGVuZ3RoO1xuICB9XG4gIGQzLnRyYW5zcG9zZSA9IGZ1bmN0aW9uKG1hdHJpeCkge1xuICAgIHJldHVybiBkMy56aXAuYXBwbHkoZDMsIG1hdHJpeCk7XG4gIH07XG4gIGQzLmtleXMgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXApIGtleXMucHVzaChrZXkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuICBkMy52YWx1ZXMgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG1hcCkgdmFsdWVzLnB1c2gobWFwW2tleV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG4gIGQzLmVudHJpZXMgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXApIGVudHJpZXMucHVzaCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIHZhbHVlOiBtYXBba2V5XVxuICAgIH0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9O1xuICBkMy5tZXJnZSA9IGZ1bmN0aW9uKGFycmF5cykge1xuICAgIHZhciBuID0gYXJyYXlzLmxlbmd0aCwgbSwgaSA9IC0xLCBqID0gMCwgbWVyZ2VkLCBhcnJheTtcbiAgICB3aGlsZSAoKytpIDwgbikgaiArPSBhcnJheXNbaV0ubGVuZ3RoO1xuICAgIG1lcmdlZCA9IG5ldyBBcnJheShqKTtcbiAgICB3aGlsZSAoLS1uID49IDApIHtcbiAgICAgIGFycmF5ID0gYXJyYXlzW25dO1xuICAgICAgbSA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlICgtLW0gPj0gMCkge1xuICAgICAgICBtZXJnZWRbLS1qXSA9IGFycmF5W21dO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9O1xuICB2YXIgYWJzID0gTWF0aC5hYnM7XG4gIGQzLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICAgIHN0ZXAgPSAxO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHN0b3AgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKHN0b3AgLSBzdGFydCkgLyBzdGVwID09PSBJbmZpbml0eSkgdGhyb3cgbmV3IEVycm9yKFwiaW5maW5pdGUgcmFuZ2VcIik7XG4gICAgdmFyIHJhbmdlID0gW10sIGsgPSBkM19yYW5nZV9pbnRlZ2VyU2NhbGUoYWJzKHN0ZXApKSwgaSA9IC0xLCBqO1xuICAgIHN0YXJ0ICo9IGssIHN0b3AgKj0gaywgc3RlcCAqPSBrO1xuICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKChqID0gc3RhcnQgKyBzdGVwICogKytpKSA+IHN0b3ApIHJhbmdlLnB1c2goaiAvIGspOyBlbHNlIHdoaWxlICgoaiA9IHN0YXJ0ICsgc3RlcCAqICsraSkgPCBzdG9wKSByYW5nZS5wdXNoKGogLyBrKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3JhbmdlX2ludGVnZXJTY2FsZSh4KSB7XG4gICAgdmFyIGsgPSAxO1xuICAgIHdoaWxlICh4ICogayAlIDEpIGsgKj0gMTA7XG4gICAgcmV0dXJuIGs7XG4gIH1cbiAgZnVuY3Rpb24gZDNfY2xhc3MoY3RvciwgcHJvcGVydGllcykge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3Rvci5wcm90b3R5cGUsIGtleSwge1xuICAgICAgICB2YWx1ZTogcHJvcGVydGllc1trZXldLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGQzLm1hcCA9IGZ1bmN0aW9uKG9iamVjdCwgZikge1xuICAgIHZhciBtYXAgPSBuZXcgZDNfTWFwKCk7XG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIGQzX01hcCkge1xuICAgICAgb2JqZWN0LmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoLCBvO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7IGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZi5jYWxsKG9iamVjdCwgbyA9IG9iamVjdFtpXSwgaSksIG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xuICB9O1xuICBmdW5jdGlvbiBkM19NYXAoKSB7XG4gICAgdGhpcy5fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICB2YXIgZDNfbWFwX3Byb3RvID0gXCJfX3Byb3RvX19cIiwgZDNfbWFwX3plcm8gPSBcIlxceDAwXCI7XG4gIGQzX2NsYXNzKGQzX01hcCwge1xuICAgIGhhczogZDNfbWFwX2hhcyxcbiAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX1tkM19tYXBfZXNjYXBlKGtleSldO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fW2QzX21hcF9lc2NhcGUoa2V5KV0gPSB2YWx1ZTtcbiAgICB9LFxuICAgIHJlbW92ZTogZDNfbWFwX3JlbW92ZSxcbiAgICBrZXlzOiBkM19tYXBfa2V5cyxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgdmFsdWVzLnB1c2godGhpcy5fW2tleV0pO1xuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9LFxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIGVudHJpZXMucHVzaCh7XG4gICAgICAgIGtleTogZDNfbWFwX3VuZXNjYXBlKGtleSksXG4gICAgICAgIHZhbHVlOiB0aGlzLl9ba2V5XVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZW50cmllcztcbiAgICB9LFxuICAgIHNpemU6IGQzX21hcF9zaXplLFxuICAgIGVtcHR5OiBkM19tYXBfZW1wdHksXG4gICAgZm9yRWFjaDogZnVuY3Rpb24oZikge1xuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgZi5jYWxsKHRoaXMsIGQzX21hcF91bmVzY2FwZShrZXkpLCB0aGlzLl9ba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgZnVuY3Rpb24gZDNfbWFwX2VzY2FwZShrZXkpIHtcbiAgICByZXR1cm4gKGtleSArPSBcIlwiKSA9PT0gZDNfbWFwX3Byb3RvIHx8IGtleVswXSA9PT0gZDNfbWFwX3plcm8gPyBkM19tYXBfemVybyArIGtleSA6IGtleTtcbiAgfVxuICBmdW5jdGlvbiBkM19tYXBfdW5lc2NhcGUoa2V5KSB7XG4gICAgcmV0dXJuIChrZXkgKz0gXCJcIilbMF0gPT09IGQzX21hcF96ZXJvID8ga2V5LnNsaWNlKDEpIDoga2V5O1xuICB9XG4gIGZ1bmN0aW9uIGQzX21hcF9oYXMoa2V5KSB7XG4gICAgcmV0dXJuIGQzX21hcF9lc2NhcGUoa2V5KSBpbiB0aGlzLl87XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX3JlbW92ZShrZXkpIHtcbiAgICByZXR1cm4gKGtleSA9IGQzX21hcF9lc2NhcGUoa2V5KSkgaW4gdGhpcy5fICYmIGRlbGV0ZSB0aGlzLl9ba2V5XTtcbiAgfVxuICBmdW5jdGlvbiBkM19tYXBfa2V5cygpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIGtleXMucHVzaChkM19tYXBfdW5lc2NhcGUoa2V5KSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX3NpemUoKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19tYXBfZW1wdHkoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGQzLm5lc3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmVzdCA9IHt9LCBrZXlzID0gW10sIHNvcnRLZXlzID0gW10sIHNvcnRWYWx1ZXMsIHJvbGx1cDtcbiAgICBmdW5jdGlvbiBtYXAobWFwVHlwZSwgYXJyYXksIGRlcHRoKSB7XG4gICAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHJldHVybiByb2xsdXAgPyByb2xsdXAuY2FsbChuZXN0LCBhcnJheSkgOiBzb3J0VmFsdWVzID8gYXJyYXkuc29ydChzb3J0VmFsdWVzKSA6IGFycmF5O1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IGFycmF5Lmxlbmd0aCwga2V5ID0ga2V5c1tkZXB0aCsrXSwga2V5VmFsdWUsIG9iamVjdCwgc2V0dGVyLCB2YWx1ZXNCeUtleSA9IG5ldyBkM19NYXAoKSwgdmFsdWVzO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleShvYmplY3QgPSBhcnJheVtpXSkpKSB7XG4gICAgICAgICAgdmFsdWVzLnB1c2gob2JqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFsgb2JqZWN0IF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWFwVHlwZSkge1xuICAgICAgICBvYmplY3QgPSBtYXBUeXBlKCk7XG4gICAgICAgIHNldHRlciA9IGZ1bmN0aW9uKGtleVZhbHVlLCB2YWx1ZXMpIHtcbiAgICAgICAgICBvYmplY3Quc2V0KGtleVZhbHVlLCBtYXAobWFwVHlwZSwgdmFsdWVzLCBkZXB0aCkpO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0ID0ge307XG4gICAgICAgIHNldHRlciA9IGZ1bmN0aW9uKGtleVZhbHVlLCB2YWx1ZXMpIHtcbiAgICAgICAgICBvYmplY3Rba2V5VmFsdWVdID0gbWFwKG1hcFR5cGUsIHZhbHVlcywgZGVwdGgpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFsdWVzQnlLZXkuZm9yRWFjaChzZXR0ZXIpO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XG4gICAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHJldHVybiBtYXA7XG4gICAgICB2YXIgYXJyYXkgPSBbXSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoKytdO1xuICAgICAgbWFwLmZvckVhY2goZnVuY3Rpb24oa2V5LCBrZXlNYXApIHtcbiAgICAgICAgYXJyYXkucHVzaCh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgdmFsdWVzOiBlbnRyaWVzKGtleU1hcCwgZGVwdGgpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc29ydEtleSA/IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gc29ydEtleShhLmtleSwgYi5rZXkpO1xuICAgICAgfSkgOiBhcnJheTtcbiAgICB9XG4gICAgbmVzdC5tYXAgPSBmdW5jdGlvbihhcnJheSwgbWFwVHlwZSkge1xuICAgICAgcmV0dXJuIG1hcChtYXBUeXBlLCBhcnJheSwgMCk7XG4gICAgfTtcbiAgICBuZXN0LmVudHJpZXMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgcmV0dXJuIGVudHJpZXMobWFwKGQzLm1hcCwgYXJyYXksIDApLCAwKTtcbiAgICB9O1xuICAgIG5lc3Qua2V5ID0gZnVuY3Rpb24oZCkge1xuICAgICAga2V5cy5wdXNoKGQpO1xuICAgICAgcmV0dXJuIG5lc3Q7XG4gICAgfTtcbiAgICBuZXN0LnNvcnRLZXlzID0gZnVuY3Rpb24ob3JkZXIpIHtcbiAgICAgIHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjtcbiAgICAgIHJldHVybiBuZXN0O1xuICAgIH07XG4gICAgbmVzdC5zb3J0VmFsdWVzID0gZnVuY3Rpb24ob3JkZXIpIHtcbiAgICAgIHNvcnRWYWx1ZXMgPSBvcmRlcjtcbiAgICAgIHJldHVybiBuZXN0O1xuICAgIH07XG4gICAgbmVzdC5yb2xsdXAgPSBmdW5jdGlvbihmKSB7XG4gICAgICByb2xsdXAgPSBmO1xuICAgICAgcmV0dXJuIG5lc3Q7XG4gICAgfTtcbiAgICByZXR1cm4gbmVzdDtcbiAgfTtcbiAgZDMuc2V0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgc2V0ID0gbmV3IGQzX1NldCgpO1xuICAgIGlmIChhcnJheSkgZm9yICh2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGg7IGkgPCBuOyArK2kpIHNldC5hZGQoYXJyYXlbaV0pO1xuICAgIHJldHVybiBzZXQ7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX1NldCgpIHtcbiAgICB0aGlzLl8gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gIGQzX2NsYXNzKGQzX1NldCwge1xuICAgIGhhczogZDNfbWFwX2hhcyxcbiAgICBhZGQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdGhpcy5fW2QzX21hcF9lc2NhcGUoa2V5ICs9IFwiXCIpXSA9IHRydWU7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH0sXG4gICAgcmVtb3ZlOiBkM19tYXBfcmVtb3ZlLFxuICAgIHZhbHVlczogZDNfbWFwX2tleXMsXG4gICAgc2l6ZTogZDNfbWFwX3NpemUsXG4gICAgZW1wdHk6IGQzX21hcF9lbXB0eSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBmLmNhbGwodGhpcywgZDNfbWFwX3VuZXNjYXBlKGtleSkpO1xuICAgIH1cbiAgfSk7XG4gIGQzLmJlaGF2aW9yID0ge307XG4gIGZ1bmN0aW9uIGQzX2lkZW50aXR5KGQpIHtcbiAgICByZXR1cm4gZDtcbiAgfVxuICBkMy5yZWJpbmQgPSBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xuICAgIHZhciBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1ldGhvZDtcbiAgICB3aGlsZSAoKytpIDwgbikgdGFyZ2V0W21ldGhvZCA9IGFyZ3VtZW50c1tpXV0gPSBkM19yZWJpbmQodGFyZ2V0LCBzb3VyY2UsIHNvdXJjZVttZXRob2RdKTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICBmdW5jdGlvbiBkM19yZWJpbmQodGFyZ2V0LCBzb3VyY2UsIG1ldGhvZCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG1ldGhvZC5hcHBseShzb3VyY2UsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHNvdXJjZSA/IHRhcmdldCA6IHZhbHVlO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfdmVuZG9yU3ltYm9sKG9iamVjdCwgbmFtZSkge1xuICAgIGlmIChuYW1lIGluIG9iamVjdCkgcmV0dXJuIG5hbWU7XG4gICAgbmFtZSA9IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gZDNfdmVuZG9yUHJlZml4ZXMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgcHJlZml4TmFtZSA9IGQzX3ZlbmRvclByZWZpeGVzW2ldICsgbmFtZTtcbiAgICAgIGlmIChwcmVmaXhOYW1lIGluIG9iamVjdCkgcmV0dXJuIHByZWZpeE5hbWU7XG4gICAgfVxuICB9XG4gIHZhciBkM192ZW5kb3JQcmVmaXhlcyA9IFsgXCJ3ZWJraXRcIiwgXCJtc1wiLCBcIm1velwiLCBcIk1velwiLCBcIm9cIiwgXCJPXCIgXTtcbiAgZnVuY3Rpb24gZDNfbm9vcCgpIHt9XG4gIGQzLmRpc3BhdGNoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gbmV3IGQzX2Rpc3BhdGNoKCksIGkgPSAtMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGRpc3BhdGNoW2FyZ3VtZW50c1tpXV0gPSBkM19kaXNwYXRjaF9ldmVudChkaXNwYXRjaCk7XG4gICAgcmV0dXJuIGRpc3BhdGNoO1xuICB9O1xuICBmdW5jdGlvbiBkM19kaXNwYXRjaCgpIHt9XG4gIGQzX2Rpc3BhdGNoLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIGkgPSB0eXBlLmluZGV4T2YoXCIuXCIpLCBuYW1lID0gXCJcIjtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICBuYW1lID0gdHlwZS5zbGljZShpICsgMSk7XG4gICAgICB0eXBlID0gdHlwZS5zbGljZSgwLCBpKTtcbiAgICB9XG4gICAgaWYgKHR5cGUpIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHRoaXNbdHlwZV0ub24obmFtZSkgOiB0aGlzW3R5cGVdLm9uKG5hbWUsIGxpc3RlbmVyKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgaWYgKGxpc3RlbmVyID09IG51bGwpIGZvciAodHlwZSBpbiB0aGlzKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KHR5cGUpKSB0aGlzW3R5cGVdLm9uKG5hbWUsIG51bGwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19kaXNwYXRjaF9ldmVudChkaXNwYXRjaCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSBbXSwgbGlzdGVuZXJCeU5hbWUgPSBuZXcgZDNfTWFwKCk7XG4gICAgZnVuY3Rpb24gZXZlbnQoKSB7XG4gICAgICB2YXIgeiA9IGxpc3RlbmVycywgaSA9IC0xLCBuID0gei5sZW5ndGgsIGw7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGwgPSB6W2ldLm9uKSBsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gZGlzcGF0Y2g7XG4gICAgfVxuICAgIGV2ZW50Lm9uID0gZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsID0gbGlzdGVuZXJCeU5hbWUuZ2V0KG5hbWUpLCBpO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gbCAmJiBsLm9uO1xuICAgICAgaWYgKGwpIHtcbiAgICAgICAgbC5vbiA9IG51bGw7XG4gICAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgwLCBpID0gbGlzdGVuZXJzLmluZGV4T2YobCkpLmNvbmNhdChsaXN0ZW5lcnMuc2xpY2UoaSArIDEpKTtcbiAgICAgICAgbGlzdGVuZXJCeU5hbWUucmVtb3ZlKG5hbWUpO1xuICAgICAgfVxuICAgICAgaWYgKGxpc3RlbmVyKSBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lckJ5TmFtZS5zZXQobmFtZSwge1xuICAgICAgICBvbjogbGlzdGVuZXJcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBkaXNwYXRjaDtcbiAgICB9O1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuICBkMy5ldmVudCA9IG51bGw7XG4gIGZ1bmN0aW9uIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKSB7XG4gICAgZDMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBmdW5jdGlvbiBkM19ldmVudFNvdXJjZSgpIHtcbiAgICB2YXIgZSA9IGQzLmV2ZW50LCBzO1xuICAgIHdoaWxlIChzID0gZS5zb3VyY2VFdmVudCkgZSA9IHM7XG4gICAgcmV0dXJuIGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZXZlbnREaXNwYXRjaCh0YXJnZXQpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBuZXcgZDNfZGlzcGF0Y2goKSwgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkaXNwYXRjaFthcmd1bWVudHNbaV1dID0gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpO1xuICAgIGRpc3BhdGNoLm9mID0gZnVuY3Rpb24odGhpeiwgYXJndW1lbnR6KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZTEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgZTAgPSBlMS5zb3VyY2VFdmVudCA9IGQzLmV2ZW50O1xuICAgICAgICAgIGUxLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICBkMy5ldmVudCA9IGUxO1xuICAgICAgICAgIGRpc3BhdGNoW2UxLnR5cGVdLmFwcGx5KHRoaXosIGFyZ3VtZW50eik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZDMuZXZlbnQgPSBlMDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBkaXNwYXRjaDtcbiAgfVxuICBkMy5yZXF1b3RlID0gZnVuY3Rpb24ocykge1xuICAgIHJldHVybiBzLnJlcGxhY2UoZDNfcmVxdW90ZV9yZSwgXCJcXFxcJCZcIik7XG4gIH07XG4gIHZhciBkM19yZXF1b3RlX3JlID0gL1tcXFxcXFxeXFwkXFwqXFwrXFw/XFx8XFxbXFxdXFwoXFwpXFwuXFx7XFx9XS9nO1xuICB2YXIgZDNfc3ViY2xhc3MgPSB7fS5fX3Byb3RvX18gPyBmdW5jdGlvbihvYmplY3QsIHByb3RvdHlwZSkge1xuICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG4gIH0gOiBmdW5jdGlvbihvYmplY3QsIHByb3RvdHlwZSkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3RvdHlwZSkgb2JqZWN0W3Byb3BlcnR5XSA9IHByb3RvdHlwZVtwcm9wZXJ0eV07XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbihncm91cHMpIHtcbiAgICBkM19zdWJjbGFzcyhncm91cHMsIGQzX3NlbGVjdGlvblByb3RvdHlwZSk7XG4gICAgcmV0dXJuIGdyb3VwcztcbiAgfVxuICB2YXIgZDNfc2VsZWN0ID0gZnVuY3Rpb24ocywgbikge1xuICAgIHJldHVybiBuLnF1ZXJ5U2VsZWN0b3Iocyk7XG4gIH0sIGQzX3NlbGVjdEFsbCA9IGZ1bmN0aW9uKHMsIG4pIHtcbiAgICByZXR1cm4gbi5xdWVyeVNlbGVjdG9yQWxsKHMpO1xuICB9LCBkM19zZWxlY3RNYXRjaGVzID0gZnVuY3Rpb24obiwgcykge1xuICAgIHZhciBkM19zZWxlY3RNYXRjaGVyID0gbi5tYXRjaGVzIHx8IG5bZDNfdmVuZG9yU3ltYm9sKG4sIFwibWF0Y2hlc1NlbGVjdG9yXCIpXTtcbiAgICBkM19zZWxlY3RNYXRjaGVzID0gZnVuY3Rpb24obiwgcykge1xuICAgICAgcmV0dXJuIGQzX3NlbGVjdE1hdGNoZXIuY2FsbChuLCBzKTtcbiAgICB9O1xuICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVzKG4sIHMpO1xuICB9O1xuICBpZiAodHlwZW9mIFNpenpsZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZDNfc2VsZWN0ID0gZnVuY3Rpb24ocywgbikge1xuICAgICAgcmV0dXJuIFNpenpsZShzLCBuKVswXSB8fCBudWxsO1xuICAgIH07XG4gICAgZDNfc2VsZWN0QWxsID0gU2l6emxlO1xuICAgIGQzX3NlbGVjdE1hdGNoZXMgPSBTaXp6bGUubWF0Y2hlc1NlbGVjdG9yO1xuICB9XG4gIGQzLnNlbGVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zZWxlY3QoZDNfZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgfTtcbiAgdmFyIGQzX3NlbGVjdGlvblByb3RvdHlwZSA9IGQzLnNlbGVjdGlvbi5wcm90b3R5cGUgPSBbXTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgc3Vibm9kZSwgZ3JvdXAsIG5vZGU7XG4gICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IChncm91cCA9IHRoaXNbal0pLnBhcmVudE5vZGU7XG4gICAgICBmb3IgKHZhciBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChzdWJub2RlID0gc2VsZWN0b3IuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSk7XG4gICAgICAgICAgaWYgKHN1Ym5vZGUgJiYgXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbihzdWJncm91cHMpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3RvciA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NlbGVjdChzZWxlY3RvciwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2VsZWN0QWxsID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBub2RlO1xuICAgIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IGQzX2FycmF5KHNlbGVjdG9yLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpKTtcbiAgICAgICAgICBzdWJncm91cC5wYXJlbnROb2RlID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbChzZWxlY3Rvcikge1xuICAgIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdG9yIDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2VsZWN0QWxsKHNlbGVjdG9yLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIHZhciBkM19uc1ByZWZpeCA9IHtcbiAgICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB4aHRtbDogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXG4gICAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG4gIH07XG4gIGQzLm5zID0ge1xuICAgIHByZWZpeDogZDNfbnNQcmVmaXgsXG4gICAgcXVhbGlmeTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGkgPSBuYW1lLmluZGV4T2YoXCI6XCIpLCBwcmVmaXggPSBuYW1lO1xuICAgICAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICAgICAgcmV0dXJuIGQzX25zUHJlZml4Lmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7XG4gICAgICAgIHNwYWNlOiBkM19uc1ByZWZpeFtwcmVmaXhdLFxuICAgICAgICBsb2NhbDogbmFtZVxuICAgICAgfSA6IG5hbWU7XG4gICAgfVxuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICAgICAgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSk7XG4gICAgICAgIHJldHVybiBuYW1lLmxvY2FsID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSA6IG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgfVxuICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2F0dHIodmFsdWUsIG5hbWVbdmFsdWVdKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWUpO1xuICAgIGZ1bmN0aW9uIGF0dHJOdWxsKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJOdWxsTlMoKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQoKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKCkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbigpIHtcbiAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyRnVuY3Rpb25OUygpIHtcbiAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCk7IGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCB4KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBuYW1lLmxvY2FsID8gYXR0ck51bGxOUyA6IGF0dHJOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24gOiBuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfY29sbGFwc2Uocykge1xuICAgIHJldHVybiBzLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuY2xhc3NlZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKSwgbiA9IChuYW1lID0gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkpLmxlbmd0aCwgaSA9IC0xO1xuICAgICAgICBpZiAodmFsdWUgPSBub2RlLmNsYXNzTGlzdCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIXZhbHVlLmNvbnRhaW5zKG5hbWVbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWQzX3NlbGVjdGlvbl9jbGFzc2VkUmUobmFtZVtpXSkudGVzdCh2YWx1ZSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9jbGFzc2VkKHZhbHVlLCBuYW1lW3ZhbHVlXSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWRSZShuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoPzpefFxcXFxzKylcIiArIGQzLnJlcXVvdGUobmFtZSkgKyBcIig/OlxcXFxzK3wkKVwiLCBcImdcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkge1xuICAgIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkubWFwKGQzX3NlbGVjdGlvbl9jbGFzc2VkTmFtZSk7XG4gICAgdmFyIG4gPSBuYW1lLmxlbmd0aDtcbiAgICBmdW5jdGlvbiBjbGFzc2VkQ29uc3RhbnQoKSB7XG4gICAgICB2YXIgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIG5hbWVbaV0odGhpcywgdmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IC0xLCB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBuYW1lW2ldKHRoaXMsIHgpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBjbGFzc2VkRnVuY3Rpb24gOiBjbGFzc2VkQ29uc3RhbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWROYW1lKG5hbWUpIHtcbiAgICB2YXIgcmUgPSBkM19zZWxlY3Rpb25fY2xhc3NlZFJlKG5hbWUpO1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgICAgaWYgKGMgPSBub2RlLmNsYXNzTGlzdCkgcmV0dXJuIHZhbHVlID8gYy5hZGQobmFtZSkgOiBjLnJlbW92ZShuYW1lKTtcbiAgICAgIHZhciBjID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIGlmICghcmUudGVzdChjKSkgbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBkM19jb2xsYXBzZShjICsgXCIgXCIgKyBuYW1lKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGQzX2NvbGxhcHNlKGMucmVwbGFjZShyZSwgXCIgXCIpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc3R5bGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKG4gPCAzKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKG4gPCAyKSB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIGZvciAocHJpb3JpdHkgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9zdHlsZShwcmlvcml0eSwgbmFtZVtwcmlvcml0eV0sIHZhbHVlKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKG4gPCAyKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgICAgIHJldHVybiBkM193aW5kb3cobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xuICAgICAgfVxuICAgICAgcHJpb3JpdHkgPSBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIGZ1bmN0aW9uIHN0eWxlTnVsbCgpIHtcbiAgICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQoKSB7XG4gICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoeCA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpOyBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgeCwgcHJpb3JpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHN0eWxlTnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVGdW5jdGlvbiA6IHN0eWxlQ29uc3RhbnQ7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHRoaXMubm9kZSgpW25hbWVdO1xuICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3Byb3BlcnR5KHZhbHVlLCBuYW1lW3ZhbHVlXSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3Byb3BlcnR5KG5hbWUsIHZhbHVlKSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9wcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5TnVsbCgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KCkge1xuICAgICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHggPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHggPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07IGVsc2UgdGhpc1tuYW1lXSA9IHg7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gcHJvcGVydHlOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBwcm9wZXJ0eUZ1bmN0aW9uIDogcHJvcGVydHlDb25zdGFudDtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLmVhY2godHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9IDogdmFsdWUgPT0gbnVsbCA/IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgfSA6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH0pIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5odG1sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuZWFjaCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9IDogdmFsdWUgPT0gbnVsbCA/IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgfSkgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IGQzX3NlbGVjdGlvbl9jcmVhdG9yKG5hbWUpO1xuICAgIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKG5hbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jcmVhdG9yKG5hbWUpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsIG5hbWVzcGFjZSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgICAgcmV0dXJuIG5hbWVzcGFjZSA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIG5hbWUpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlTlMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogKG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWUpKS5sb2NhbCA/IGNyZWF0ZU5TIDogY3JlYXRlO1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgICBuYW1lID0gZDNfc2VsZWN0aW9uX2NyZWF0b3IobmFtZSk7XG4gICAgYmVmb3JlID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKGJlZm9yZSk7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKG5hbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgYmVmb3JlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gICAgfSk7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvblJlbW92ZSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvblJlbW92ZSgpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZGF0YSA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGgsIGdyb3VwLCBub2RlO1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFsdWUgPSBuZXcgQXJyYXkobiA9IChncm91cCA9IHRoaXNbMF0pLmxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgdmFsdWVbaV0gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJpbmQoZ3JvdXAsIGdyb3VwRGF0YSkge1xuICAgICAgdmFyIGksIG4gPSBncm91cC5sZW5ndGgsIG0gPSBncm91cERhdGEubGVuZ3RoLCBuMCA9IE1hdGgubWluKG4sIG0pLCB1cGRhdGVOb2RlcyA9IG5ldyBBcnJheShtKSwgZW50ZXJOb2RlcyA9IG5ldyBBcnJheShtKSwgZXhpdE5vZGVzID0gbmV3IEFycmF5KG4pLCBub2RlLCBub2RlRGF0YTtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIG5vZGVCeUtleVZhbHVlID0gbmV3IGQzX01hcCgpLCBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkobiksIGtleVZhbHVlO1xuICAgICAgICBmb3IgKGkgPSAtMTsgKytpIDwgbjsgKSB7XG4gICAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgICAgaWYgKG5vZGVCeUtleVZhbHVlLmhhcyhrZXlWYWx1ZSA9IGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGkpKSkge1xuICAgICAgICAgICAgICBleGl0Tm9kZXNbaV0gPSBub2RlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbm9kZUJ5S2V5VmFsdWUuc2V0KGtleVZhbHVlLCBub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAtMTsgKytpIDwgbTsgKSB7XG4gICAgICAgICAgaWYgKCEobm9kZSA9IG5vZGVCeUtleVZhbHVlLmdldChrZXlWYWx1ZSA9IGtleS5jYWxsKGdyb3VwRGF0YSwgbm9kZURhdGEgPSBncm91cERhdGFbaV0sIGkpKSkpIHtcbiAgICAgICAgICAgIGVudGVyTm9kZXNbaV0gPSBkM19zZWxlY3Rpb25fZGF0YU5vZGUobm9kZURhdGEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm9kZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdXBkYXRlTm9kZXNbaV0gPSBub2RlO1xuICAgICAgICAgICAgbm9kZS5fX2RhdGFfXyA9IG5vZGVEYXRhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlQnlLZXlWYWx1ZS5zZXQoa2V5VmFsdWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBuOyApIHtcbiAgICAgICAgICBpZiAoaSBpbiBrZXlWYWx1ZXMgJiYgbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlc1tpXSkgIT09IHRydWUpIHtcbiAgICAgICAgICAgIGV4aXROb2Rlc1tpXSA9IGdyb3VwW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gLTE7ICsraSA8IG4wOyApIHtcbiAgICAgICAgICBub2RlID0gZ3JvdXBbaV07XG4gICAgICAgICAgbm9kZURhdGEgPSBncm91cERhdGFbaV07XG4gICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUuX19kYXRhX18gPSBub2RlRGF0YTtcbiAgICAgICAgICAgIHVwZGF0ZU5vZGVzW2ldID0gbm9kZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW50ZXJOb2Rlc1tpXSA9IGQzX3NlbGVjdGlvbl9kYXRhTm9kZShub2RlRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoO2kgPCBtOyArK2kpIHtcbiAgICAgICAgICBlbnRlck5vZGVzW2ldID0gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKGdyb3VwRGF0YVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7aSA8IG47ICsraSkge1xuICAgICAgICAgIGV4aXROb2Rlc1tpXSA9IGdyb3VwW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbnRlck5vZGVzLnVwZGF0ZSA9IHVwZGF0ZU5vZGVzO1xuICAgICAgZW50ZXJOb2Rlcy5wYXJlbnROb2RlID0gdXBkYXRlTm9kZXMucGFyZW50Tm9kZSA9IGV4aXROb2Rlcy5wYXJlbnROb2RlID0gZ3JvdXAucGFyZW50Tm9kZTtcbiAgICAgIGVudGVyLnB1c2goZW50ZXJOb2Rlcyk7XG4gICAgICB1cGRhdGUucHVzaCh1cGRhdGVOb2Rlcyk7XG4gICAgICBleGl0LnB1c2goZXhpdE5vZGVzKTtcbiAgICB9XG4gICAgdmFyIGVudGVyID0gZDNfc2VsZWN0aW9uX2VudGVyKFtdKSwgdXBkYXRlID0gZDNfc2VsZWN0aW9uKFtdKSwgZXhpdCA9IGQzX3NlbGVjdGlvbihbXSk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBiaW5kKGdyb3VwID0gdGhpc1tpXSwgdmFsdWUuY2FsbChncm91cCwgZ3JvdXAucGFyZW50Tm9kZS5fX2RhdGFfXywgaSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBiaW5kKGdyb3VwID0gdGhpc1tpXSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGUuZW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbnRlcjtcbiAgICB9O1xuICAgIHVwZGF0ZS5leGl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhpdDtcbiAgICB9O1xuICAgIHJldHVybiB1cGRhdGU7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9kYXRhTm9kZShkYXRhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fZGF0YV9fOiBkYXRhXG4gICAgfTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZGF0dW0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKSA6IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiKTtcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIGdyb3VwLCBub2RlO1xuICAgIGlmICh0eXBlb2YgZmlsdGVyICE9PSBcImZ1bmN0aW9uXCIpIGZpbHRlciA9IGQzX3NlbGVjdGlvbl9maWx0ZXIoZmlsdGVyKTtcbiAgICBmb3IgKHZhciBqID0gMCwgbSA9IHRoaXMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIHN1Ymdyb3VwLnBhcmVudE5vZGUgPSAoZ3JvdXAgPSB0aGlzW2pdKS5wYXJlbnROb2RlO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIGZpbHRlci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9maWx0ZXIoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2VsZWN0TWF0Y2hlcyh0aGlzLCBzZWxlY3Rvcik7XG4gICAgfTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUub3JkZXIgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOyApIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IG5vZGUubmV4dFNpYmxpbmcpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgIGNvbXBhcmF0b3IgPSBkM19zZWxlY3Rpb25fc29ydENvbXBhcmF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB0aGlzW2pdLnNvcnQoY29tcGFyYXRvcik7XG4gICAgcmV0dXJuIHRoaXMub3JkZXIoKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3NvcnRDb21wYXJhdG9yKGNvbXBhcmF0b3IpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIGNvbXBhcmF0b3IgPSBkM19hc2NlbmRpbmc7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJhdG9yKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgICB9O1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5lYWNoID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgZnVuY3Rpb24obm9kZSwgaSwgaikge1xuICAgICAgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKTtcbiAgICB9KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2VhY2goZ3JvdXBzLCBjYWxsYmFjaykge1xuICAgIGZvciAodmFyIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrKG5vZGUsIGksIGopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgYXJncyA9IGQzX2FycmF5KGFyZ3VtZW50cyk7XG4gICAgY2FsbGJhY2suYXBwbHkoYXJnc1swXSA9IHRoaXMsIGFyZ3MpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXRoaXMubm9kZSgpO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbiA9IDA7XG4gICAgZDNfc2VsZWN0aW9uX2VhY2godGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICArK247XG4gICAgfSk7XG4gICAgcmV0dXJuIG47XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9lbnRlcihzZWxlY3Rpb24pIHtcbiAgICBkM19zdWJjbGFzcyhzZWxlY3Rpb24sIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZSk7XG4gICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgfVxuICB2YXIgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlID0gW107XG4gIGQzLnNlbGVjdGlvbi5lbnRlciA9IGQzX3NlbGVjdGlvbl9lbnRlcjtcbiAgZDMuc2VsZWN0aW9uLmVudGVyLnByb3RvdHlwZSA9IGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZTtcbiAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLmFwcGVuZCA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5hcHBlbmQ7XG4gIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZS5lbXB0eSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5lbXB0eTtcbiAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLm5vZGUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUubm9kZTtcbiAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLmNhbGwgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuY2FsbDtcbiAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLnNpemUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2l6ZTtcbiAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgc3Vibm9kZSwgdXBncm91cCwgZ3JvdXAsIG5vZGU7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuICAgICAgdXBncm91cCA9IChncm91cCA9IHRoaXNbal0pLnVwZGF0ZTtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IGdyb3VwLnBhcmVudE5vZGU7XG4gICAgICBmb3IgKHZhciBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaCh1cGdyb3VwW2ldID0gc3Vibm9kZSA9IHNlbGVjdG9yLmNhbGwoZ3JvdXAucGFyZW50Tm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpO1xuICAgICAgICAgIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbihzdWJncm91cHMpO1xuICB9O1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBiZWZvcmUgPSBkM19zZWxlY3Rpb25fZW50ZXJJbnNlcnRCZWZvcmUodGhpcyk7XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvblByb3RvdHlwZS5pbnNlcnQuY2FsbCh0aGlzLCBuYW1lLCBiZWZvcmUpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZW50ZXJJbnNlcnRCZWZvcmUoZW50ZXIpIHtcbiAgICB2YXIgaTAsIGowO1xuICAgIHJldHVybiBmdW5jdGlvbihkLCBpLCBqKSB7XG4gICAgICB2YXIgZ3JvdXAgPSBlbnRlcltqXS51cGRhdGUsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7XG4gICAgICBpZiAoaiAhPSBqMCkgajAgPSBqLCBpMCA9IDA7XG4gICAgICBpZiAoaSA+PSBpMCkgaTAgPSBpICsgMTtcbiAgICAgIHdoaWxlICghKG5vZGUgPSBncm91cFtpMF0pICYmICsraTAgPCBuKSA7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9O1xuICB9XG4gIGQzLnNlbGVjdCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgZ3JvdXA7XG4gICAgaWYgKHR5cGVvZiBub2RlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBncm91cCA9IFsgZDNfc2VsZWN0KG5vZGUsIGQzX2RvY3VtZW50KSBdO1xuICAgICAgZ3JvdXAucGFyZW50Tm9kZSA9IGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JvdXAgPSBbIG5vZGUgXTtcbiAgICAgIGdyb3VwLnBhcmVudE5vZGUgPSBkM19kb2N1bWVudEVsZW1lbnQobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oWyBncm91cCBdKTtcbiAgfTtcbiAgZDMuc2VsZWN0QWxsID0gZnVuY3Rpb24obm9kZXMpIHtcbiAgICB2YXIgZ3JvdXA7XG4gICAgaWYgKHR5cGVvZiBub2RlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgZ3JvdXAgPSBkM19hcnJheShkM19zZWxlY3RBbGwobm9kZXMsIGQzX2RvY3VtZW50KSk7XG4gICAgICBncm91cC5wYXJlbnROb2RlID0gZDNfZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cCA9IGQzX2FycmF5KG5vZGVzKTtcbiAgICAgIGdyb3VwLnBhcmVudE5vZGUgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uKFsgZ3JvdXAgXSk7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XG4gICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChuIDwgMykge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChuIDwgMikgbGlzdGVuZXIgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjYXB0dXJlIGluIHR5cGUpIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fb24oY2FwdHVyZSwgdHlwZVtjYXB0dXJlXSwgbGlzdGVuZXIpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAobiA8IDIpIHJldHVybiAobiA9IHRoaXMubm9kZSgpW1wiX19vblwiICsgdHlwZV0pICYmIG4uXztcbiAgICAgIGNhcHR1cmUgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fb24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX29uKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XG4gICAgdmFyIG5hbWUgPSBcIl9fb25cIiArIHR5cGUsIGkgPSB0eXBlLmluZGV4T2YoXCIuXCIpLCB3cmFwID0gZDNfc2VsZWN0aW9uX29uTGlzdGVuZXI7XG4gICAgaWYgKGkgPiAwKSB0eXBlID0gdHlwZS5zbGljZSgwLCBpKTtcbiAgICB2YXIgZmlsdGVyID0gZDNfc2VsZWN0aW9uX29uRmlsdGVycy5nZXQodHlwZSk7XG4gICAgaWYgKGZpbHRlcikgdHlwZSA9IGZpbHRlciwgd3JhcCA9IGQzX3NlbGVjdGlvbl9vbkZpbHRlcjtcbiAgICBmdW5jdGlvbiBvblJlbW92ZSgpIHtcbiAgICAgIHZhciBsID0gdGhpc1tuYW1lXTtcbiAgICAgIGlmIChsKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsLCBsLiQpO1xuICAgICAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25BZGQoKSB7XG4gICAgICB2YXIgbCA9IHdyYXAobGlzdGVuZXIsIGQzX2FycmF5KGFyZ3VtZW50cykpO1xuICAgICAgb25SZW1vdmUuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCB0aGlzW25hbWVdID0gbCwgbC4kID0gY2FwdHVyZSk7XG4gICAgICBsLl8gPSBsaXN0ZW5lcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsKCkge1xuICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIl5fX29uKFteLl0rKVwiICsgZDMucmVxdW90ZSh0eXBlKSArIFwiJFwiKSwgbWF0Y2g7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgaWYgKG1hdGNoID0gbmFtZS5tYXRjaChyZSkpIHtcbiAgICAgICAgICB2YXIgbCA9IHRoaXNbbmFtZV07XG4gICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG1hdGNoWzFdLCBsLCBsLiQpO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpID8gbGlzdGVuZXIgPyBvbkFkZCA6IG9uUmVtb3ZlIDogbGlzdGVuZXIgPyBkM19ub29wIDogcmVtb3ZlQWxsO1xuICB9XG4gIHZhciBkM19zZWxlY3Rpb25fb25GaWx0ZXJzID0gZDMubWFwKHtcbiAgICBtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuICAgIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIlxuICB9KTtcbiAgaWYgKGQzX2RvY3VtZW50KSB7XG4gICAgZDNfc2VsZWN0aW9uX29uRmlsdGVycy5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICAgIGlmIChcIm9uXCIgKyBrIGluIGQzX2RvY3VtZW50KSBkM19zZWxlY3Rpb25fb25GaWx0ZXJzLnJlbW92ZShrKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fb25MaXN0ZW5lcihsaXN0ZW5lciwgYXJndW1lbnR6KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBvID0gZDMuZXZlbnQ7XG4gICAgICBkMy5ldmVudCA9IGU7XG4gICAgICBhcmd1bWVudHpbMF0gPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnR6KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzLmV2ZW50ID0gbztcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9vbkZpbHRlcihsaXN0ZW5lciwgYXJndW1lbnR6KSB7XG4gICAgdmFyIGwgPSBkM19zZWxlY3Rpb25fb25MaXN0ZW5lcihsaXN0ZW5lciwgYXJndW1lbnR6KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHRhcmdldCA9IHRoaXMsIHJlbGF0ZWQgPSBlLnJlbGF0ZWRUYXJnZXQ7XG4gICAgICBpZiAoIXJlbGF0ZWQgfHwgcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0YXJnZXQpICYgOCkpIHtcbiAgICAgICAgbC5jYWxsKHRhcmdldCwgZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfZXZlbnRfZHJhZ1NlbGVjdCwgZDNfZXZlbnRfZHJhZ0lkID0gMDtcbiAgZnVuY3Rpb24gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKG5vZGUpIHtcbiAgICB2YXIgbmFtZSA9IFwiLmRyYWdzdXBwcmVzcy1cIiArICsrZDNfZXZlbnRfZHJhZ0lkLCBjbGljayA9IFwiY2xpY2tcIiArIG5hbWUsIHcgPSBkMy5zZWxlY3QoZDNfd2luZG93KG5vZGUpKS5vbihcInRvdWNobW92ZVwiICsgbmFtZSwgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCkub24oXCJkcmFnc3RhcnRcIiArIG5hbWUsIGQzX2V2ZW50UHJldmVudERlZmF1bHQpLm9uKFwic2VsZWN0c3RhcnRcIiArIG5hbWUsIGQzX2V2ZW50UHJldmVudERlZmF1bHQpO1xuICAgIGlmIChkM19ldmVudF9kcmFnU2VsZWN0ID09IG51bGwpIHtcbiAgICAgIGQzX2V2ZW50X2RyYWdTZWxlY3QgPSBcIm9uc2VsZWN0c3RhcnRcIiBpbiBub2RlID8gZmFsc2UgOiBkM192ZW5kb3JTeW1ib2wobm9kZS5zdHlsZSwgXCJ1c2VyU2VsZWN0XCIpO1xuICAgIH1cbiAgICBpZiAoZDNfZXZlbnRfZHJhZ1NlbGVjdCkge1xuICAgICAgdmFyIHN0eWxlID0gZDNfZG9jdW1lbnRFbGVtZW50KG5vZGUpLnN0eWxlLCBzZWxlY3QgPSBzdHlsZVtkM19ldmVudF9kcmFnU2VsZWN0XTtcbiAgICAgIHN0eWxlW2QzX2V2ZW50X2RyYWdTZWxlY3RdID0gXCJub25lXCI7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihzdXBwcmVzc0NsaWNrKSB7XG4gICAgICB3Lm9uKG5hbWUsIG51bGwpO1xuICAgICAgaWYgKGQzX2V2ZW50X2RyYWdTZWxlY3QpIHN0eWxlW2QzX2V2ZW50X2RyYWdTZWxlY3RdID0gc2VsZWN0O1xuICAgICAgaWYgKHN1cHByZXNzQ2xpY2spIHtcbiAgICAgICAgdmFyIG9mZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHcub24oY2xpY2ssIG51bGwpO1xuICAgICAgICB9O1xuICAgICAgICB3Lm9uKGNsaWNrLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkM19ldmVudFByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgb2ZmKCk7XG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgICBzZXRUaW1lb3V0KG9mZiwgMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBkMy5tb3VzZSA9IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICAgIHJldHVybiBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgZDNfZXZlbnRTb3VyY2UoKSk7XG4gIH07XG4gIHZhciBkM19tb3VzZV9idWc0NDA4MyA9IHRoaXMubmF2aWdhdG9yICYmIC9XZWJLaXQvLnRlc3QodGhpcy5uYXZpZ2F0b3IudXNlckFnZW50KSA/IC0xIDogMDtcbiAgZnVuY3Rpb24gZDNfbW91c2VQb2ludChjb250YWluZXIsIGUpIHtcbiAgICBpZiAoZS5jaGFuZ2VkVG91Y2hlcykgZSA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgdmFyIHN2ZyA9IGNvbnRhaW5lci5vd25lclNWR0VsZW1lbnQgfHwgY29udGFpbmVyO1xuICAgIGlmIChzdmcuY3JlYXRlU1ZHUG9pbnQpIHtcbiAgICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuICAgICAgaWYgKGQzX21vdXNlX2J1ZzQ0MDgzIDwgMCkge1xuICAgICAgICB2YXIgd2luZG93ID0gZDNfd2luZG93KGNvbnRhaW5lcik7XG4gICAgICAgIGlmICh3aW5kb3cuc2Nyb2xsWCB8fCB3aW5kb3cuc2Nyb2xsWSkge1xuICAgICAgICAgIHN2ZyA9IGQzLnNlbGVjdChcImJvZHlcIikuYXBwZW5kKFwic3ZnXCIpLnN0eWxlKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgIGJvcmRlcjogXCJub25lXCJcbiAgICAgICAgICB9LCBcImltcG9ydGFudFwiKTtcbiAgICAgICAgICB2YXIgY3RtID0gc3ZnWzBdWzBdLmdldFNjcmVlbkNUTSgpO1xuICAgICAgICAgIGQzX21vdXNlX2J1ZzQ0MDgzID0gIShjdG0uZiB8fCBjdG0uZSk7XG4gICAgICAgICAgc3ZnLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZDNfbW91c2VfYnVnNDQwODMpIHBvaW50LnggPSBlLnBhZ2VYLCBwb2ludC55ID0gZS5wYWdlWTsgZWxzZSBwb2ludC54ID0gZS5jbGllbnRYLCBcbiAgICAgIHBvaW50LnkgPSBlLmNsaWVudFk7XG4gICAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShjb250YWluZXIuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICAgIHJldHVybiBbIHBvaW50LngsIHBvaW50LnkgXTtcbiAgICB9XG4gICAgdmFyIHJlY3QgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIFsgZS5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gY29udGFpbmVyLmNsaWVudExlZnQsIGUuY2xpZW50WSAtIHJlY3QudG9wIC0gY29udGFpbmVyLmNsaWVudFRvcCBdO1xuICB9XG4gIGQzLnRvdWNoID0gZnVuY3Rpb24oY29udGFpbmVyLCB0b3VjaGVzLCBpZGVudGlmaWVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBpZGVudGlmaWVyID0gdG91Y2hlcywgdG91Y2hlcyA9IGQzX2V2ZW50U291cmNlKCkuY2hhbmdlZFRvdWNoZXM7XG4gICAgaWYgKHRvdWNoZXMpIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcy5sZW5ndGgsIHRvdWNoOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHRvdWNoID0gdG91Y2hlc1tpXSkuaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gZDNfbW91c2VQb2ludChjb250YWluZXIsIHRvdWNoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGQzLmJlaGF2aW9yLmRyYWcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXZlbnQgPSBkM19ldmVudERpc3BhdGNoKGRyYWcsIFwiZHJhZ1wiLCBcImRyYWdzdGFydFwiLCBcImRyYWdlbmRcIiksIG9yaWdpbiA9IG51bGwsIG1vdXNlZG93biA9IGRyYWdzdGFydChkM19ub29wLCBkMy5tb3VzZSwgZDNfd2luZG93LCBcIm1vdXNlbW92ZVwiLCBcIm1vdXNldXBcIiksIHRvdWNoc3RhcnQgPSBkcmFnc3RhcnQoZDNfYmVoYXZpb3JfZHJhZ1RvdWNoSWQsIGQzLnRvdWNoLCBkM19pZGVudGl0eSwgXCJ0b3VjaG1vdmVcIiwgXCJ0b3VjaGVuZFwiKTtcbiAgICBmdW5jdGlvbiBkcmFnKCkge1xuICAgICAgdGhpcy5vbihcIm1vdXNlZG93bi5kcmFnXCIsIG1vdXNlZG93bikub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRyYWdzdGFydChpZCwgcG9zaXRpb24sIHN1YmplY3QsIG1vdmUsIGVuZCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsIHRhcmdldCA9IGQzLmV2ZW50LnRhcmdldCwgcGFyZW50ID0gdGhhdC5wYXJlbnROb2RlLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGRyYWdnZWQgPSAwLCBkcmFnSWQgPSBpZCgpLCBkcmFnTmFtZSA9IFwiLmRyYWdcIiArIChkcmFnSWQgPT0gbnVsbCA/IFwiXCIgOiBcIi1cIiArIGRyYWdJZCksIGRyYWdPZmZzZXQsIGRyYWdTdWJqZWN0ID0gZDMuc2VsZWN0KHN1YmplY3QodGFyZ2V0KSkub24obW92ZSArIGRyYWdOYW1lLCBtb3ZlZCkub24oZW5kICsgZHJhZ05hbWUsIGVuZGVkKSwgZHJhZ1Jlc3RvcmUgPSBkM19ldmVudF9kcmFnU3VwcHJlc3ModGFyZ2V0KSwgcG9zaXRpb24wID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpO1xuICAgICAgICBpZiAob3JpZ2luKSB7XG4gICAgICAgICAgZHJhZ09mZnNldCA9IG9yaWdpbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICAgICAgICAgIGRyYWdPZmZzZXQgPSBbIGRyYWdPZmZzZXQueCAtIHBvc2l0aW9uMFswXSwgZHJhZ09mZnNldC55IC0gcG9zaXRpb24wWzFdIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHJhZ09mZnNldCA9IFsgMCwgMCBdO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiBcImRyYWdzdGFydFwiXG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgICAgICB2YXIgcG9zaXRpb24xID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpLCBkeCwgZHk7XG4gICAgICAgICAgaWYgKCFwb3NpdGlvbjEpIHJldHVybjtcbiAgICAgICAgICBkeCA9IHBvc2l0aW9uMVswXSAtIHBvc2l0aW9uMFswXTtcbiAgICAgICAgICBkeSA9IHBvc2l0aW9uMVsxXSAtIHBvc2l0aW9uMFsxXTtcbiAgICAgICAgICBkcmFnZ2VkIHw9IGR4IHwgZHk7XG4gICAgICAgICAgcG9zaXRpb24wID0gcG9zaXRpb24xO1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZHJhZ1wiLFxuICAgICAgICAgICAgeDogcG9zaXRpb24xWzBdICsgZHJhZ09mZnNldFswXSxcbiAgICAgICAgICAgIHk6IHBvc2l0aW9uMVsxXSArIGRyYWdPZmZzZXRbMV0sXG4gICAgICAgICAgICBkeDogZHgsXG4gICAgICAgICAgICBkeTogZHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgICAgICBpZiAoIXBvc2l0aW9uKHBhcmVudCwgZHJhZ0lkKSkgcmV0dXJuO1xuICAgICAgICAgIGRyYWdTdWJqZWN0Lm9uKG1vdmUgKyBkcmFnTmFtZSwgbnVsbCkub24oZW5kICsgZHJhZ05hbWUsIG51bGwpO1xuICAgICAgICAgIGRyYWdSZXN0b3JlKGRyYWdnZWQpO1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZHJhZ2VuZFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGRyYWcub3JpZ2luID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JpZ2luO1xuICAgICAgb3JpZ2luID0geDtcbiAgICAgIHJldHVybiBkcmFnO1xuICAgIH07XG4gICAgcmV0dXJuIGQzLnJlYmluZChkcmFnLCBldmVudCwgXCJvblwiKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfYmVoYXZpb3JfZHJhZ1RvdWNoSWQoKSB7XG4gICAgcmV0dXJuIGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXI7XG4gIH1cbiAgZDMudG91Y2hlcyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgdG91Y2hlcykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgdG91Y2hlcyA9IGQzX2V2ZW50U291cmNlKCkudG91Y2hlcztcbiAgICByZXR1cm4gdG91Y2hlcyA/IGQzX2FycmF5KHRvdWNoZXMpLm1hcChmdW5jdGlvbih0b3VjaCkge1xuICAgICAgdmFyIHBvaW50ID0gZDNfbW91c2VQb2ludChjb250YWluZXIsIHRvdWNoKTtcbiAgICAgIHBvaW50LmlkZW50aWZpZXIgPSB0b3VjaC5pZGVudGlmaWVyO1xuICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH0pIDogW107XG4gIH07XG4gIHZhciDOtSA9IDFlLTYsIM61MiA9IM61ICogzrUsIM+AID0gTWF0aC5QSSwgz4QgPSAyICogz4AsIM+EzrUgPSDPhCAtIM61LCBoYWxmz4AgPSDPgCAvIDIsIGQzX3JhZGlhbnMgPSDPgCAvIDE4MCwgZDNfZGVncmVlcyA9IDE4MCAvIM+AO1xuICBmdW5jdGlvbiBkM19zZ24oeCkge1xuICAgIHJldHVybiB4ID4gMCA/IDEgOiB4IDwgMCA/IC0xIDogMDtcbiAgfVxuICBmdW5jdGlvbiBkM19jcm9zczJkKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgLSAoYlsxXSAtIGFbMV0pICogKGNbMF0gLSBhWzBdKTtcbiAgfVxuICBmdW5jdGlvbiBkM19hY29zKHgpIHtcbiAgICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gz4AgOiBNYXRoLmFjb3MoeCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfYXNpbih4KSB7XG4gICAgcmV0dXJuIHggPiAxID8gaGFsZs+AIDogeCA8IC0xID8gLWhhbGbPgCA6IE1hdGguYXNpbih4KTtcbiAgfVxuICBmdW5jdGlvbiBkM19zaW5oKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM19jb3NoKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM190YW5oKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbiAgfVxuICBmdW5jdGlvbiBkM19oYXZlcnNpbih4KSB7XG4gICAgcmV0dXJuICh4ID0gTWF0aC5zaW4oeCAvIDIpKSAqIHg7XG4gIH1cbiAgdmFyIM+BID0gTWF0aC5TUVJUMiwgz4EyID0gMiwgz4E0ID0gNDtcbiAgZDMuaW50ZXJwb2xhdGVab29tID0gZnVuY3Rpb24ocDAsIHAxKSB7XG4gICAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSwgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLCBkeCA9IHV4MSAtIHV4MCwgZHkgPSB1eTEgLSB1eTAsIGQyID0gZHggKiBkeCArIGR5ICogZHksIGksIFM7XG4gICAgaWYgKGQyIDwgzrUyKSB7XG4gICAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyDPgTtcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBbIHV4MCArIHQgKiBkeCwgdXkwICsgdCAqIGR5LCB3MCAqIE1hdGguZXhwKM+BICogdCAqIFMpIF07XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLCBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIM+BNCAqIGQyKSAvICgyICogdzAgKiDPgTIgKiBkMSksIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gz4E0ICogZDIpIC8gKDIgKiB3MSAqIM+BMiAqIGQxKSwgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLCByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgICBTID0gKHIxIC0gcjApIC8gz4E7XG4gICAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgcyA9IHQgKiBTLCBjb3NocjAgPSBkM19jb3NoKHIwKSwgdSA9IHcwIC8gKM+BMiAqIGQxKSAqIChjb3NocjAgKiBkM190YW5oKM+BICogcyArIHIwKSAtIGQzX3NpbmgocjApKTtcbiAgICAgICAgcmV0dXJuIFsgdXgwICsgdSAqIGR4LCB1eTAgKyB1ICogZHksIHcwICogY29zaHIwIC8gZDNfY29zaCjPgSAqIHMgKyByMCkgXTtcbiAgICAgIH07XG4gICAgfVxuICAgIGkuZHVyYXRpb24gPSBTICogMWUzO1xuICAgIHJldHVybiBpO1xuICB9O1xuICBkMy5iZWhhdmlvci56b29tID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZXcgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIGs6IDFcbiAgICB9LCB0cmFuc2xhdGUwLCBjZW50ZXIwLCBjZW50ZXIsIHNpemUgPSBbIDk2MCwgNTAwIF0sIHNjYWxlRXh0ZW50ID0gZDNfYmVoYXZpb3Jfem9vbUluZmluaXR5LCBkdXJhdGlvbiA9IDI1MCwgem9vbWluZyA9IDAsIG1vdXNlZG93biA9IFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vtb3ZlID0gXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZXVwID0gXCJtb3VzZXVwLnpvb21cIiwgbW91c2V3aGVlbFRpbWVyLCB0b3VjaHN0YXJ0ID0gXCJ0b3VjaHN0YXJ0Lnpvb21cIiwgdG91Y2h0aW1lLCBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goem9vbSwgXCJ6b29tc3RhcnRcIiwgXCJ6b29tXCIsIFwiem9vbWVuZFwiKSwgeDAsIHgxLCB5MCwgeTE7XG4gICAgaWYgKCFkM19iZWhhdmlvcl96b29tV2hlZWwpIHtcbiAgICAgIGQzX2JlaGF2aW9yX3pvb21XaGVlbCA9IFwib253aGVlbFwiIGluIGQzX2RvY3VtZW50ID8gKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gLWQzLmV2ZW50LmRlbHRhWSAqIChkMy5ldmVudC5kZWx0YU1vZGUgPyAxMjAgOiAxKTtcbiAgICAgIH0sIFwid2hlZWxcIikgOiBcIm9ubW91c2V3aGVlbFwiIGluIGQzX2RvY3VtZW50ID8gKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZDMuZXZlbnQud2hlZWxEZWx0YTtcbiAgICAgIH0sIFwibW91c2V3aGVlbFwiKSA6IChkM19iZWhhdmlvcl96b29tRGVsdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIC1kMy5ldmVudC5kZXRhaWw7XG4gICAgICB9LCBcIk1vek1vdXNlUGl4ZWxTY3JvbGxcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHpvb20oZykge1xuICAgICAgZy5vbihtb3VzZWRvd24sIG1vdXNlZG93bmVkKS5vbihkM19iZWhhdmlvcl96b29tV2hlZWwgKyBcIi56b29tXCIsIG1vdXNld2hlZWxlZCkub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpLm9uKHRvdWNoc3RhcnQsIHRvdWNoc3RhcnRlZCk7XG4gICAgfVxuICAgIHpvb20uZXZlbnQgPSBmdW5jdGlvbihnKSB7XG4gICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoaXMsIGFyZ3VtZW50cyksIHZpZXcxID0gdmlldztcbiAgICAgICAgaWYgKGQzX3RyYW5zaXRpb25Jbmhlcml0SWQpIHtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmVhY2goXCJzdGFydC56b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmlldyA9IHRoaXMuX19jaGFydF9fIHx8IHtcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgazogMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB9KS50d2VlbihcInpvb206em9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IHNpemVbMF0sIGR5ID0gc2l6ZVsxXSwgY3ggPSBjZW50ZXIwID8gY2VudGVyMFswXSA6IGR4IC8gMiwgY3kgPSBjZW50ZXIwID8gY2VudGVyMFsxXSA6IGR5IC8gMiwgaSA9IGQzLmludGVycG9sYXRlWm9vbShbIChjeCAtIHZpZXcueCkgLyB2aWV3LmssIChjeSAtIHZpZXcueSkgLyB2aWV3LmssIGR4IC8gdmlldy5rIF0sIFsgKGN4IC0gdmlldzEueCkgLyB2aWV3MS5rLCAoY3kgLSB2aWV3MS55KSAvIHZpZXcxLmssIGR4IC8gdmlldzEuayBdKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgIHZhciBsID0gaSh0KSwgayA9IGR4IC8gbFsyXTtcbiAgICAgICAgICAgICAgdGhpcy5fX2NoYXJ0X18gPSB2aWV3ID0ge1xuICAgICAgICAgICAgICAgIHg6IGN4IC0gbFswXSAqIGssXG4gICAgICAgICAgICAgICAgeTogY3kgLSBsWzFdICogayxcbiAgICAgICAgICAgICAgICBrOiBrXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLmVhY2goXCJpbnRlcnJ1cHQuem9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHpvb21lbmRlZChkaXNwYXRjaCk7XG4gICAgICAgICAgfSkuZWFjaChcImVuZC56b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9fY2hhcnRfXyA9IHZpZXc7XG4gICAgICAgICAgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB6b29tLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgdmlldy54LCB2aWV3LnkgXTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6ICtfWzBdLFxuICAgICAgICB5OiArX1sxXSxcbiAgICAgICAgazogdmlldy5rXG4gICAgICB9O1xuICAgICAgcmVzY2FsZSgpO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmlldy5rO1xuICAgICAgdmlldyA9IHtcbiAgICAgICAgeDogdmlldy54LFxuICAgICAgICB5OiB2aWV3LnksXG4gICAgICAgIGs6IG51bGxcbiAgICAgIH07XG4gICAgICBzY2FsZVRvKCtfKTtcbiAgICAgIHJlc2NhbGUoKTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNjYWxlRXh0ZW50O1xuICAgICAgc2NhbGVFeHRlbnQgPSBfID09IG51bGwgPyBkM19iZWhhdmlvcl96b29tSW5maW5pdHkgOiBbICtfWzBdLCArX1sxXSBdO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNlbnRlcjtcbiAgICAgIGNlbnRlciA9IF8gJiYgWyArX1swXSwgK19bMV0gXTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSBfICYmIFsgK19bMF0sICtfWzFdIF07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkdXJhdGlvbjtcbiAgICAgIGR1cmF0aW9uID0gK187XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20ueCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgxO1xuICAgICAgeDEgPSB6O1xuICAgICAgeDAgPSB6LmNvcHkoKTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIGs6IDFcbiAgICAgIH07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20ueSA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuICAgICAgeTEgPSB6O1xuICAgICAgeTAgPSB6LmNvcHkoKTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIGs6IDFcbiAgICAgIH07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uKHApIHtcbiAgICAgIHJldHVybiBbIChwWzBdIC0gdmlldy54KSAvIHZpZXcuaywgKHBbMV0gLSB2aWV3LnkpIC8gdmlldy5rIF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50KGwpIHtcbiAgICAgIHJldHVybiBbIGxbMF0gKiB2aWV3LmsgKyB2aWV3LngsIGxbMV0gKiB2aWV3LmsgKyB2aWV3LnkgXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGVUbyhzKSB7XG4gICAgICB2aWV3LmsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIHMpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlVG8ocCwgbCkge1xuICAgICAgbCA9IHBvaW50KGwpO1xuICAgICAgdmlldy54ICs9IHBbMF0gLSBsWzBdO1xuICAgICAgdmlldy55ICs9IHBbMV0gLSBsWzFdO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tVG8odGhhdCwgcCwgbCwgaykge1xuICAgICAgdGhhdC5fX2NoYXJ0X18gPSB7XG4gICAgICAgIHg6IHZpZXcueCxcbiAgICAgICAgeTogdmlldy55LFxuICAgICAgICBrOiB2aWV3LmtcbiAgICAgIH07XG4gICAgICBzY2FsZVRvKE1hdGgucG93KDIsIGspKTtcbiAgICAgIHRyYW5zbGF0ZVRvKGNlbnRlcjAgPSBwLCBsKTtcbiAgICAgIHRoYXQgPSBkMy5zZWxlY3QodGhhdCk7XG4gICAgICBpZiAoZHVyYXRpb24gPiAwKSB0aGF0ID0gdGhhdC50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pO1xuICAgICAgdGhhdC5jYWxsKHpvb20uZXZlbnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgaWYgKHgxKSB4MS5kb21haW4oeDAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gKHggLSB2aWV3LngpIC8gdmlldy5rO1xuICAgICAgfSkubWFwKHgwLmludmVydCkpO1xuICAgICAgaWYgKHkxKSB5MS5kb21haW4oeTAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeSkge1xuICAgICAgICByZXR1cm4gKHkgLSB2aWV3LnkpIC8gdmlldy5rO1xuICAgICAgfSkubWFwKHkwLmludmVydCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tc3RhcnRlZChkaXNwYXRjaCkge1xuICAgICAgaWYgKCF6b29taW5nKyspIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogXCJ6b29tc3RhcnRcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHpvb21lZChkaXNwYXRjaCkge1xuICAgICAgcmVzY2FsZSgpO1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcInpvb21cIixcbiAgICAgICAgc2NhbGU6IHZpZXcuayxcbiAgICAgICAgdHJhbnNsYXRlOiBbIHZpZXcueCwgdmlldy55IF1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tZW5kZWQoZGlzcGF0Y2gpIHtcbiAgICAgIGlmICghLS16b29taW5nKSBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFwiem9vbWVuZFwiXG4gICAgICB9KSwgY2VudGVyMCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGRyYWdnZWQgPSAwLCBzdWJqZWN0ID0gZDMuc2VsZWN0KGQzX3dpbmRvdyh0aGF0KSkub24obW91c2Vtb3ZlLCBtb3ZlZCkub24obW91c2V1cCwgZW5kZWQpLCBsb2NhdGlvbjAgPSBsb2NhdGlvbihkMy5tb3VzZSh0aGF0KSksIGRyYWdSZXN0b3JlID0gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKHRoYXQpO1xuICAgICAgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoYXQpO1xuICAgICAgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICAgIGRyYWdnZWQgPSAxO1xuICAgICAgICB0cmFuc2xhdGVUbyhkMy5tb3VzZSh0aGF0KSwgbG9jYXRpb24wKTtcbiAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgICBzdWJqZWN0Lm9uKG1vdXNlbW92ZSwgbnVsbCkub24obW91c2V1cCwgbnVsbCk7XG4gICAgICAgIGRyYWdSZXN0b3JlKGRyYWdnZWQpO1xuICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXMsIGRpc3BhdGNoID0gZXZlbnQub2YodGhhdCwgYXJndW1lbnRzKSwgbG9jYXRpb25zMCA9IHt9LCBkaXN0YW5jZTAgPSAwLCBzY2FsZTAsIHpvb21OYW1lID0gXCIuem9vbS1cIiArIGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIsIHRvdWNobW92ZSA9IFwidG91Y2htb3ZlXCIgKyB6b29tTmFtZSwgdG91Y2hlbmQgPSBcInRvdWNoZW5kXCIgKyB6b29tTmFtZSwgdGFyZ2V0cyA9IFtdLCBzdWJqZWN0ID0gZDMuc2VsZWN0KHRoYXQpLCBkcmFnUmVzdG9yZSA9IGQzX2V2ZW50X2RyYWdTdXBwcmVzcyh0aGF0KTtcbiAgICAgIHN0YXJ0ZWQoKTtcbiAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcbiAgICAgIHN1YmplY3Qub24obW91c2Vkb3duLCBudWxsKS5vbih0b3VjaHN0YXJ0LCBzdGFydGVkKTtcbiAgICAgIGZ1bmN0aW9uIHJlbG9jYXRlKCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGQzLnRvdWNoZXModGhhdCk7XG4gICAgICAgIHNjYWxlMCA9IHZpZXcuaztcbiAgICAgICAgdG91Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBpZiAodC5pZGVudGlmaWVyIGluIGxvY2F0aW9uczApIGxvY2F0aW9uczBbdC5pZGVudGlmaWVyXSA9IGxvY2F0aW9uKHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvdWNoZXM7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZDMuZXZlbnQudGFyZ2V0O1xuICAgICAgICBkMy5zZWxlY3QodGFyZ2V0KS5vbih0b3VjaG1vdmUsIG1vdmVkKS5vbih0b3VjaGVuZCwgZW5kZWQpO1xuICAgICAgICB0YXJnZXRzLnB1c2godGFyZ2V0KTtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBkMy5ldmVudC5jaGFuZ2VkVG91Y2hlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjaGFuZ2VkLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGxvY2F0aW9uczBbY2hhbmdlZFtpXS5pZGVudGlmaWVyXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvdWNoZXMgPSByZWxvY2F0ZSgpLCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAodG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBpZiAobm93IC0gdG91Y2h0aW1lIDwgNTAwKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHRvdWNoZXNbMF07XG4gICAgICAgICAgICB6b29tVG8odGhhdCwgcCwgbG9jYXRpb25zMFtwLmlkZW50aWZpZXJdLCBNYXRoLmZsb29yKE1hdGgubG9nKHZpZXcuaykgLyBNYXRoLkxOMikgKyAxKTtcbiAgICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG91Y2h0aW1lID0gbm93O1xuICAgICAgICB9IGVsc2UgaWYgKHRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHZhciBwID0gdG91Y2hlc1swXSwgcSA9IHRvdWNoZXNbMV0sIGR4ID0gcFswXSAtIHFbMF0sIGR5ID0gcFsxXSAtIHFbMV07XG4gICAgICAgICAgZGlzdGFuY2UwID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGQzLnRvdWNoZXModGhhdCksIHAwLCBsMCwgcDEsIGwxO1xuICAgICAgICBkM19zZWxlY3Rpb25faW50ZXJydXB0LmNhbGwodGhhdCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcy5sZW5ndGg7IGkgPCBuOyArK2ksIGwxID0gbnVsbCkge1xuICAgICAgICAgIHAxID0gdG91Y2hlc1tpXTtcbiAgICAgICAgICBpZiAobDEgPSBsb2NhdGlvbnMwW3AxLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgICBpZiAobDApIGJyZWFrO1xuICAgICAgICAgICAgcDAgPSBwMSwgbDAgPSBsMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGwxKSB7XG4gICAgICAgICAgdmFyIGRpc3RhbmNlMSA9IChkaXN0YW5jZTEgPSBwMVswXSAtIHAwWzBdKSAqIGRpc3RhbmNlMSArIChkaXN0YW5jZTEgPSBwMVsxXSAtIHAwWzFdKSAqIGRpc3RhbmNlMSwgc2NhbGUxID0gZGlzdGFuY2UwICYmIE1hdGguc3FydChkaXN0YW5jZTEgLyBkaXN0YW5jZTApO1xuICAgICAgICAgIHAwID0gWyAocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyIF07XG4gICAgICAgICAgbDAgPSBbIChsMFswXSArIGwxWzBdKSAvIDIsIChsMFsxXSArIGwxWzFdKSAvIDIgXTtcbiAgICAgICAgICBzY2FsZVRvKHNjYWxlMSAqIHNjYWxlMCk7XG4gICAgICAgIH1cbiAgICAgICAgdG91Y2h0aW1lID0gbnVsbDtcbiAgICAgICAgdHJhbnNsYXRlVG8ocDAsIGwwKTtcbiAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgICBpZiAoZDMuZXZlbnQudG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgY2hhbmdlZCA9IGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gY2hhbmdlZC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhdGlvbnMwW2NoYW5nZWRbaV0uaWRlbnRpZmllcl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIGlkZW50aWZpZXIgaW4gbG9jYXRpb25zMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgcmVsb2NhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZDMuc2VsZWN0QWxsKHRhcmdldHMpLm9uKHpvb21OYW1lLCBudWxsKTtcbiAgICAgICAgc3ViamVjdC5vbihtb3VzZWRvd24sIG1vdXNlZG93bmVkKS5vbih0b3VjaHN0YXJ0LCB0b3VjaHN0YXJ0ZWQpO1xuICAgICAgICBkcmFnUmVzdG9yZSgpO1xuICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBtb3VzZXdoZWVsZWQoKSB7XG4gICAgICB2YXIgZGlzcGF0Y2ggPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKG1vdXNld2hlZWxUaW1lcikgY2xlYXJUaW1lb3V0KG1vdXNld2hlZWxUaW1lcik7IGVsc2UgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoaXMpLCBcbiAgICAgIHRyYW5zbGF0ZTAgPSBsb2NhdGlvbihjZW50ZXIwID0gY2VudGVyIHx8IGQzLm1vdXNlKHRoaXMpKSwgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgbW91c2V3aGVlbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgbW91c2V3aGVlbFRpbWVyID0gbnVsbDtcbiAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgIH0sIDUwKTtcbiAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNjYWxlVG8oTWF0aC5wb3coMiwgZDNfYmVoYXZpb3Jfem9vbURlbHRhKCkgKiAuMDAyKSAqIHZpZXcuayk7XG4gICAgICB0cmFuc2xhdGVUbyhjZW50ZXIwLCB0cmFuc2xhdGUwKTtcbiAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRibGNsaWNrZWQoKSB7XG4gICAgICB2YXIgcCA9IGQzLm1vdXNlKHRoaXMpLCBrID0gTWF0aC5sb2codmlldy5rKSAvIE1hdGguTE4yO1xuICAgICAgem9vbVRvKHRoaXMsIHAsIGxvY2F0aW9uKHApLCBkMy5ldmVudC5zaGlmdEtleSA/IE1hdGguY2VpbChrKSAtIDEgOiBNYXRoLmZsb29yKGspICsgMSk7XG4gICAgfVxuICAgIHJldHVybiBkMy5yZWJpbmQoem9vbSwgZXZlbnQsIFwib25cIik7XG4gIH07XG4gIHZhciBkM19iZWhhdmlvcl96b29tSW5maW5pdHkgPSBbIDAsIEluZmluaXR5IF0sIGQzX2JlaGF2aW9yX3pvb21EZWx0YSwgZDNfYmVoYXZpb3Jfem9vbVdoZWVsO1xuICBkMy5jb2xvciA9IGQzX2NvbG9yO1xuICBmdW5jdGlvbiBkM19jb2xvcigpIHt9XG4gIGQzX2NvbG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgfTtcbiAgZDMuaHNsID0gZDNfaHNsO1xuICBmdW5jdGlvbiBkM19oc2woaCwgcywgbCkge1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgZDNfaHNsID8gdm9pZCAodGhpcy5oID0gK2gsIHRoaXMucyA9ICtzLCB0aGlzLmwgPSArbCkgOiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGggaW5zdGFuY2VvZiBkM19oc2wgPyBuZXcgZDNfaHNsKGguaCwgaC5zLCBoLmwpIDogZDNfcmdiX3BhcnNlKFwiXCIgKyBoLCBkM19yZ2JfaHNsLCBkM19oc2wpIDogbmV3IGQzX2hzbChoLCBzLCBsKTtcbiAgfVxuICB2YXIgZDNfaHNsUHJvdG90eXBlID0gZDNfaHNsLnByb3RvdHlwZSA9IG5ldyBkM19jb2xvcigpO1xuICBkM19oc2xQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG4gICAgayA9IE1hdGgucG93KC43LCBhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpO1xuICAgIHJldHVybiBuZXcgZDNfaHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgLyBrKTtcbiAgfTtcbiAgZDNfaHNsUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG4gICAgcmV0dXJuIG5ldyBkM19oc2wodGhpcy5oLCB0aGlzLnMsIGsgKiB0aGlzLmwpO1xuICB9O1xuICBkM19oc2xQcm90b3R5cGUucmdiID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2hzbF9yZ2IodGhpcy5oLCB0aGlzLnMsIHRoaXMubCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2hzbF9yZ2IoaCwgcywgbCkge1xuICAgIHZhciBtMSwgbTI7XG4gICAgaCA9IGlzTmFOKGgpID8gMCA6IChoICU9IDM2MCkgPCAwID8gaCArIDM2MCA6IGg7XG4gICAgcyA9IGlzTmFOKHMpID8gMCA6IHMgPCAwID8gMCA6IHMgPiAxID8gMSA6IHM7XG4gICAgbCA9IGwgPCAwID8gMCA6IGwgPiAxID8gMSA6IGw7XG4gICAgbTIgPSBsIDw9IC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICBmdW5jdGlvbiB2KGgpIHtcbiAgICAgIGlmIChoID4gMzYwKSBoIC09IDM2MDsgZWxzZSBpZiAoaCA8IDApIGggKz0gMzYwO1xuICAgICAgaWYgKGggPCA2MCkgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogaCAvIDYwO1xuICAgICAgaWYgKGggPCAxODApIHJldHVybiBtMjtcbiAgICAgIGlmIChoIDwgMjQwKSByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MDtcbiAgICAgIHJldHVybiBtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdnYoaCkge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQodihoKSAqIDI1NSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgZDNfcmdiKHZ2KGggKyAxMjApLCB2dihoKSwgdnYoaCAtIDEyMCkpO1xuICB9XG4gIGQzLmhjbCA9IGQzX2hjbDtcbiAgZnVuY3Rpb24gZDNfaGNsKGgsIGMsIGwpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2hjbCA/IHZvaWQgKHRoaXMuaCA9ICtoLCB0aGlzLmMgPSArYywgdGhpcy5sID0gK2wpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBoIGluc3RhbmNlb2YgZDNfaGNsID8gbmV3IGQzX2hjbChoLmgsIGguYywgaC5sKSA6IGggaW5zdGFuY2VvZiBkM19sYWIgPyBkM19sYWJfaGNsKGgubCwgaC5hLCBoLmIpIDogZDNfbGFiX2hjbCgoaCA9IGQzX3JnYl9sYWIoKGggPSBkMy5yZ2IoaCkpLnIsIGguZywgaC5iKSkubCwgaC5hLCBoLmIpIDogbmV3IGQzX2hjbChoLCBjLCBsKTtcbiAgfVxuICB2YXIgZDNfaGNsUHJvdG90eXBlID0gZDNfaGNsLnByb3RvdHlwZSA9IG5ldyBkM19jb2xvcigpO1xuICBkM19oY2xQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBkM19oY2wodGhpcy5oLCB0aGlzLmMsIE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSkpO1xuICB9O1xuICBkM19oY2xQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfaGNsKHRoaXMuaCwgdGhpcy5jLCBNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSk7XG4gIH07XG4gIGQzX2hjbFByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfaGNsX2xhYih0aGlzLmgsIHRoaXMuYywgdGhpcy5sKS5yZ2IoKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfaGNsX2xhYihoLCBjLCBsKSB7XG4gICAgaWYgKGlzTmFOKGgpKSBoID0gMDtcbiAgICBpZiAoaXNOYU4oYykpIGMgPSAwO1xuICAgIHJldHVybiBuZXcgZDNfbGFiKGwsIE1hdGguY29zKGggKj0gZDNfcmFkaWFucykgKiBjLCBNYXRoLnNpbihoKSAqIGMpO1xuICB9XG4gIGQzLmxhYiA9IGQzX2xhYjtcbiAgZnVuY3Rpb24gZDNfbGFiKGwsIGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2xhYiA/IHZvaWQgKHRoaXMubCA9ICtsLCB0aGlzLmEgPSArYSwgdGhpcy5iID0gK2IpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBsIGluc3RhbmNlb2YgZDNfbGFiID8gbmV3IGQzX2xhYihsLmwsIGwuYSwgbC5iKSA6IGwgaW5zdGFuY2VvZiBkM19oY2wgPyBkM19oY2xfbGFiKGwuaCwgbC5jLCBsLmwpIDogZDNfcmdiX2xhYigobCA9IGQzX3JnYihsKSkuciwgbC5nLCBsLmIpIDogbmV3IGQzX2xhYihsLCBhLCBiKTtcbiAgfVxuICB2YXIgZDNfbGFiX0sgPSAxODtcbiAgdmFyIGQzX2xhYl9YID0gLjk1MDQ3LCBkM19sYWJfWSA9IDEsIGQzX2xhYl9aID0gMS4wODg4MztcbiAgdmFyIGQzX2xhYlByb3RvdHlwZSA9IGQzX2xhYi5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcbiAgZDNfbGFiUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfbGFiKE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSksIHRoaXMuYSwgdGhpcy5iKTtcbiAgfTtcbiAgZDNfbGFiUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IGQzX2xhYihNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSwgdGhpcy5hLCB0aGlzLmIpO1xuICB9O1xuICBkM19sYWJQcm90b3R5cGUucmdiID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2xhYl9yZ2IodGhpcy5sLCB0aGlzLmEsIHRoaXMuYik7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xhYl9yZ2IobCwgYSwgYikge1xuICAgIHZhciB5ID0gKGwgKyAxNikgLyAxMTYsIHggPSB5ICsgYSAvIDUwMCwgeiA9IHkgLSBiIC8gMjAwO1xuICAgIHggPSBkM19sYWJfeHl6KHgpICogZDNfbGFiX1g7XG4gICAgeSA9IGQzX2xhYl94eXooeSkgKiBkM19sYWJfWTtcbiAgICB6ID0gZDNfbGFiX3h5eih6KSAqIGQzX2xhYl9aO1xuICAgIHJldHVybiBuZXcgZDNfcmdiKGQzX3h5el9yZ2IoMy4yNDA0NTQyICogeCAtIDEuNTM3MTM4NSAqIHkgLSAuNDk4NTMxNCAqIHopLCBkM194eXpfcmdiKC0uOTY5MjY2ICogeCArIDEuODc2MDEwOCAqIHkgKyAuMDQxNTU2ICogeiksIGQzX3h5el9yZ2IoLjA1NTY0MzQgKiB4IC0gLjIwNDAyNTkgKiB5ICsgMS4wNTcyMjUyICogeikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xhYl9oY2wobCwgYSwgYikge1xuICAgIHJldHVybiBsID4gMCA/IG5ldyBkM19oY2woTWF0aC5hdGFuMihiLCBhKSAqIGQzX2RlZ3JlZXMsIE1hdGguc3FydChhICogYSArIGIgKiBiKSwgbCkgOiBuZXcgZDNfaGNsKE5hTiwgTmFOLCBsKTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYWJfeHl6KHgpIHtcbiAgICByZXR1cm4geCA+IC4yMDY4OTMwMzQgPyB4ICogeCAqIHggOiAoeCAtIDQgLyAyOSkgLyA3Ljc4NzAzNztcbiAgfVxuICBmdW5jdGlvbiBkM194eXpfbGFiKHgpIHtcbiAgICByZXR1cm4geCA+IC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiA3Ljc4NzAzNyAqIHggKyA0IC8gMjk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfeHl6X3JnYihyKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoMjU1ICogKHIgPD0gLjAwMzA0ID8gMTIuOTIgKiByIDogMS4wNTUgKiBNYXRoLnBvdyhyLCAxIC8gMi40KSAtIC4wNTUpKTtcbiAgfVxuICBkMy5yZ2IgPSBkM19yZ2I7XG4gIGZ1bmN0aW9uIGQzX3JnYihyLCBnLCBiKSB7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBkM19yZ2IgPyB2b2lkICh0aGlzLnIgPSB+fnIsIHRoaXMuZyA9IH5+ZywgdGhpcy5iID0gfn5iKSA6IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gciBpbnN0YW5jZW9mIGQzX3JnYiA/IG5ldyBkM19yZ2Ioci5yLCByLmcsIHIuYikgOiBkM19yZ2JfcGFyc2UoXCJcIiArIHIsIGQzX3JnYiwgZDNfaHNsX3JnYikgOiBuZXcgZDNfcmdiKHIsIGcsIGIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYk51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgZDNfcmdiKHZhbHVlID4+IDE2LCB2YWx1ZSA+PiA4ICYgMjU1LCB2YWx1ZSAmIDI1NSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfcmdiU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIGQzX3JnYk51bWJlcih2YWx1ZSkgKyBcIlwiO1xuICB9XG4gIHZhciBkM19yZ2JQcm90b3R5cGUgPSBkM19yZ2IucHJvdG90eXBlID0gbmV3IGQzX2NvbG9yKCk7XG4gIGQzX3JnYlByb3RvdHlwZS5icmlnaHRlciA9IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG4gICAgdmFyIHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmIsIGkgPSAzMDtcbiAgICBpZiAoIXIgJiYgIWcgJiYgIWIpIHJldHVybiBuZXcgZDNfcmdiKGksIGksIGkpO1xuICAgIGlmIChyICYmIHIgPCBpKSByID0gaTtcbiAgICBpZiAoZyAmJiBnIDwgaSkgZyA9IGk7XG4gICAgaWYgKGIgJiYgYiA8IGkpIGIgPSBpO1xuICAgIHJldHVybiBuZXcgZDNfcmdiKE1hdGgubWluKDI1NSwgciAvIGspLCBNYXRoLm1pbigyNTUsIGcgLyBrKSwgTWF0aC5taW4oMjU1LCBiIC8gaykpO1xuICB9O1xuICBkM19yZ2JQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuICAgIGsgPSBNYXRoLnBvdyguNywgYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKTtcbiAgICByZXR1cm4gbmV3IGQzX3JnYihrICogdGhpcy5yLCBrICogdGhpcy5nLCBrICogdGhpcy5iKTtcbiAgfTtcbiAgZDNfcmdiUHJvdG90eXBlLmhzbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19yZ2JfaHNsKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuICB9O1xuICBkM19yZ2JQcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCIjXCIgKyBkM19yZ2JfaGV4KHRoaXMucikgKyBkM19yZ2JfaGV4KHRoaXMuZykgKyBkM19yZ2JfaGV4KHRoaXMuYik7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3JnYl9oZXgodikge1xuICAgIHJldHVybiB2IDwgMTYgPyBcIjBcIiArIE1hdGgubWF4KDAsIHYpLnRvU3RyaW5nKDE2KSA6IE1hdGgubWluKDI1NSwgdikudG9TdHJpbmcoMTYpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYl9wYXJzZShmb3JtYXQsIHJnYiwgaHNsKSB7XG4gICAgdmFyIHIgPSAwLCBnID0gMCwgYiA9IDAsIG0xLCBtMiwgY29sb3I7XG4gICAgbTEgPSAvKFthLXpdKylcXCgoLiopXFwpLy5leGVjKGZvcm1hdCA9IGZvcm1hdC50b0xvd2VyQ2FzZSgpKTtcbiAgICBpZiAobTEpIHtcbiAgICAgIG0yID0gbTFbMl0uc3BsaXQoXCIsXCIpO1xuICAgICAgc3dpdGNoIChtMVsxXSkge1xuICAgICAgIGNhc2UgXCJoc2xcIjpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiBoc2wocGFyc2VGbG9hdChtMlswXSksIHBhcnNlRmxvYXQobTJbMV0pIC8gMTAwLCBwYXJzZUZsb2F0KG0yWzJdKSAvIDEwMCk7XG4gICAgICAgIH1cblxuICAgICAgIGNhc2UgXCJyZ2JcIjpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiByZ2IoZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzBdKSwgZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzFdKSwgZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzJdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbG9yID0gZDNfcmdiX25hbWVzLmdldChmb3JtYXQpKSB7XG4gICAgICByZXR1cm4gcmdiKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ICE9IG51bGwgJiYgZm9ybWF0LmNoYXJBdCgwKSA9PT0gXCIjXCIgJiYgIWlzTmFOKGNvbG9yID0gcGFyc2VJbnQoZm9ybWF0LnNsaWNlKDEpLCAxNikpKSB7XG4gICAgICBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgICByID0gKGNvbG9yICYgMzg0MCkgPj4gNDtcbiAgICAgICAgciA9IHIgPj4gNCB8IHI7XG4gICAgICAgIGcgPSBjb2xvciAmIDI0MDtcbiAgICAgICAgZyA9IGcgPj4gNCB8IGc7XG4gICAgICAgIGIgPSBjb2xvciAmIDE1O1xuICAgICAgICBiID0gYiA8PCA0IHwgYjtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNykge1xuICAgICAgICByID0gKGNvbG9yICYgMTY3MTE2ODApID4+IDE2O1xuICAgICAgICBnID0gKGNvbG9yICYgNjUyODApID4+IDg7XG4gICAgICAgIGIgPSBjb2xvciAmIDI1NTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJnYihyLCBnLCBiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfaHNsKHIsIGcsIGIpIHtcbiAgICB2YXIgbWluID0gTWF0aC5taW4ociAvPSAyNTUsIGcgLz0gMjU1LCBiIC89IDI1NSksIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLCBkID0gbWF4IC0gbWluLCBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuICAgIGlmIChkKSB7XG4gICAgICBzID0gbCA8IC41ID8gZCAvIChtYXggKyBtaW4pIDogZCAvICgyIC0gbWF4IC0gbWluKTtcbiAgICAgIGlmIChyID09IG1heCkgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBlbHNlIGlmIChnID09IG1heCkgaCA9IChiIC0gcikgLyBkICsgMjsgZWxzZSBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgaCAqPSA2MDtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IE5hTjtcbiAgICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IGQzX2hzbChoLCBzLCBsKTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfbGFiKHIsIGcsIGIpIHtcbiAgICByID0gZDNfcmdiX3h5eihyKTtcbiAgICBnID0gZDNfcmdiX3h5eihnKTtcbiAgICBiID0gZDNfcmdiX3h5eihiKTtcbiAgICB2YXIgeCA9IGQzX3h5el9sYWIoKC40MTI0NTY0ICogciArIC4zNTc1NzYxICogZyArIC4xODA0Mzc1ICogYikgLyBkM19sYWJfWCksIHkgPSBkM194eXpfbGFiKCguMjEyNjcyOSAqIHIgKyAuNzE1MTUyMiAqIGcgKyAuMDcyMTc1ICogYikgLyBkM19sYWJfWSksIHogPSBkM194eXpfbGFiKCguMDE5MzMzOSAqIHIgKyAuMTE5MTkyICogZyArIC45NTAzMDQxICogYikgLyBkM19sYWJfWik7XG4gICAgcmV0dXJuIGQzX2xhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYl94eXoocikge1xuICAgIHJldHVybiAociAvPSAyNTUpIDw9IC4wNDA0NSA/IHIgLyAxMi45MiA6IE1hdGgucG93KChyICsgLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfcGFyc2VOdW1iZXIoYykge1xuICAgIHZhciBmID0gcGFyc2VGbG9hdChjKTtcbiAgICByZXR1cm4gYy5jaGFyQXQoYy5sZW5ndGggLSAxKSA9PT0gXCIlXCIgPyBNYXRoLnJvdW5kKGYgKiAyLjU1KSA6IGY7XG4gIH1cbiAgdmFyIGQzX3JnYl9uYW1lcyA9IGQzLm1hcCh7XG4gICAgYWxpY2VibHVlOiAxNTc5MjM4MyxcbiAgICBhbnRpcXVld2hpdGU6IDE2NDQ0Mzc1LFxuICAgIGFxdWE6IDY1NTM1LFxuICAgIGFxdWFtYXJpbmU6IDgzODg1NjQsXG4gICAgYXp1cmU6IDE1Nzk0MTc1LFxuICAgIGJlaWdlOiAxNjExOTI2MCxcbiAgICBiaXNxdWU6IDE2NzcwMjQ0LFxuICAgIGJsYWNrOiAwLFxuICAgIGJsYW5jaGVkYWxtb25kOiAxNjc3MjA0NSxcbiAgICBibHVlOiAyNTUsXG4gICAgYmx1ZXZpb2xldDogOTA1NTIwMixcbiAgICBicm93bjogMTA4MjQyMzQsXG4gICAgYnVybHl3b29kOiAxNDU5NjIzMSxcbiAgICBjYWRldGJsdWU6IDYyNjY1MjgsXG4gICAgY2hhcnRyZXVzZTogODM4ODM1MixcbiAgICBjaG9jb2xhdGU6IDEzNzg5NDcwLFxuICAgIGNvcmFsOiAxNjc0NDI3MixcbiAgICBjb3JuZmxvd2VyYmx1ZTogNjU5MTk4MSxcbiAgICBjb3Juc2lsazogMTY3NzUzODgsXG4gICAgY3JpbXNvbjogMTQ0MjMxMDAsXG4gICAgY3lhbjogNjU1MzUsXG4gICAgZGFya2JsdWU6IDEzOSxcbiAgICBkYXJrY3lhbjogMzU3MjMsXG4gICAgZGFya2dvbGRlbnJvZDogMTIwOTI5MzksXG4gICAgZGFya2dyYXk6IDExMTE5MDE3LFxuICAgIGRhcmtncmVlbjogMjU2MDAsXG4gICAgZGFya2dyZXk6IDExMTE5MDE3LFxuICAgIGRhcmtraGFraTogMTI0MzMyNTksXG4gICAgZGFya21hZ2VudGE6IDkxMDk2NDMsXG4gICAgZGFya29saXZlZ3JlZW46IDU1OTc5OTksXG4gICAgZGFya29yYW5nZTogMTY3NDc1MjAsXG4gICAgZGFya29yY2hpZDogMTAwNDAwMTIsXG4gICAgZGFya3JlZDogOTEwOTUwNCxcbiAgICBkYXJrc2FsbW9uOiAxNTMwODQxMCxcbiAgICBkYXJrc2VhZ3JlZW46IDk0MTk5MTksXG4gICAgZGFya3NsYXRlYmx1ZTogNDczNDM0NyxcbiAgICBkYXJrc2xhdGVncmF5OiAzMTAwNDk1LFxuICAgIGRhcmtzbGF0ZWdyZXk6IDMxMDA0OTUsXG4gICAgZGFya3R1cnF1b2lzZTogNTI5NDUsXG4gICAgZGFya3Zpb2xldDogOTY5OTUzOSxcbiAgICBkZWVwcGluazogMTY3MTY5NDcsXG4gICAgZGVlcHNreWJsdWU6IDQ5MTUxLFxuICAgIGRpbWdyYXk6IDY5MDgyNjUsXG4gICAgZGltZ3JleTogNjkwODI2NSxcbiAgICBkb2RnZXJibHVlOiAyMDAzMTk5LFxuICAgIGZpcmVicmljazogMTE2NzQxNDYsXG4gICAgZmxvcmFsd2hpdGU6IDE2Nzc1OTIwLFxuICAgIGZvcmVzdGdyZWVuOiAyMjYzODQyLFxuICAgIGZ1Y2hzaWE6IDE2NzExOTM1LFxuICAgIGdhaW5zYm9ybzogMTQ0NzQ0NjAsXG4gICAgZ2hvc3R3aGl0ZTogMTYzMTY2NzEsXG4gICAgZ29sZDogMTY3NjY3MjAsXG4gICAgZ29sZGVucm9kOiAxNDMyOTEyMCxcbiAgICBncmF5OiA4NDIxNTA0LFxuICAgIGdyZWVuOiAzMjc2OCxcbiAgICBncmVlbnllbGxvdzogMTE0MDMwNTUsXG4gICAgZ3JleTogODQyMTUwNCxcbiAgICBob25leWRldzogMTU3OTQxNjAsXG4gICAgaG90cGluazogMTY3Mzg3NDAsXG4gICAgaW5kaWFucmVkOiAxMzQ1ODUyNCxcbiAgICBpbmRpZ286IDQ5MTUzMzAsXG4gICAgaXZvcnk6IDE2Nzc3MjAwLFxuICAgIGtoYWtpOiAxNTc4NzY2MCxcbiAgICBsYXZlbmRlcjogMTUxMzI0MTAsXG4gICAgbGF2ZW5kZXJibHVzaDogMTY3NzMzNjUsXG4gICAgbGF3bmdyZWVuOiA4MTkwOTc2LFxuICAgIGxlbW9uY2hpZmZvbjogMTY3NzU4ODUsXG4gICAgbGlnaHRibHVlOiAxMTM5MzI1NCxcbiAgICBsaWdodGNvcmFsOiAxNTc2MTUzNixcbiAgICBsaWdodGN5YW46IDE0NzQ1NTk5LFxuICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiAxNjQ0ODIxMCxcbiAgICBsaWdodGdyYXk6IDEzODgyMzIzLFxuICAgIGxpZ2h0Z3JlZW46IDk0OTgyNTYsXG4gICAgbGlnaHRncmV5OiAxMzg4MjMyMyxcbiAgICBsaWdodHBpbms6IDE2NzU4NDY1LFxuICAgIGxpZ2h0c2FsbW9uOiAxNjc1Mjc2MixcbiAgICBsaWdodHNlYWdyZWVuOiAyMTQyODkwLFxuICAgIGxpZ2h0c2t5Ymx1ZTogODkwMDM0NixcbiAgICBsaWdodHNsYXRlZ3JheTogNzgzMzc1MyxcbiAgICBsaWdodHNsYXRlZ3JleTogNzgzMzc1MyxcbiAgICBsaWdodHN0ZWVsYmx1ZTogMTE1ODQ3MzQsXG4gICAgbGlnaHR5ZWxsb3c6IDE2Nzc3MTg0LFxuICAgIGxpbWU6IDY1MjgwLFxuICAgIGxpbWVncmVlbjogMzMyOTMzMCxcbiAgICBsaW5lbjogMTY0NDU2NzAsXG4gICAgbWFnZW50YTogMTY3MTE5MzUsXG4gICAgbWFyb29uOiA4Mzg4NjA4LFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IDY3MzczMjIsXG4gICAgbWVkaXVtYmx1ZTogMjA1LFxuICAgIG1lZGl1bW9yY2hpZDogMTIyMTE2NjcsXG4gICAgbWVkaXVtcHVycGxlOiA5NjYyNjgzLFxuICAgIG1lZGl1bXNlYWdyZWVuOiAzOTc4MDk3LFxuICAgIG1lZGl1bXNsYXRlYmx1ZTogODA4Nzc5MCxcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogNjQxNTQsXG4gICAgbWVkaXVtdHVycXVvaXNlOiA0NzcyMzAwLFxuICAgIG1lZGl1bXZpb2xldHJlZDogMTMwNDcxNzMsXG4gICAgbWlkbmlnaHRibHVlOiAxNjQ0OTEyLFxuICAgIG1pbnRjcmVhbTogMTYxMjE4NTAsXG4gICAgbWlzdHlyb3NlOiAxNjc3MDI3MyxcbiAgICBtb2NjYXNpbjogMTY3NzAyMjksXG4gICAgbmF2YWpvd2hpdGU6IDE2NzY4Njg1LFxuICAgIG5hdnk6IDEyOCxcbiAgICBvbGRsYWNlOiAxNjY0MzU1OCxcbiAgICBvbGl2ZTogODQyMTM3NixcbiAgICBvbGl2ZWRyYWI6IDcwNDg3MzksXG4gICAgb3JhbmdlOiAxNjc1MzkyMCxcbiAgICBvcmFuZ2VyZWQ6IDE2NzI5MzQ0LFxuICAgIG9yY2hpZDogMTQzMTU3MzQsXG4gICAgcGFsZWdvbGRlbnJvZDogMTU2NTcxMzAsXG4gICAgcGFsZWdyZWVuOiAxMDAyNTg4MCxcbiAgICBwYWxldHVycXVvaXNlOiAxMTUyOTk2NixcbiAgICBwYWxldmlvbGV0cmVkOiAxNDM4MTIwMyxcbiAgICBwYXBheWF3aGlwOiAxNjc3MzA3NyxcbiAgICBwZWFjaHB1ZmY6IDE2NzY3NjczLFxuICAgIHBlcnU6IDEzNDY4OTkxLFxuICAgIHBpbms6IDE2NzYxMDM1LFxuICAgIHBsdW06IDE0NTI0NjM3LFxuICAgIHBvd2RlcmJsdWU6IDExNTkxOTEwLFxuICAgIHB1cnBsZTogODM4ODczNixcbiAgICByZWJlY2NhcHVycGxlOiA2Njk3ODgxLFxuICAgIHJlZDogMTY3MTE2ODAsXG4gICAgcm9zeWJyb3duOiAxMjM1NzUxOSxcbiAgICByb3lhbGJsdWU6IDQyODY5NDUsXG4gICAgc2FkZGxlYnJvd246IDkxMjcxODcsXG4gICAgc2FsbW9uOiAxNjQxNjg4MixcbiAgICBzYW5keWJyb3duOiAxNjAzMjg2NCxcbiAgICBzZWFncmVlbjogMzA1MDMyNyxcbiAgICBzZWFzaGVsbDogMTY3NzQ2MzgsXG4gICAgc2llbm5hOiAxMDUwNjc5NyxcbiAgICBzaWx2ZXI6IDEyNjMyMjU2LFxuICAgIHNreWJsdWU6IDg5MDAzMzEsXG4gICAgc2xhdGVibHVlOiA2OTcwMDYxLFxuICAgIHNsYXRlZ3JheTogNzM3Mjk0NCxcbiAgICBzbGF0ZWdyZXk6IDczNzI5NDQsXG4gICAgc25vdzogMTY3NzU5MzAsXG4gICAgc3ByaW5nZ3JlZW46IDY1NDA3LFxuICAgIHN0ZWVsYmx1ZTogNDYyMDk4MCxcbiAgICB0YW46IDEzODA4NzgwLFxuICAgIHRlYWw6IDMyODk2LFxuICAgIHRoaXN0bGU6IDE0MjA0ODg4LFxuICAgIHRvbWF0bzogMTY3MzcwOTUsXG4gICAgdHVycXVvaXNlOiA0MjUxODU2LFxuICAgIHZpb2xldDogMTU2MzEwODYsXG4gICAgd2hlYXQ6IDE2MTEzMzMxLFxuICAgIHdoaXRlOiAxNjc3NzIxNSxcbiAgICB3aGl0ZXNtb2tlOiAxNjExOTI4NSxcbiAgICB5ZWxsb3c6IDE2Nzc2OTYwLFxuICAgIHllbGxvd2dyZWVuOiAxMDE0NTA3NFxuICB9KTtcbiAgZDNfcmdiX25hbWVzLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGQzX3JnYl9uYW1lcy5zZXQoa2V5LCBkM19yZ2JOdW1iZXIodmFsdWUpKTtcbiAgfSk7XG4gIGZ1bmN0aW9uIGQzX2Z1bmN0b3Iodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiID8gdiA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfTtcbiAgfVxuICBkMy5mdW5jdG9yID0gZDNfZnVuY3RvcjtcbiAgZDMueGhyID0gZDNfeGhyVHlwZShkM19pZGVudGl0eSk7XG4gIGZ1bmN0aW9uIGQzX3hoclR5cGUocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odXJsLCBtaW1lVHlwZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBtaW1lVHlwZSA9PT0gXCJmdW5jdGlvblwiKSBjYWxsYmFjayA9IG1pbWVUeXBlLCBcbiAgICAgIG1pbWVUeXBlID0gbnVsbDtcbiAgICAgIHJldHVybiBkM194aHIodXJsLCBtaW1lVHlwZSwgcmVzcG9uc2UsIGNhbGxiYWNrKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3hocih1cmwsIG1pbWVUeXBlLCByZXNwb25zZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgeGhyID0ge30sIGRpc3BhdGNoID0gZDMuZGlzcGF0Y2goXCJiZWZvcmVzZW5kXCIsIFwicHJvZ3Jlc3NcIiwgXCJsb2FkXCIsIFwiZXJyb3JcIiksIGhlYWRlcnMgPSB7fSwgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLCByZXNwb25zZVR5cGUgPSBudWxsO1xuICAgIGlmICh0aGlzLlhEb21haW5SZXF1ZXN0ICYmICEoXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiByZXF1ZXN0KSAmJiAvXihodHRwKHMpPzopP1xcL1xcLy8udGVzdCh1cmwpKSByZXF1ZXN0ID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgXCJvbmxvYWRcIiBpbiByZXF1ZXN0ID8gcmVxdWVzdC5vbmxvYWQgPSByZXF1ZXN0Lm9uZXJyb3IgPSByZXNwb25kIDogcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlcXVlc3QucmVhZHlTdGF0ZSA+IDMgJiYgcmVzcG9uZCgpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gcmVzcG9uZCgpIHtcbiAgICAgIHZhciBzdGF0dXMgPSByZXF1ZXN0LnN0YXR1cywgcmVzdWx0O1xuICAgICAgaWYgKCFzdGF0dXMgJiYgZDNfeGhySGFzUmVzcG9uc2UocmVxdWVzdCkgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXN1bHQgPSByZXNwb25zZS5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoLmxvYWQuY2FsbCh4aHIsIHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgbyA9IGQzLmV2ZW50O1xuICAgICAgZDMuZXZlbnQgPSBldmVudDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRpc3BhdGNoLnByb2dyZXNzLmNhbGwoeGhyLCByZXF1ZXN0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzLmV2ZW50ID0gbztcbiAgICAgIH1cbiAgICB9O1xuICAgIHhoci5oZWFkZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgbmFtZSA9IChuYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGhlYWRlcnNbbmFtZV07XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIGhlYWRlcnNbbmFtZV07IGVsc2UgaGVhZGVyc1tuYW1lXSA9IHZhbHVlICsgXCJcIjtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfTtcbiAgICB4aHIubWltZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbWltZVR5cGU7XG4gICAgICBtaW1lVHlwZSA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmVzcG9uc2VUeXBlO1xuICAgICAgcmVzcG9uc2VUeXBlID0gdmFsdWU7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgeGhyLnJlc3BvbnNlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3BvbnNlID0gdmFsdWU7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgWyBcImdldFwiLCBcInBvc3RcIiBdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICB4aHJbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geGhyLnNlbmQuYXBwbHkoeGhyLCBbIG1ldGhvZCBdLmNvbmNhdChkM19hcnJheShhcmd1bWVudHMpKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHhoci5zZW5kID0gZnVuY3Rpb24obWV0aG9kLCBkYXRhLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgICAgIHJlcXVlc3Qub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiAhKFwiYWNjZXB0XCIgaW4gaGVhZGVycykpIGhlYWRlcnNbXCJhY2NlcHRcIl0gPSBtaW1lVHlwZSArIFwiLCovKlwiO1xuICAgICAgaWYgKHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcikgZm9yICh2YXIgbmFtZSBpbiBoZWFkZXJzKSByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIobmFtZSwgaGVhZGVyc1tuYW1lXSk7XG4gICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUpIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZShtaW1lVHlwZSk7XG4gICAgICBpZiAocmVzcG9uc2VUeXBlICE9IG51bGwpIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHhoci5vbihcImVycm9yXCIsIGNhbGxiYWNrKS5vbihcImxvYWRcIiwgZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXF1ZXN0KTtcbiAgICAgIH0pO1xuICAgICAgZGlzcGF0Y2guYmVmb3Jlc2VuZC5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICByZXF1ZXN0LnNlbmQoZGF0YSA9PSBudWxsID8gbnVsbCA6IGRhdGEpO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIHhoci5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIGQzLnJlYmluZCh4aHIsIGRpc3BhdGNoLCBcIm9uXCIpO1xuICAgIHJldHVybiBjYWxsYmFjayA9PSBudWxsID8geGhyIDogeGhyLmdldChkM194aHJfZml4Q2FsbGJhY2soY2FsbGJhY2spKTtcbiAgfVxuICBmdW5jdGlvbiBkM194aHJfZml4Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gY2FsbGJhY2subGVuZ3RoID09PSAxID8gZnVuY3Rpb24oZXJyb3IsIHJlcXVlc3QpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yID09IG51bGwgPyByZXF1ZXN0IDogbnVsbCk7XG4gICAgfSA6IGNhbGxiYWNrO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3hockhhc1Jlc3BvbnNlKHJlcXVlc3QpIHtcbiAgICB2YXIgdHlwZSA9IHJlcXVlc3QucmVzcG9uc2VUeXBlO1xuICAgIHJldHVybiB0eXBlICYmIHR5cGUgIT09IFwidGV4dFwiID8gcmVxdWVzdC5yZXNwb25zZSA6IHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICB9XG4gIGQzLmRzdiA9IGZ1bmN0aW9uKGRlbGltaXRlciwgbWltZVR5cGUpIHtcbiAgICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKCdbXCInICsgZGVsaW1pdGVyICsgXCJcXG5dXCIpLCBkZWxpbWl0ZXJDb2RlID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG4gICAgZnVuY3Rpb24gZHN2KHVybCwgcm93LCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBjYWxsYmFjayA9IHJvdywgcm93ID0gbnVsbDtcbiAgICAgIHZhciB4aHIgPSBkM194aHIodXJsLCBtaW1lVHlwZSwgcm93ID09IG51bGwgPyByZXNwb25zZSA6IHR5cGVkUmVzcG9uc2Uocm93KSwgY2FsbGJhY2spO1xuICAgICAgeGhyLnJvdyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB4aHIucmVzcG9uc2UoKHJvdyA9IF8pID09IG51bGwgPyByZXNwb25zZSA6IHR5cGVkUmVzcG9uc2UoXykpIDogcm93O1xuICAgICAgfTtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc3BvbnNlKHJlcXVlc3QpIHtcbiAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0eXBlZFJlc3BvbnNlKGYpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQsIGYpO1xuICAgICAgfTtcbiAgICB9XG4gICAgZHN2LnBhcnNlID0gZnVuY3Rpb24odGV4dCwgZikge1xuICAgICAgdmFyIG87XG4gICAgICByZXR1cm4gZHN2LnBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgICAgaWYgKG8pIHJldHVybiBvKHJvdywgaSAtIDEpO1xuICAgICAgICB2YXIgYSA9IG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgcm93Lm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gICAgICAgIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xuICAgICAgICBvID0gZiA/IGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgICAgIHJldHVybiBmKGEocm93KSwgaSk7XG4gICAgICAgIH0gOiBhO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBkc3YucGFyc2VSb3dzID0gZnVuY3Rpb24odGV4dCwgZikge1xuICAgICAgdmFyIEVPTCA9IHt9LCBFT0YgPSB7fSwgcm93cyA9IFtdLCBOID0gdGV4dC5sZW5ndGgsIEkgPSAwLCBuID0gMCwgdCwgZW9sO1xuICAgICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICAgIGlmIChJID49IE4pIHJldHVybiBFT0Y7XG4gICAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuICAgICAgICB2YXIgaiA9IEk7XG4gICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IDM0KSB7XG4gICAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICAgIHdoaWxlIChpKysgPCBOKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSAzNCkge1xuICAgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMzQpIGJyZWFrO1xuICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIEkgPSBpICsgMjtcbiAgICAgICAgICB2YXIgYyA9IHRleHQuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICAgICAgaWYgKGMgPT09IDEzKSB7XG4gICAgICAgICAgICBlb2wgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpICsgMikgPT09IDEwKSArK0k7XG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAxMCkge1xuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiArIDEsIGkpLnJlcGxhY2UoL1wiXCIvZywgJ1wiJyk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgICAgdmFyIGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKSwgayA9IDE7XG4gICAgICAgICAgaWYgKGMgPT09IDEwKSBlb2wgPSB0cnVlOyBlbHNlIGlmIChjID09PSAxMykge1xuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IDEwKSArK0ksICsraztcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgIT09IGRlbGltaXRlckNvZGUpIGNvbnRpbnVlO1xuICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIEkgLSBrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHtcbiAgICAgICAgICBhLnB1c2godCk7XG4gICAgICAgICAgdCA9IHRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGYgJiYgKGEgPSBmKGEsIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICByb3dzLnB1c2goYSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm93cztcbiAgICB9O1xuICAgIGRzdi5mb3JtYXQgPSBmdW5jdGlvbihyb3dzKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyb3dzWzBdKSkgcmV0dXJuIGRzdi5mb3JtYXRSb3dzKHJvd3MpO1xuICAgICAgdmFyIGZpZWxkU2V0ID0gbmV3IGQzX1NldCgpLCBmaWVsZHMgPSBbXTtcbiAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgZm9yICh2YXIgZmllbGQgaW4gcm93KSB7XG4gICAgICAgICAgaWYgKCFmaWVsZFNldC5oYXMoZmllbGQpKSB7XG4gICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZFNldC5hZGQoZmllbGQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFsgZmllbGRzLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpIF0uY29uY2F0KHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgICByZXR1cm4gZmllbGRzLm1hcChmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbZmllbGRdKTtcbiAgICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcbiAgICBkc3YuZm9ybWF0Um93cyA9IGZ1bmN0aW9uKHJvd3MpIHtcbiAgICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgICByZXR1cm4gcmVGb3JtYXQudGVzdCh0ZXh0KSA/ICdcIicgKyB0ZXh0LnJlcGxhY2UoL1xcXCIvZywgJ1wiXCInKSArICdcIicgOiB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gZHN2O1xuICB9O1xuICBkMy5jc3YgPSBkMy5kc3YoXCIsXCIsIFwidGV4dC9jc3ZcIik7XG4gIGQzLnRzdiA9IGQzLmRzdihcIlx0XCIsIFwidGV4dC90YWItc2VwYXJhdGVkLXZhbHVlc1wiKTtcbiAgdmFyIGQzX3RpbWVyX3F1ZXVlSGVhZCwgZDNfdGltZXJfcXVldWVUYWlsLCBkM190aW1lcl9pbnRlcnZhbCwgZDNfdGltZXJfdGltZW91dCwgZDNfdGltZXJfZnJhbWUgPSB0aGlzW2QzX3ZlbmRvclN5bWJvbCh0aGlzLCBcInJlcXVlc3RBbmltYXRpb25GcmFtZVwiKV0gfHwgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNyk7XG4gIH07XG4gIGQzLnRpbWVyID0gZnVuY3Rpb24oKSB7XG4gICAgZDNfdGltZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aGVuKSB7XG4gICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChuIDwgMikgZGVsYXkgPSAwO1xuICAgIGlmIChuIDwgMykgdGhlbiA9IERhdGUubm93KCk7XG4gICAgdmFyIHRpbWUgPSB0aGVuICsgZGVsYXksIHRpbWVyID0ge1xuICAgICAgYzogY2FsbGJhY2ssXG4gICAgICB0OiB0aW1lLFxuICAgICAgbjogbnVsbFxuICAgIH07XG4gICAgaWYgKGQzX3RpbWVyX3F1ZXVlVGFpbCkgZDNfdGltZXJfcXVldWVUYWlsLm4gPSB0aW1lcjsgZWxzZSBkM190aW1lcl9xdWV1ZUhlYWQgPSB0aW1lcjtcbiAgICBkM190aW1lcl9xdWV1ZVRhaWwgPSB0aW1lcjtcbiAgICBpZiAoIWQzX3RpbWVyX2ludGVydmFsKSB7XG4gICAgICBkM190aW1lcl90aW1lb3V0ID0gY2xlYXJUaW1lb3V0KGQzX3RpbWVyX3RpbWVvdXQpO1xuICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxO1xuICAgICAgZDNfdGltZXJfZnJhbWUoZDNfdGltZXJfc3RlcCk7XG4gICAgfVxuICAgIHJldHVybiB0aW1lcjtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lcl9zdGVwKCkge1xuICAgIHZhciBub3cgPSBkM190aW1lcl9tYXJrKCksIGRlbGF5ID0gZDNfdGltZXJfc3dlZXAoKSAtIG5vdztcbiAgICBpZiAoZGVsYXkgPiAyNCkge1xuICAgICAgaWYgKGlzRmluaXRlKGRlbGF5KSkge1xuICAgICAgICBjbGVhclRpbWVvdXQoZDNfdGltZXJfdGltZW91dCk7XG4gICAgICAgIGQzX3RpbWVyX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGQzX3RpbWVyX3N0ZXAsIGRlbGF5KTtcbiAgICAgIH1cbiAgICAgIGQzX3RpbWVyX2ludGVydmFsID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxO1xuICAgICAgZDNfdGltZXJfZnJhbWUoZDNfdGltZXJfc3RlcCk7XG4gICAgfVxuICB9XG4gIGQzLnRpbWVyLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgZDNfdGltZXJfbWFyaygpO1xuICAgIGQzX3RpbWVyX3N3ZWVwKCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3RpbWVyX21hcmsoKSB7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCksIHRpbWVyID0gZDNfdGltZXJfcXVldWVIZWFkO1xuICAgIHdoaWxlICh0aW1lcikge1xuICAgICAgaWYgKG5vdyA+PSB0aW1lci50ICYmIHRpbWVyLmMobm93IC0gdGltZXIudCkpIHRpbWVyLmMgPSBudWxsO1xuICAgICAgdGltZXIgPSB0aW1lci5uO1xuICAgIH1cbiAgICByZXR1cm4gbm93O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVyX3N3ZWVwKCkge1xuICAgIHZhciB0MCwgdDEgPSBkM190aW1lcl9xdWV1ZUhlYWQsIHRpbWUgPSBJbmZpbml0eTtcbiAgICB3aGlsZSAodDEpIHtcbiAgICAgIGlmICh0MS5jKSB7XG4gICAgICAgIGlmICh0MS50IDwgdGltZSkgdGltZSA9IHQxLnQ7XG4gICAgICAgIHQxID0gKHQwID0gdDEpLm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0MSA9IHQwID8gdDAubiA9IHQxLm4gOiBkM190aW1lcl9xdWV1ZUhlYWQgPSB0MS5uO1xuICAgICAgfVxuICAgIH1cbiAgICBkM190aW1lcl9xdWV1ZVRhaWwgPSB0MDtcbiAgICByZXR1cm4gdGltZTtcbiAgfVxuICBmdW5jdGlvbiBkM19mb3JtYXRfcHJlY2lzaW9uKHgsIHApIHtcbiAgICByZXR1cm4gcCAtICh4ID8gTWF0aC5jZWlsKE1hdGgubG9nKHgpIC8gTWF0aC5MTjEwKSA6IDEpO1xuICB9XG4gIGQzLnJvdW5kID0gZnVuY3Rpb24oeCwgbikge1xuICAgIHJldHVybiBuID8gTWF0aC5yb3VuZCh4ICogKG4gPSBNYXRoLnBvdygxMCwgbikpKSAvIG4gOiBNYXRoLnJvdW5kKHgpO1xuICB9O1xuICB2YXIgZDNfZm9ybWF0UHJlZml4ZXMgPSBbIFwieVwiLCBcInpcIiwgXCJhXCIsIFwiZlwiLCBcInBcIiwgXCJuXCIsIFwiwrVcIiwgXCJtXCIsIFwiXCIsIFwia1wiLCBcIk1cIiwgXCJHXCIsIFwiVFwiLCBcIlBcIiwgXCJFXCIsIFwiWlwiLCBcIllcIiBdLm1hcChkM19mb3JtYXRQcmVmaXgpO1xuICBkMy5mb3JtYXRQcmVmaXggPSBmdW5jdGlvbih2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIGlmICh2YWx1ZSA9ICt2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgKj0gLTE7XG4gICAgICBpZiAocHJlY2lzaW9uKSB2YWx1ZSA9IGQzLnJvdW5kKHZhbHVlLCBkM19mb3JtYXRfcHJlY2lzaW9uKHZhbHVlLCBwcmVjaXNpb24pKTtcbiAgICAgIGkgPSAxICsgTWF0aC5mbG9vcigxZS0xMiArIE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4xMCk7XG4gICAgICBpID0gTWF0aC5tYXgoLTI0LCBNYXRoLm1pbigyNCwgTWF0aC5mbG9vcigoaSAtIDEpIC8gMykgKiAzKSk7XG4gICAgfVxuICAgIHJldHVybiBkM19mb3JtYXRQcmVmaXhlc1s4ICsgaSAvIDNdO1xuICB9O1xuICBmdW5jdGlvbiBkM19mb3JtYXRQcmVmaXgoZCwgaSkge1xuICAgIHZhciBrID0gTWF0aC5wb3coMTAsIGFicyg4IC0gaSkgKiAzKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2NhbGU6IGkgPiA4ID8gZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZCAvIGs7XG4gICAgICB9IDogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZCAqIGs7XG4gICAgICB9LFxuICAgICAgc3ltYm9sOiBkXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19sb2NhbGVfbnVtYmVyRm9ybWF0KGxvY2FsZSkge1xuICAgIHZhciBsb2NhbGVfZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsLCBsb2NhbGVfdGhvdXNhbmRzID0gbG9jYWxlLnRob3VzYW5kcywgbG9jYWxlX2dyb3VwaW5nID0gbG9jYWxlLmdyb3VwaW5nLCBsb2NhbGVfY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksIGZvcm1hdEdyb3VwID0gbG9jYWxlX2dyb3VwaW5nICYmIGxvY2FsZV90aG91c2FuZHMgPyBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLCB0ID0gW10sIGogPSAwLCBnID0gbG9jYWxlX2dyb3VwaW5nWzBdLCBsZW5ndGggPSAwO1xuICAgICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgICBnID0gbG9jYWxlX2dyb3VwaW5nW2ogPSAoaiArIDEpICUgbG9jYWxlX2dyb3VwaW5nLmxlbmd0aF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbihsb2NhbGVfdGhvdXNhbmRzKTtcbiAgICB9IDogZDNfaWRlbnRpdHk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIG1hdGNoID0gZDNfZm9ybWF0X3JlLmV4ZWMoc3BlY2lmaWVyKSwgZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiLCBhbGlnbiA9IG1hdGNoWzJdIHx8IFwiPlwiLCBzaWduID0gbWF0Y2hbM10gfHwgXCItXCIsIHN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCIsIHpmaWxsID0gbWF0Y2hbNV0sIHdpZHRoID0gK21hdGNoWzZdLCBjb21tYSA9IG1hdGNoWzddLCBwcmVjaXNpb24gPSBtYXRjaFs4XSwgdHlwZSA9IG1hdGNoWzldLCBzY2FsZSA9IDEsIHByZWZpeCA9IFwiXCIsIHN1ZmZpeCA9IFwiXCIsIGludGVnZXIgPSBmYWxzZSwgZXhwb25lbnQgPSB0cnVlO1xuICAgICAgaWYgKHByZWNpc2lvbikgcHJlY2lzaW9uID0gK3ByZWNpc2lvbi5zdWJzdHJpbmcoMSk7XG4gICAgICBpZiAoemZpbGwgfHwgZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSB7XG4gICAgICAgIHpmaWxsID0gZmlsbCA9IFwiMFwiO1xuICAgICAgICBhbGlnbiA9IFwiPVwiO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgY2FzZSBcIm5cIjpcbiAgICAgICAgY29tbWEgPSB0cnVlO1xuICAgICAgICB0eXBlID0gXCJnXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcIiVcIjpcbiAgICAgICAgc2NhbGUgPSAxMDA7XG4gICAgICAgIHN1ZmZpeCA9IFwiJVwiO1xuICAgICAgICB0eXBlID0gXCJmXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcInBcIjpcbiAgICAgICAgc2NhbGUgPSAxMDA7XG4gICAgICAgIHN1ZmZpeCA9IFwiJVwiO1xuICAgICAgICB0eXBlID0gXCJyXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcImJcIjpcbiAgICAgICBjYXNlIFwib1wiOlxuICAgICAgIGNhc2UgXCJ4XCI6XG4gICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgaWYgKHN5bWJvbCA9PT0gXCIjXCIpIHByZWZpeCA9IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgZXhwb25lbnQgPSBmYWxzZTtcblxuICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgIGludGVnZXIgPSB0cnVlO1xuICAgICAgICBwcmVjaXNpb24gPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgIHNjYWxlID0gLTE7XG4gICAgICAgIHR5cGUgPSBcInJcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoc3ltYm9sID09PSBcIiRcIikgcHJlZml4ID0gbG9jYWxlX2N1cnJlbmN5WzBdLCBzdWZmaXggPSBsb2NhbGVfY3VycmVuY3lbMV07XG4gICAgICBpZiAodHlwZSA9PSBcInJcIiAmJiAhcHJlY2lzaW9uKSB0eXBlID0gXCJnXCI7XG4gICAgICBpZiAocHJlY2lzaW9uICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJnXCIpIHByZWNpc2lvbiA9IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKTsgZWxzZSBpZiAodHlwZSA9PSBcImVcIiB8fCB0eXBlID09IFwiZlwiKSBwcmVjaXNpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG4gICAgICB9XG4gICAgICB0eXBlID0gZDNfZm9ybWF0X3R5cGVzLmdldCh0eXBlKSB8fCBkM19mb3JtYXRfdHlwZURlZmF1bHQ7XG4gICAgICB2YXIgemNvbW1hID0gemZpbGwgJiYgY29tbWE7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGZ1bGxTdWZmaXggPSBzdWZmaXg7XG4gICAgICAgIGlmIChpbnRlZ2VyICYmIHZhbHVlICUgMSkgcmV0dXJuIFwiXCI7XG4gICAgICAgIHZhciBuZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gKHZhbHVlID0gLXZhbHVlLCBcIi1cIikgOiBzaWduID09PSBcIi1cIiA/IFwiXCIgOiBzaWduO1xuICAgICAgICBpZiAoc2NhbGUgPCAwKSB7XG4gICAgICAgICAgdmFyIHVuaXQgPSBkMy5mb3JtYXRQcmVmaXgodmFsdWUsIHByZWNpc2lvbik7XG4gICAgICAgICAgdmFsdWUgPSB1bml0LnNjYWxlKHZhbHVlKTtcbiAgICAgICAgICBmdWxsU3VmZml4ID0gdW5pdC5zeW1ib2wgKyBzdWZmaXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgKj0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB0eXBlKHZhbHVlLCBwcmVjaXNpb24pO1xuICAgICAgICB2YXIgaSA9IHZhbHVlLmxhc3RJbmRleE9mKFwiLlwiKSwgYmVmb3JlLCBhZnRlcjtcbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgdmFyIGogPSBleHBvbmVudCA/IHZhbHVlLmxhc3RJbmRleE9mKFwiZVwiKSA6IC0xO1xuICAgICAgICAgIGlmIChqIDwgMCkgYmVmb3JlID0gdmFsdWUsIGFmdGVyID0gXCJcIjsgZWxzZSBiZWZvcmUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgaiksIGFmdGVyID0gdmFsdWUuc3Vic3RyaW5nKGopO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IHZhbHVlLnN1YnN0cmluZygwLCBpKTtcbiAgICAgICAgICBhZnRlciA9IGxvY2FsZV9kZWNpbWFsICsgdmFsdWUuc3Vic3RyaW5nKGkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXpmaWxsICYmIGNvbW1hKSBiZWZvcmUgPSBmb3JtYXRHcm91cChiZWZvcmUsIEluZmluaXR5KTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHByZWZpeC5sZW5ndGggKyBiZWZvcmUubGVuZ3RoICsgYWZ0ZXIubGVuZ3RoICsgKHpjb21tYSA/IDAgOiBuZWdhdGl2ZS5sZW5ndGgpLCBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkobGVuZ3RoID0gd2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcbiAgICAgICAgaWYgKHpjb21tYSkgYmVmb3JlID0gZm9ybWF0R3JvdXAocGFkZGluZyArIGJlZm9yZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIGFmdGVyLmxlbmd0aCA6IEluZmluaXR5KTtcbiAgICAgICAgbmVnYXRpdmUgKz0gcHJlZml4O1xuICAgICAgICB2YWx1ZSA9IGJlZm9yZSArIGFmdGVyO1xuICAgICAgICByZXR1cm4gKGFsaWduID09PSBcIjxcIiA/IG5lZ2F0aXZlICsgdmFsdWUgKyBwYWRkaW5nIDogYWxpZ24gPT09IFwiPlwiID8gcGFkZGluZyArIG5lZ2F0aXZlICsgdmFsdWUgOiBhbGlnbiA9PT0gXCJeXCIgPyBwYWRkaW5nLnN1YnN0cmluZygwLCBsZW5ndGggPj49IDEpICsgbmVnYXRpdmUgKyB2YWx1ZSArIHBhZGRpbmcuc3Vic3RyaW5nKGxlbmd0aCkgOiBuZWdhdGl2ZSArICh6Y29tbWEgPyB2YWx1ZSA6IHBhZGRpbmcgKyB2YWx1ZSkpICsgZnVsbFN1ZmZpeDtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfZm9ybWF0X3JlID0gLyg/OihbXntdKT8oWzw+PV5dKSk/KFsrXFwtIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuLT9cXGQrKT8oW2EteiVdKT8vaTtcbiAgdmFyIGQzX2Zvcm1hdF90eXBlcyA9IGQzLm1hcCh7XG4gICAgYjogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMik7XG4gICAgfSxcbiAgICBjOiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcbiAgICB9LFxuICAgIG86IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB4LnRvU3RyaW5nKDgpO1xuICAgIH0sXG4gICAgeDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpO1xuICAgIH0sXG4gICAgWDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgfSxcbiAgICBnOiBmdW5jdGlvbih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b1ByZWNpc2lvbihwKTtcbiAgICB9LFxuICAgIGU6IGZ1bmN0aW9uKHgsIHApIHtcbiAgICAgIHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b0ZpeGVkKHApO1xuICAgIH0sXG4gICAgcjogZnVuY3Rpb24oeCwgcCkge1xuICAgICAgcmV0dXJuICh4ID0gZDMucm91bmQoeCwgZDNfZm9ybWF0X3ByZWNpc2lvbih4LCBwKSkpLnRvRml4ZWQoTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIGQzX2Zvcm1hdF9wcmVjaXNpb24oeCAqICgxICsgMWUtMTUpLCBwKSkpKTtcbiAgICB9XG4gIH0pO1xuICBmdW5jdGlvbiBkM19mb3JtYXRfdHlwZURlZmF1bHQoeCkge1xuICAgIHJldHVybiB4ICsgXCJcIjtcbiAgfVxuICB2YXIgZDNfdGltZSA9IGQzLnRpbWUgPSB7fSwgZDNfZGF0ZSA9IERhdGU7XG4gIGZ1bmN0aW9uIGQzX2RhdGVfdXRjKCkge1xuICAgIHRoaXMuXyA9IG5ldyBEYXRlKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gRGF0ZS5VVEMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGFyZ3VtZW50c1swXSk7XG4gIH1cbiAgZDNfZGF0ZV91dGMucHJvdG90eXBlID0ge1xuICAgIGdldERhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENEYXRlKCk7XG4gICAgfSxcbiAgICBnZXREYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENEYXkoKTtcbiAgICB9LFxuICAgIGdldEZ1bGxZZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDRnVsbFllYXIoKTtcbiAgICB9LFxuICAgIGdldEhvdXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDSG91cnMoKTtcbiAgICB9LFxuICAgIGdldE1pbGxpc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIH0sXG4gICAgZ2V0TWludXRlczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01pbnV0ZXMoKTtcbiAgICB9LFxuICAgIGdldE1vbnRoOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDTW9udGgoKTtcbiAgICB9LFxuICAgIGdldFNlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENTZWNvbmRzKCk7XG4gICAgfSxcbiAgICBnZXRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VGltZSgpO1xuICAgIH0sXG4gICAgZ2V0VGltZXpvbmVPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICB2YWx1ZU9mOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8udmFsdWVPZigpO1xuICAgIH0sXG4gICAgc2V0RGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENEYXRlLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldERheTogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENEYXkuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0RnVsbFllYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDRnVsbFllYXIuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0SG91cnM6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDSG91cnMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0TWlsbGlzZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01pbGxpc2Vjb25kcy5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzZXRNaW51dGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01pbnV0ZXMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0TW9udGg6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDTW9udGguYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0U2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENTZWNvbmRzLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldFRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VGltZS5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xuICB2YXIgZDNfdGltZV9wcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbiAgZnVuY3Rpb24gZDNfdGltZV9pbnRlcnZhbChsb2NhbCwgc3RlcCwgbnVtYmVyKSB7XG4gICAgZnVuY3Rpb24gcm91bmQoZGF0ZSkge1xuICAgICAgdmFyIGQwID0gbG9jYWwoZGF0ZSksIGQxID0gb2Zmc2V0KGQwLCAxKTtcbiAgICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjZWlsKGRhdGUpIHtcbiAgICAgIHN0ZXAoZGF0ZSA9IGxvY2FsKG5ldyBkM19kYXRlKGRhdGUgLSAxKSksIDEpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9mZnNldChkYXRlLCBrKSB7XG4gICAgICBzdGVwKGRhdGUgPSBuZXcgZDNfZGF0ZSgrZGF0ZSksIGspO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmdlKHQwLCB0MSwgZHQpIHtcbiAgICAgIHZhciB0aW1lID0gY2VpbCh0MCksIHRpbWVzID0gW107XG4gICAgICBpZiAoZHQgPiAxKSB7XG4gICAgICAgIHdoaWxlICh0aW1lIDwgdDEpIHtcbiAgICAgICAgICBpZiAoIShudW1iZXIodGltZSkgJSBkdCkpIHRpbWVzLnB1c2gobmV3IERhdGUoK3RpbWUpKTtcbiAgICAgICAgICBzdGVwKHRpbWUsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAodGltZSA8IHQxKSB0aW1lcy5wdXNoKG5ldyBEYXRlKCt0aW1lKSksIHN0ZXAodGltZSwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGltZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmdlX3V0Yyh0MCwgdDEsIGR0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBkM19kYXRlID0gZDNfZGF0ZV91dGM7XG4gICAgICAgIHZhciB1dGMgPSBuZXcgZDNfZGF0ZV91dGMoKTtcbiAgICAgICAgdXRjLl8gPSB0MDtcbiAgICAgICAgcmV0dXJuIHJhbmdlKHV0YywgdDEsIGR0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzX2RhdGUgPSBEYXRlO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2NhbC5mbG9vciA9IGxvY2FsO1xuICAgIGxvY2FsLnJvdW5kID0gcm91bmQ7XG4gICAgbG9jYWwuY2VpbCA9IGNlaWw7XG4gICAgbG9jYWwub2Zmc2V0ID0gb2Zmc2V0O1xuICAgIGxvY2FsLnJhbmdlID0gcmFuZ2U7XG4gICAgdmFyIHV0YyA9IGxvY2FsLnV0YyA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKGxvY2FsKTtcbiAgICB1dGMuZmxvb3IgPSB1dGM7XG4gICAgdXRjLnJvdW5kID0gZDNfdGltZV9pbnRlcnZhbF91dGMocm91bmQpO1xuICAgIHV0Yy5jZWlsID0gZDNfdGltZV9pbnRlcnZhbF91dGMoY2VpbCk7XG4gICAgdXRjLm9mZnNldCA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKG9mZnNldCk7XG4gICAgdXRjLnJhbmdlID0gcmFuZ2VfdXRjO1xuICAgIHJldHVybiBsb2NhbDtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2ludGVydmFsX3V0YyhtZXRob2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICB2YXIgdXRjID0gbmV3IGQzX2RhdGVfdXRjKCk7XG4gICAgICAgIHV0Yy5fID0gZGF0ZTtcbiAgICAgICAgcmV0dXJuIG1ldGhvZCh1dGMsIGspLl87XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkM19kYXRlID0gRGF0ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzX3RpbWUueWVhciA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUgPSBkM190aW1lLmRheShkYXRlKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIHJldHVybiBkYXRlO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB9KTtcbiAgZDNfdGltZS55ZWFycyA9IGQzX3RpbWUueWVhci5yYW5nZTtcbiAgZDNfdGltZS55ZWFycy51dGMgPSBkM190aW1lLnllYXIudXRjLnJhbmdlO1xuICBkM190aW1lLmRheSA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkYXkgPSBuZXcgZDNfZGF0ZSgyZTMsIDApO1xuICAgIGRheS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xuICAgIHJldHVybiBkYXk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIG9mZnNldCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xuICB9KTtcbiAgZDNfdGltZS5kYXlzID0gZDNfdGltZS5kYXkucmFuZ2U7XG4gIGQzX3RpbWUuZGF5cy51dGMgPSBkM190aW1lLmRheS51dGMucmFuZ2U7XG4gIGQzX3RpbWUuZGF5T2ZZZWFyID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB5ZWFyID0gZDNfdGltZS55ZWFyKGRhdGUpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKChkYXRlIC0geWVhciAtIChkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgLSB5ZWFyLmdldFRpbWV6b25lT2Zmc2V0KCkpICogNmU0KSAvIDg2NGU1KTtcbiAgfTtcbiAgWyBcInN1bmRheVwiLCBcIm1vbmRheVwiLCBcInR1ZXNkYXlcIiwgXCJ3ZWRuZXNkYXlcIiwgXCJ0aHVyc2RheVwiLCBcImZyaWRheVwiLCBcInNhdHVyZGF5XCIgXS5mb3JFYWNoKGZ1bmN0aW9uKGRheSwgaSkge1xuICAgIGkgPSA3IC0gaTtcbiAgICB2YXIgaW50ZXJ2YWwgPSBkM190aW1lW2RheV0gPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIChkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSkpLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIGkpICUgNyk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIE1hdGguZmxvb3Iob2Zmc2V0KSAqIDcpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpIC0gKGRheSAhPT0gaSk7XG4gICAgfSk7XG4gICAgZDNfdGltZVtkYXkgKyBcInNcIl0gPSBpbnRlcnZhbC5yYW5nZTtcbiAgICBkM190aW1lW2RheSArIFwic1wiXS51dGMgPSBpbnRlcnZhbC51dGMucmFuZ2U7XG4gICAgZDNfdGltZVtkYXkgKyBcIk9mWWVhclwiXSA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpO1xuICAgIH07XG4gIH0pO1xuICBkM190aW1lLndlZWsgPSBkM190aW1lLnN1bmRheTtcbiAgZDNfdGltZS53ZWVrcyA9IGQzX3RpbWUuc3VuZGF5LnJhbmdlO1xuICBkM190aW1lLndlZWtzLnV0YyA9IGQzX3RpbWUuc3VuZGF5LnV0Yy5yYW5nZTtcbiAgZDNfdGltZS53ZWVrT2ZZZWFyID0gZDNfdGltZS5zdW5kYXlPZlllYXI7XG4gIGZ1bmN0aW9uIGQzX2xvY2FsZV90aW1lRm9ybWF0KGxvY2FsZSkge1xuICAgIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsIGxvY2FsZV9kYXlzID0gbG9jYWxlLmRheXMsIGxvY2FsZV9zaG9ydERheXMgPSBsb2NhbGUuc2hvcnREYXlzLCBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocywgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuICAgIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKSB7XG4gICAgICB2YXIgbiA9IHRlbXBsYXRlLmxlbmd0aDtcbiAgICAgIGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG4gICAgICAgIHZhciBzdHJpbmcgPSBbXSwgaSA9IC0xLCBqID0gMCwgYywgcCwgZjtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBpZiAodGVtcGxhdGUuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICAgIHN0cmluZy5wdXNoKHRlbXBsYXRlLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICAgIGlmICgocCA9IGQzX3RpbWVfZm9ybWF0UGFkc1tjID0gdGVtcGxhdGUuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gdGVtcGxhdGUuY2hhckF0KCsraSk7XG4gICAgICAgICAgICBpZiAoZiA9IGQzX3RpbWVfZm9ybWF0c1tjXSkgYyA9IGYoZGF0ZSwgcCA9PSBudWxsID8gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiIDogcCk7XG4gICAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyaW5nLnB1c2godGVtcGxhdGUuc2xpY2UoaiwgaSkpO1xuICAgICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgICB9XG4gICAgICBmb3JtYXQucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgdmFyIGQgPSB7XG4gICAgICAgICAgeTogMTkwMCxcbiAgICAgICAgICBtOiAwLFxuICAgICAgICAgIGQ6IDEsXG4gICAgICAgICAgSDogMCxcbiAgICAgICAgICBNOiAwLFxuICAgICAgICAgIFM6IDAsXG4gICAgICAgICAgTDogMCxcbiAgICAgICAgICBaOiBudWxsXG4gICAgICAgIH0sIGkgPSBkM190aW1lX3BhcnNlKGQsIHRlbXBsYXRlLCBzdHJpbmcsIDApO1xuICAgICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG4gICAgICAgIHZhciBsb2NhbFogPSBkLlogIT0gbnVsbCAmJiBkM19kYXRlICE9PSBkM19kYXRlX3V0YywgZGF0ZSA9IG5ldyAobG9jYWxaID8gZDNfZGF0ZV91dGMgOiBkM19kYXRlKSgpO1xuICAgICAgICBpZiAoXCJqXCIgaW4gZCkgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIGQuaik7IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIDEpO1xuICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoZC55LCAwLCBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF0ZS5nZXREYXkoKSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF0ZS5nZXREYXkoKSArIDYpICUgNyk7XG4gICAgICAgIH0gZWxzZSBkYXRlLnNldEZ1bGxZZWFyKGQueSwgZC5tLCBkLmQpO1xuICAgICAgICBkYXRlLnNldEhvdXJzKGQuSCArIChkLlogLyAxMDAgfCAwKSwgZC5NICsgZC5aICUgMTAwLCBkLlMsIGQuTCk7XG4gICAgICAgIHJldHVybiBsb2NhbFogPyBkYXRlLl8gOiBkYXRlO1xuICAgICAgfTtcbiAgICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZShkYXRlLCB0ZW1wbGF0ZSwgc3RyaW5nLCBqKSB7XG4gICAgICB2YXIgYywgcCwgdCwgaSA9IDAsIG4gPSB0ZW1wbGF0ZS5sZW5ndGgsIG0gPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgICAgYyA9IHRlbXBsYXRlLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgICAgdCA9IHRlbXBsYXRlLmNoYXJBdChpKyspO1xuICAgICAgICAgIHAgPSBkM190aW1lX3BhcnNlcnNbdCBpbiBkM190aW1lX2Zvcm1hdFBhZHMgPyB0ZW1wbGF0ZS5jaGFyQXQoaSsrKSA6IHRdO1xuICAgICAgICAgIGlmICghcCB8fCAoaiA9IHAoZGF0ZSwgc3RyaW5nLCBqKSkgPCAwKSByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gajtcbiAgICB9XG4gICAgZDNfdGltZV9mb3JtYXQudXRjID0gZnVuY3Rpb24odGVtcGxhdGUpIHtcbiAgICAgIHZhciBsb2NhbCA9IGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKTtcbiAgICAgIGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICAgIHZhciB1dGMgPSBuZXcgZDNfZGF0ZSgpO1xuICAgICAgICAgIHV0Yy5fID0gZGF0ZTtcbiAgICAgICAgICByZXR1cm4gbG9jYWwodXRjKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBkM19kYXRlID0gRGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9ybWF0LnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICAgIHZhciBkYXRlID0gbG9jYWwucGFyc2Uoc3RyaW5nKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLl87XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IERhdGU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmb3JtYXQudG9TdHJpbmcgPSBsb2NhbC50b1N0cmluZztcbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfTtcbiAgICBkM190aW1lX2Zvcm1hdC5tdWx0aSA9IGQzX3RpbWVfZm9ybWF0LnV0Yy5tdWx0aSA9IGQzX3RpbWVfZm9ybWF0TXVsdGk7XG4gICAgdmFyIGQzX3RpbWVfcGVyaW9kTG9va3VwID0gZDMubWFwKCksIGQzX3RpbWVfZGF5UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9kYXlzKSwgZDNfdGltZV9kYXlMb29rdXAgPSBkM190aW1lX2Zvcm1hdExvb2t1cChsb2NhbGVfZGF5cyksIGQzX3RpbWVfZGF5QWJicmV2UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9zaG9ydERheXMpLCBkM190aW1lX2RheUFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydERheXMpLCBkM190aW1lX21vbnRoUmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9tb250aHMpLCBkM190aW1lX21vbnRoTG9va3VwID0gZDNfdGltZV9mb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksIGQzX3RpbWVfbW9udGhBYmJyZXZSZSA9IGQzX3RpbWVfZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSwgZDNfdGltZV9tb250aEFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG4gICAgbG9jYWxlX3BlcmlvZHMuZm9yRWFjaChmdW5jdGlvbihwLCBpKSB7XG4gICAgICBkM190aW1lX3BlcmlvZExvb2t1cC5zZXQocC50b0xvd2VyQ2FzZSgpLCBpKTtcbiAgICB9KTtcbiAgICB2YXIgZDNfdGltZV9mb3JtYXRzID0ge1xuICAgICAgYTogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX3Nob3J0RGF5c1tkLmdldERheSgpXTtcbiAgICAgIH0sXG4gICAgICBBOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfZGF5c1tkLmdldERheSgpXTtcbiAgICAgIH0sXG4gICAgICBiOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgICAgIH0sXG4gICAgICBCOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gICAgICB9LFxuICAgICAgYzogZDNfdGltZV9mb3JtYXQobG9jYWxlX2RhdGVUaW1lKSxcbiAgICAgIGQ6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBlOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldERhdGUoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgSDogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBJOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG4gICAgICB9LFxuICAgICAgajogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoMSArIGQzX3RpbWUuZGF5T2ZZZWFyKGQpLCBwLCAzKTtcbiAgICAgIH0sXG4gICAgICBMOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbiAgICAgIH0sXG4gICAgICBtOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBNOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgcDogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgICAgIH0sXG4gICAgICBTOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgVTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZDNfdGltZS5zdW5kYXlPZlllYXIoZCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIHc6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuZ2V0RGF5KCk7XG4gICAgICB9LFxuICAgICAgVzogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZDNfdGltZS5tb25kYXlPZlllYXIoZCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIHg6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV9kYXRlKSxcbiAgICAgIFg6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV90aW1lKSxcbiAgICAgIHk6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG4gICAgICB9LFxuICAgICAgWTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRGdWxsWWVhcigpICUgMWU0LCBwLCA0KTtcbiAgICAgIH0sXG4gICAgICBaOiBkM190aW1lX3pvbmUsXG4gICAgICBcIiVcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIiVcIjtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBkM190aW1lX3BhcnNlcnMgPSB7XG4gICAgICBhOiBkM190aW1lX3BhcnNlV2Vla2RheUFiYnJldixcbiAgICAgIEE6IGQzX3RpbWVfcGFyc2VXZWVrZGF5LFxuICAgICAgYjogZDNfdGltZV9wYXJzZU1vbnRoQWJicmV2LFxuICAgICAgQjogZDNfdGltZV9wYXJzZU1vbnRoLFxuICAgICAgYzogZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwsXG4gICAgICBkOiBkM190aW1lX3BhcnNlRGF5LFxuICAgICAgZTogZDNfdGltZV9wYXJzZURheSxcbiAgICAgIEg6IGQzX3RpbWVfcGFyc2VIb3VyMjQsXG4gICAgICBJOiBkM190aW1lX3BhcnNlSG91cjI0LFxuICAgICAgajogZDNfdGltZV9wYXJzZURheU9mWWVhcixcbiAgICAgIEw6IGQzX3RpbWVfcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgICBtOiBkM190aW1lX3BhcnNlTW9udGhOdW1iZXIsXG4gICAgICBNOiBkM190aW1lX3BhcnNlTWludXRlcyxcbiAgICAgIHA6IGQzX3RpbWVfcGFyc2VBbVBtLFxuICAgICAgUzogZDNfdGltZV9wYXJzZVNlY29uZHMsXG4gICAgICBVOiBkM190aW1lX3BhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICAgIHc6IGQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyLFxuICAgICAgVzogZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgICB4OiBkM190aW1lX3BhcnNlTG9jYWxlRGF0ZSxcbiAgICAgIFg6IGQzX3RpbWVfcGFyc2VMb2NhbGVUaW1lLFxuICAgICAgeTogZDNfdGltZV9wYXJzZVllYXIsXG4gICAgICBZOiBkM190aW1lX3BhcnNlRnVsbFllYXIsXG4gICAgICBaOiBkM190aW1lX3BhcnNlWm9uZSxcbiAgICAgIFwiJVwiOiBkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2KGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9kYXlBYmJyZXZSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX2RheUFiYnJldlJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUudyA9IGQzX3RpbWVfZGF5QWJicmV2TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9kYXlSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUudyA9IGQzX3RpbWVfZGF5TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aEFiYnJldihkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICAgIGQzX3RpbWVfbW9udGhBYmJyZXZSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX21vbnRoQWJicmV2UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gZDNfdGltZV9tb250aEFiYnJldkxvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTW9udGgoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICBkM190aW1lX21vbnRoUmUubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBuID0gZDNfdGltZV9tb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUubSA9IGQzX3RpbWVfbW9udGhMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICByZXR1cm4gZDNfdGltZV9wYXJzZShkYXRlLCBkM190aW1lX2Zvcm1hdHMuYy50b1N0cmluZygpLCBzdHJpbmcsIGkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTG9jYWxlRGF0ZShkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3BhcnNlKGRhdGUsIGQzX3RpbWVfZm9ybWF0cy54LnRvU3RyaW5nKCksIHN0cmluZywgaSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VMb2NhbGVUaW1lKGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgcmV0dXJuIGQzX3RpbWVfcGFyc2UoZGF0ZSwgZDNfdGltZV9mb3JtYXRzLlgudG9TdHJpbmcoKSwgc3RyaW5nLCBpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUFtUG0oZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IGQzX3RpbWVfcGVyaW9kTG9va3VwLmdldChzdHJpbmcuc2xpY2UoaSwgaSArPSAyKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIHJldHVybiBuID09IG51bGwgPyAtMSA6IChkYXRlLnAgPSBuLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0O1xuICB9XG4gIHZhciBkM190aW1lX2Zvcm1hdFBhZHMgPSB7XG4gICAgXCItXCI6IFwiXCIsXG4gICAgXzogXCIgXCIsXG4gICAgXCIwXCI6IFwiMFwiXG4gIH0sIGQzX3RpbWVfbnVtYmVyUmUgPSAvXlxccypcXGQrLywgZDNfdGltZV9wZXJjZW50UmUgPSAvXiUvO1xuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdFBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIiwgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRSZShuYW1lcykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKGQzLnJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdExvb2t1cChuYW1lcykge1xuICAgIHZhciBtYXAgPSBuZXcgZDNfTWFwKCksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgbWFwLnNldChuYW1lc1tpXS50b0xvd2VyQ2FzZSgpLCBpKTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGRhdGUuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXkoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRnVsbFllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICAgIHJldHVybiBuID8gKGRhdGUueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGRhdGUueSA9IGQzX3RpbWVfZXhwYW5kWWVhcigrblswXSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlWm9uZShkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gL15bKy1dXFxkezR9JC8udGVzdChzdHJpbmcgPSBzdHJpbmcuc2xpY2UoaSwgaSArIDUpKSA/IChkYXRlLlogPSAtc3RyaW5nLCBcbiAgICBpICsgNSkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2V4cGFuZFllYXIoZCkge1xuICAgIHJldHVybiBkICsgKGQgPiA2OCA/IDE5MDAgOiAyZTMpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aE51bWJlcihkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VEYXlPZlllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICAgIHJldHVybiBuID8gKGRhdGUuaiA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUhvdXIyNChkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTWludXRlcyhkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlU2Vjb25kcyhkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTWlsbGlzZWNvbmRzKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfem9uZShkKSB7XG4gICAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCksIHpzID0geiA+IDAgPyBcIi1cIiA6IFwiK1wiLCB6aCA9IGFicyh6KSAvIDYwIHwgMCwgem0gPSBhYnMoeikgJSA2MDtcbiAgICByZXR1cm4genMgKyBkM190aW1lX2Zvcm1hdFBhZCh6aCwgXCIwXCIsIDIpICsgZDNfdGltZV9mb3JtYXRQYWQoem0sIFwiMFwiLCAyKTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnQoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9wZXJjZW50UmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gICAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdE11bHRpKGZvcm1hdHMpIHtcbiAgICB2YXIgbiA9IGZvcm1hdHMubGVuZ3RoLCBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8IG4pIGZvcm1hdHNbaV1bMF0gPSB0aGlzKGZvcm1hdHNbaV1bMF0pO1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgaSA9IDAsIGYgPSBmb3JtYXRzW2ldO1xuICAgICAgd2hpbGUgKCFmWzFdKGRhdGUpKSBmID0gZm9ybWF0c1srK2ldO1xuICAgICAgcmV0dXJuIGZbMF0oZGF0ZSk7XG4gICAgfTtcbiAgfVxuICBkMy5sb2NhbGUgPSBmdW5jdGlvbihsb2NhbGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbnVtYmVyRm9ybWF0OiBkM19sb2NhbGVfbnVtYmVyRm9ybWF0KGxvY2FsZSksXG4gICAgICB0aW1lRm9ybWF0OiBkM19sb2NhbGVfdGltZUZvcm1hdChsb2NhbGUpXG4gICAgfTtcbiAgfTtcbiAgdmFyIGQzX2xvY2FsZV9lblVTID0gZDMubG9jYWxlKHtcbiAgICBkZWNpbWFsOiBcIi5cIixcbiAgICB0aG91c2FuZHM6IFwiLFwiLFxuICAgIGdyb3VwaW5nOiBbIDMgXSxcbiAgICBjdXJyZW5jeTogWyBcIiRcIiwgXCJcIiBdLFxuICAgIGRhdGVUaW1lOiBcIiVhICViICVlICVYICVZXCIsXG4gICAgZGF0ZTogXCIlbS8lZC8lWVwiLFxuICAgIHRpbWU6IFwiJUg6JU06JVNcIixcbiAgICBwZXJpb2RzOiBbIFwiQU1cIiwgXCJQTVwiIF0sXG4gICAgZGF5czogWyBcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCIgXSxcbiAgICBzaG9ydERheXM6IFsgXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiBdLFxuICAgIG1vbnRoczogWyBcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCIgXSxcbiAgICBzaG9ydE1vbnRoczogWyBcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiIF1cbiAgfSk7XG4gIGQzLmZvcm1hdCA9IGQzX2xvY2FsZV9lblVTLm51bWJlckZvcm1hdDtcbiAgZDMuZ2VvID0ge307XG4gIGZ1bmN0aW9uIGQzX2FkZGVyKCkge31cbiAgZDNfYWRkZXIucHJvdG90eXBlID0ge1xuICAgIHM6IDAsXG4gICAgdDogMCxcbiAgICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICAgIGQzX2FkZGVyU3VtKHksIHRoaXMudCwgZDNfYWRkZXJUZW1wKTtcbiAgICAgIGQzX2FkZGVyU3VtKGQzX2FkZGVyVGVtcC5zLCB0aGlzLnMsIHRoaXMpO1xuICAgICAgaWYgKHRoaXMucykgdGhpcy50ICs9IGQzX2FkZGVyVGVtcC50OyBlbHNlIHRoaXMucyA9IGQzX2FkZGVyVGVtcC50O1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zID0gdGhpcy50ID0gMDtcbiAgICB9LFxuICAgIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucztcbiAgICB9XG4gIH07XG4gIHZhciBkM19hZGRlclRlbXAgPSBuZXcgZDNfYWRkZXIoKTtcbiAgZnVuY3Rpb24gZDNfYWRkZXJTdW0oYSwgYiwgbykge1xuICAgIHZhciB4ID0gby5zID0gYSArIGIsIGJ2ID0geCAtIGEsIGF2ID0geCAtIGJ2O1xuICAgIG8udCA9IGEgLSBhdiArIChiIC0gYnYpO1xuICB9XG4gIGQzLmdlby5zdHJlYW0gPSBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgaWYgKG9iamVjdCAmJiBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcbiAgICAgIGQzX2dlb19zdHJlYW1PYmplY3RUeXBlW29iamVjdC50eXBlXShvYmplY3QsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KG9iamVjdCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBsaXN0ZW5lcikge1xuICAgIGlmIChnZW9tZXRyeSAmJiBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpKSB7XG4gICAgICBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBsaXN0ZW5lcik7XG4gICAgfVxuICB9XG4gIHZhciBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZSA9IHtcbiAgICBGZWF0dXJlOiBmdW5jdGlvbihmZWF0dXJlLCBsaXN0ZW5lcikge1xuICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGZlYXR1cmUuZ2VvbWV0cnksIGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIGxpc3RlbmVyKTtcbiAgICB9XG4gIH07XG4gIHZhciBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlID0ge1xuICAgIFNwaGVyZTogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIuc3BoZXJlKCk7XG4gICAgfSxcbiAgICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgb2JqZWN0ID0gb2JqZWN0LmNvb3JkaW5hdGVzO1xuICAgICAgbGlzdGVuZXIucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gICAgfSxcbiAgICBNdWx0aVBvaW50OiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gICAgfSxcbiAgICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICBkM19nZW9fc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCAwKTtcbiAgICB9LFxuICAgIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLCAwKTtcbiAgICB9LFxuICAgIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcbiAgICAgIGQzX2dlb19zdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgbGlzdGVuZXIpO1xuICAgIH0sXG4gICAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIpO1xuICAgIH0sXG4gICAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCBjbG9zZWQpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoIC0gY2xvc2VkLCBjb29yZGluYXRlO1xuICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLnBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGNvb3JkaW5hdGVbMl0pO1xuICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgbGlzdGVuZXIpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIsIDEpO1xuICAgIGxpc3RlbmVyLnBvbHlnb25FbmQoKTtcbiAgfVxuICBkMy5nZW8uYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGQzX2dlb19hcmVhU3VtID0gMDtcbiAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgZDNfZ2VvX2FyZWEpO1xuICAgIHJldHVybiBkM19nZW9fYXJlYVN1bTtcbiAgfTtcbiAgdmFyIGQzX2dlb19hcmVhU3VtLCBkM19nZW9fYXJlYVJpbmdTdW0gPSBuZXcgZDNfYWRkZXIoKTtcbiAgdmFyIGQzX2dlb19hcmVhID0ge1xuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fYXJlYVN1bSArPSA0ICogz4A7XG4gICAgfSxcbiAgICBwb2ludDogZDNfbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG4gICAgbGluZUVuZDogZDNfbm9vcCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgICBkM19nZW9fYXJlYS5saW5lU3RhcnQgPSBkM19nZW9fYXJlYVJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZWEgPSAyICogZDNfZ2VvX2FyZWFSaW5nU3VtO1xuICAgICAgZDNfZ2VvX2FyZWFTdW0gKz0gYXJlYSA8IDAgPyA0ICogz4AgKyBhcmVhIDogYXJlYTtcbiAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCA9IGQzX2dlb19hcmVhLmxpbmVFbmQgPSBkM19nZW9fYXJlYS5wb2ludCA9IGQzX25vb3A7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fYXJlYVJpbmdTdGFydCgpIHtcbiAgICB2YXIgzrswMCwgz4YwMCwgzrswLCBjb3PPhjAsIHNpbs+GMDtcbiAgICBkM19nZW9fYXJlYS5wb2ludCA9IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgZDNfZ2VvX2FyZWEucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICDOuzAgPSAozrswMCA9IM67KSAqIGQzX3JhZGlhbnMsIGNvc8+GMCA9IE1hdGguY29zKM+GID0gKM+GMDAgPSDPhikgKiBkM19yYWRpYW5zIC8gMiArIM+AIC8gNCksIFxuICAgICAgc2luz4YwID0gTWF0aC5zaW4oz4YpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIM+GID0gz4YgKiBkM19yYWRpYW5zIC8gMiArIM+AIC8gNDtcbiAgICAgIHZhciBkzrsgPSDOuyAtIM67MCwgc2TOuyA9IGTOuyA+PSAwID8gMSA6IC0xLCBhZM67ID0gc2TOuyAqIGTOuywgY29zz4YgPSBNYXRoLmNvcyjPhiksIHNpbs+GID0gTWF0aC5zaW4oz4YpLCBrID0gc2luz4YwICogc2luz4YsIHUgPSBjb3PPhjAgKiBjb3PPhiArIGsgKiBNYXRoLmNvcyhhZM67KSwgdiA9IGsgKiBzZM67ICogTWF0aC5zaW4oYWTOuyk7XG4gICAgICBkM19nZW9fYXJlYVJpbmdTdW0uYWRkKE1hdGguYXRhbjIodiwgdSkpO1xuICAgICAgzrswID0gzrssIGNvc8+GMCA9IGNvc8+GLCBzaW7PhjAgPSBzaW7PhjtcbiAgICB9XG4gICAgZDNfZ2VvX2FyZWEubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgbmV4dFBvaW50KM67MDAsIM+GMDApO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgICB2YXIgzrsgPSBzcGhlcmljYWxbMF0sIM+GID0gc3BoZXJpY2FsWzFdLCBjb3PPhiA9IE1hdGguY29zKM+GKTtcbiAgICByZXR1cm4gWyBjb3PPhiAqIE1hdGguY29zKM67KSwgY29zz4YgKiBNYXRoLnNpbijOuyksIE1hdGguc2luKM+GKSBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGEsIGIpIHtcbiAgICByZXR1cm4gWyBhWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdIF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkFkZChhLCBiKSB7XG4gICAgYVswXSArPSBiWzBdO1xuICAgIGFbMV0gKz0gYlsxXTtcbiAgICBhWzJdICs9IGJbMl07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICAgIHJldHVybiBbIHZlY3RvclswXSAqIGssIHZlY3RvclsxXSAqIGssIHZlY3RvclsyXSAqIGsgXTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2FydGVzaWFuTm9ybWFsaXplKGQpIHtcbiAgICB2YXIgbCA9IE1hdGguc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICAgIGRbMF0gLz0gbDtcbiAgICBkWzFdIC89IGw7XG4gICAgZFsyXSAvPSBsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19zcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gICAgcmV0dXJuIFsgTWF0aC5hdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGQzX2FzaW4oY2FydGVzaWFuWzJdKSBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19zcGhlcmljYWxFcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGFicyhhWzBdIC0gYlswXSkgPCDOtSAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgzrU7XG4gIH1cbiAgZDMuZ2VvLmJvdW5kcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciDOuzAsIM+GMCwgzrsxLCDPhjEsIM67XywgzrtfXywgz4ZfXywgcDAsIGTOu1N1bSwgcmFuZ2VzLCByYW5nZTtcbiAgICB2YXIgYm91bmQgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBib3VuZC5wb2ludCA9IHJpbmdQb2ludDtcbiAgICAgICAgYm91bmQubGluZVN0YXJ0ID0gcmluZ1N0YXJ0O1xuICAgICAgICBib3VuZC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgZM67U3VtID0gMDtcbiAgICAgICAgZDNfZ2VvX2FyZWEucG9seWdvblN0YXJ0KCk7XG4gICAgICB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGQzX2dlb19hcmVhLnBvbHlnb25FbmQoKTtcbiAgICAgICAgYm91bmQucG9pbnQgPSBwb2ludDtcbiAgICAgICAgYm91bmQubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBib3VuZC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgaWYgKGQzX2dlb19hcmVhUmluZ1N1bSA8IDApIM67MCA9IC0ozrsxID0gMTgwKSwgz4YwID0gLSjPhjEgPSA5MCk7IGVsc2UgaWYgKGTOu1N1bSA+IM61KSDPhjEgPSA5MDsgZWxzZSBpZiAoZM67U3VtIDwgLc61KSDPhjAgPSAtOTA7XG4gICAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIHBvaW50KM67LCDPhikge1xuICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbIM67MCA9IM67LCDOuzEgPSDOuyBdKTtcbiAgICAgIGlmICjPhiA8IM+GMCkgz4YwID0gz4Y7XG4gICAgICBpZiAoz4YgPiDPhjEpIM+GMSA9IM+GO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQozrssIM+GKSB7XG4gICAgICB2YXIgcCA9IGQzX2dlb19jYXJ0ZXNpYW4oWyDOuyAqIGQzX3JhZGlhbnMsIM+GICogZDNfcmFkaWFucyBdKTtcbiAgICAgIGlmIChwMCkge1xuICAgICAgICB2YXIgbm9ybWFsID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKHAwLCBwKSwgZXF1YXRvcmlhbCA9IFsgbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwIF0sIGluZmxlY3Rpb24gPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MoZXF1YXRvcmlhbCwgbm9ybWFsKTtcbiAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZShpbmZsZWN0aW9uKTtcbiAgICAgICAgaW5mbGVjdGlvbiA9IGQzX2dlb19zcGhlcmljYWwoaW5mbGVjdGlvbik7XG4gICAgICAgIHZhciBkzrsgPSDOuyAtIM67XywgcyA9IGTOuyA+IDAgPyAxIDogLTEsIM67aSA9IGluZmxlY3Rpb25bMF0gKiBkM19kZWdyZWVzICogcywgYW50aW1lcmlkaWFuID0gYWJzKGTOuykgPiAxODA7XG4gICAgICAgIGlmIChhbnRpbWVyaWRpYW4gXiAocyAqIM67XyA8IM67aSAmJiDOu2kgPCBzICogzrspKSB7XG4gICAgICAgICAgdmFyIM+GaSA9IGluZmxlY3Rpb25bMV0gKiBkM19kZWdyZWVzO1xuICAgICAgICAgIGlmICjPhmkgPiDPhjEpIM+GMSA9IM+GaTtcbiAgICAgICAgfSBlbHNlIGlmICjOu2kgPSAozrtpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHMgKiDOu18gPCDOu2kgJiYgzrtpIDwgcyAqIM67KSkge1xuICAgICAgICAgIHZhciDPhmkgPSAtaW5mbGVjdGlvblsxXSAqIGQzX2RlZ3JlZXM7XG4gICAgICAgICAgaWYgKM+GaSA8IM+GMCkgz4YwID0gz4ZpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICjPhiA8IM+GMCkgz4YwID0gz4Y7XG4gICAgICAgICAgaWYgKM+GID4gz4YxKSDPhjEgPSDPhjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICAgICAgaWYgKM67IDwgzrtfKSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUozrswLCDOuykgPiBhbmdsZSjOuzAsIM67MSkpIM67MSA9IM67O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUozrssIM67MSkgPiBhbmdsZSjOuzAsIM67MSkpIM67MCA9IM67O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAozrsxID49IM67MCkge1xuICAgICAgICAgICAgaWYgKM67IDwgzrswKSDOuzAgPSDOuztcbiAgICAgICAgICAgIGlmICjOuyA+IM67MSkgzrsxID0gzrs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICjOuyA+IM67Xykge1xuICAgICAgICAgICAgICBpZiAoYW5nbGUozrswLCDOuykgPiBhbmdsZSjOuzAsIM67MSkpIM67MSA9IM67O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGFuZ2xlKM67LCDOuzEpID4gYW5nbGUozrswLCDOuzEpKSDOuzAgPSDOuztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvaW50KM67LCDPhik7XG4gICAgICB9XG4gICAgICBwMCA9IHAsIM67XyA9IM67O1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBib3VuZC5wb2ludCA9IGxpbmVQb2ludDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIGJvdW5kLnBvaW50ID0gcG9pbnQ7XG4gICAgICBwMCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJpbmdQb2ludCjOuywgz4YpIHtcbiAgICAgIGlmIChwMCkge1xuICAgICAgICB2YXIgZM67ID0gzrsgLSDOu187XG4gICAgICAgIGTOu1N1bSArPSBhYnMoZM67KSA+IDE4MCA/IGTOuyArIChkzrsgPiAwID8gMzYwIDogLTM2MCkgOiBkzrs7XG4gICAgICB9IGVsc2UgzrtfXyA9IM67LCDPhl9fID0gz4Y7XG4gICAgICBkM19nZW9fYXJlYS5wb2ludCjOuywgz4YpO1xuICAgICAgbGluZVBvaW50KM67LCDPhik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcmluZ1BvaW50KM67X18sIM+GX18pO1xuICAgICAgZDNfZ2VvX2FyZWEubGluZUVuZCgpO1xuICAgICAgaWYgKGFicyhkzrtTdW0pID4gzrUpIM67MCA9IC0ozrsxID0gMTgwKTtcbiAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIHAwID0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYW5nbGUozrswLCDOuzEpIHtcbiAgICAgIHJldHVybiAozrsxIC09IM67MCkgPCAwID8gzrsxICsgMzYwIDogzrsxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlUmFuZ2VzKGEsIGIpIHtcbiAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd2l0aGluUmFuZ2UoeCwgcmFuZ2UpIHtcbiAgICAgIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihmZWF0dXJlKSB7XG4gICAgICDPhjEgPSDOuzEgPSAtKM67MCA9IM+GMCA9IEluZmluaXR5KTtcbiAgICAgIHJhbmdlcyA9IFtdO1xuICAgICAgZDMuZ2VvLnN0cmVhbShmZWF0dXJlLCBib3VuZCk7XG4gICAgICB2YXIgbiA9IHJhbmdlcy5sZW5ndGg7XG4gICAgICBpZiAobikge1xuICAgICAgICByYW5nZXMuc29ydChjb21wYXJlUmFuZ2VzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGEgPSByYW5nZXNbMF0sIGIsIG1lcmdlZCA9IFsgYSBdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgYiA9IHJhbmdlc1tpXTtcbiAgICAgICAgICBpZiAod2l0aGluUmFuZ2UoYlswXSwgYSkgfHwgd2l0aGluUmFuZ2UoYlsxXSwgYSkpIHtcbiAgICAgICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgICAgIGlmIChhbmdsZShiWzBdLCBhWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzBdID0gYlswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgYmVzdCA9IC1JbmZpbml0eSwgZM67O1xuICAgICAgICBmb3IgKHZhciBuID0gbWVyZ2VkLmxlbmd0aCAtIDEsIGkgPSAwLCBhID0gbWVyZ2VkW25dLCBiOyBpIDw9IG47IGEgPSBiLCArK2kpIHtcbiAgICAgICAgICBiID0gbWVyZ2VkW2ldO1xuICAgICAgICAgIGlmICgoZM67ID0gYW5nbGUoYVsxXSwgYlswXSkpID4gYmVzdCkgYmVzdCA9IGTOuywgzrswID0gYlswXSwgzrsxID0gYVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmFuZ2VzID0gcmFuZ2UgPSBudWxsO1xuICAgICAgcmV0dXJuIM67MCA9PT0gSW5maW5pdHkgfHwgz4YwID09PSBJbmZpbml0eSA/IFsgWyBOYU4sIE5hTiBdLCBbIE5hTiwgTmFOIF0gXSA6IFsgWyDOuzAsIM+GMCBdLCBbIM67MSwgz4YxIF0gXTtcbiAgICB9O1xuICB9KCk7XG4gIGQzLmdlby5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGQzX2dlb19jZW50cm9pZFcwID0gZDNfZ2VvX2NlbnRyb2lkVzEgPSBkM19nZW9fY2VudHJvaWRYMCA9IGQzX2dlb19jZW50cm9pZFkwID0gZDNfZ2VvX2NlbnRyb2lkWjAgPSBkM19nZW9fY2VudHJvaWRYMSA9IGQzX2dlb19jZW50cm9pZFkxID0gZDNfZ2VvX2NlbnRyb2lkWjEgPSBkM19nZW9fY2VudHJvaWRYMiA9IGQzX2dlb19jZW50cm9pZFkyID0gZDNfZ2VvX2NlbnRyb2lkWjIgPSAwO1xuICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBkM19nZW9fY2VudHJvaWQpO1xuICAgIHZhciB4ID0gZDNfZ2VvX2NlbnRyb2lkWDIsIHkgPSBkM19nZW9fY2VudHJvaWRZMiwgeiA9IGQzX2dlb19jZW50cm9pZFoyLCBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgIGlmIChtIDwgzrUyKSB7XG4gICAgICB4ID0gZDNfZ2VvX2NlbnRyb2lkWDEsIHkgPSBkM19nZW9fY2VudHJvaWRZMSwgeiA9IGQzX2dlb19jZW50cm9pZFoxO1xuICAgICAgaWYgKGQzX2dlb19jZW50cm9pZFcxIDwgzrUpIHggPSBkM19nZW9fY2VudHJvaWRYMCwgeSA9IGQzX2dlb19jZW50cm9pZFkwLCB6ID0gZDNfZ2VvX2NlbnRyb2lkWjA7XG4gICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgICAgaWYgKG0gPCDOtTIpIHJldHVybiBbIE5hTiwgTmFOIF07XG4gICAgfVxuICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSwgeCkgKiBkM19kZWdyZWVzLCBkM19hc2luKHogLyBNYXRoLnNxcnQobSkpICogZDNfZGVncmVlcyBdO1xuICB9O1xuICB2YXIgZDNfZ2VvX2NlbnRyb2lkVzAsIGQzX2dlb19jZW50cm9pZFcxLCBkM19nZW9fY2VudHJvaWRYMCwgZDNfZ2VvX2NlbnRyb2lkWTAsIGQzX2dlb19jZW50cm9pZFowLCBkM19nZW9fY2VudHJvaWRYMSwgZDNfZ2VvX2NlbnRyb2lkWTEsIGQzX2dlb19jZW50cm9pZFoxLCBkM19nZW9fY2VudHJvaWRYMiwgZDNfZ2VvX2NlbnRyb2lkWTIsIGQzX2dlb19jZW50cm9pZFoyO1xuICB2YXIgZDNfZ2VvX2NlbnRyb2lkID0ge1xuICAgIHNwaGVyZTogZDNfbm9vcCxcbiAgICBwb2ludDogZDNfZ2VvX2NlbnRyb2lkUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fY2VudHJvaWRMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogZDNfZ2VvX2NlbnRyb2lkTGluZUVuZCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZFJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZExpbmVTdGFydDtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFBvaW50KM67LCDPhikge1xuICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YgKj0gZDNfcmFkaWFucyk7XG4gICAgZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVooY29zz4YgKiBNYXRoLmNvcyjOuyksIGNvc8+GICogTWF0aC5zaW4ozrspLCBNYXRoLnNpbijPhikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgsIHksIHopIHtcbiAgICArK2QzX2dlb19jZW50cm9pZFcwO1xuICAgIGQzX2dlb19jZW50cm9pZFgwICs9ICh4IC0gZDNfZ2VvX2NlbnRyb2lkWDApIC8gZDNfZ2VvX2NlbnRyb2lkVzA7XG4gICAgZDNfZ2VvX2NlbnRyb2lkWTAgKz0gKHkgLSBkM19nZW9fY2VudHJvaWRZMCkgLyBkM19nZW9fY2VudHJvaWRXMDtcbiAgICBkM19nZW9fY2VudHJvaWRaMCArPSAoeiAtIGQzX2dlb19jZW50cm9pZFowKSAvIGQzX2dlb19jZW50cm9pZFcwO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZExpbmVTdGFydCgpIHtcbiAgICB2YXIgeDAsIHkwLCB6MDtcbiAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKTtcbiAgICAgIHgwID0gY29zz4YgKiBNYXRoLmNvcyjOuyk7XG4gICAgICB5MCA9IGNvc8+GICogTWF0aC5zaW4ozrspO1xuICAgICAgejAgPSBNYXRoLnNpbijPhik7XG4gICAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICBkM19nZW9fY2VudHJvaWRQb2ludFhZWih4MCwgeTAsIHowKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG5leHRQb2ludCjOuywgz4YpIHtcbiAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKSwgeCA9IGNvc8+GICogTWF0aC5jb3MozrspLCB5ID0gY29zz4YgKiBNYXRoLnNpbijOuyksIHogPSBNYXRoLnNpbijPhiksIHcgPSBNYXRoLmF0YW4yKE1hdGguc3FydCgodyA9IHkwICogeiAtIHowICogeSkgKiB3ICsgKHcgPSB6MCAqIHggLSB4MCAqIHopICogdyArICh3ID0geDAgKiB5IC0geTAgKiB4KSAqIHcpLCB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHopO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkVzEgKz0gdztcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2VudHJvaWRMaW5lRW5kKCkge1xuICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGQzX2dlb19jZW50cm9pZFBvaW50O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgICB2YXIgzrswMCwgz4YwMCwgeDAsIHkwLCB6MDtcbiAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIM67MDAgPSDOuywgz4YwMCA9IM+GO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpO1xuICAgICAgeDAgPSBjb3PPhiAqIE1hdGguY29zKM67KTtcbiAgICAgIHkwID0gY29zz4YgKiBNYXRoLnNpbijOuyk7XG4gICAgICB6MCA9IE1hdGguc2luKM+GKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH07XG4gICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCjOuzAwLCDPhjAwKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZC5saW5lRW5kID0gZDNfZ2VvX2NlbnRyb2lkTGluZUVuZDtcbiAgICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGQzX2dlb19jZW50cm9pZFBvaW50O1xuICAgIH07XG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpLCB4ID0gY29zz4YgKiBNYXRoLmNvcyjOuyksIHkgPSBjb3PPhiAqIE1hdGguc2luKM67KSwgeiA9IE1hdGguc2luKM+GKSwgY3ggPSB5MCAqIHogLSB6MCAqIHksIGN5ID0gejAgKiB4IC0geDAgKiB6LCBjeiA9IHgwICogeSAtIHkwICogeCwgbSA9IE1hdGguc3FydChjeCAqIGN4ICsgY3kgKiBjeSArIGN6ICogY3opLCB1ID0geDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6LCB2ID0gbSAmJiAtZDNfYWNvcyh1KSAvIG0sIHcgPSBNYXRoLmF0YW4yKG0sIHUpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWDIgKz0gdiAqIGN4O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTIgKz0gdiAqIGN5O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjIgKz0gdiAqIGN6O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkVzEgKz0gdztcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY29tcG9zZShhLCBiKSB7XG4gICAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XG4gICAgfVxuICAgIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2U7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdHJ1ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmUsIGNsaXBTdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIHN1YmplY3QgPSBbXSwgY2xpcCA9IFtdO1xuICAgIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuICAgICAgaWYgKChuID0gc2VnbWVudC5sZW5ndGggLSAxKSA8PSAwKSByZXR1cm47XG4gICAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl07XG4gICAgICBpZiAoZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhID0gbmV3IGQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbihwMCwgc2VnbWVudCwgbnVsbCwgdHJ1ZSksIGIgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAwLCBudWxsLCBhLCBmYWxzZSk7XG4gICAgICBhLm8gPSBiO1xuICAgICAgc3ViamVjdC5wdXNoKGEpO1xuICAgICAgY2xpcC5wdXNoKGIpO1xuICAgICAgYSA9IG5ldyBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKTtcbiAgICAgIGIgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAxLCBudWxsLCBhLCB0cnVlKTtcbiAgICAgIGEubyA9IGI7XG4gICAgICBzdWJqZWN0LnB1c2goYSk7XG4gICAgICBjbGlwLnB1c2goYik7XG4gICAgfSk7XG4gICAgY2xpcC5zb3J0KGNvbXBhcmUpO1xuICAgIGQzX2dlb19jbGlwUG9seWdvbkxpbmtDaXJjdWxhcihzdWJqZWN0KTtcbiAgICBkM19nZW9fY2xpcFBvbHlnb25MaW5rQ2lyY3VsYXIoY2xpcCk7XG4gICAgaWYgKCFzdWJqZWN0Lmxlbmd0aCkgcmV0dXJuO1xuICAgIGZvciAodmFyIGkgPSAwLCBlbnRyeSA9IGNsaXBTdGFydEluc2lkZSwgbiA9IGNsaXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBjbGlwW2ldLmUgPSBlbnRyeSA9ICFlbnRyeTtcbiAgICB9XG4gICAgdmFyIHN0YXJ0ID0gc3ViamVjdFswXSwgcG9pbnRzLCBwb2ludDtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBzdGFydCwgaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICAgIHdoaWxlIChjdXJyZW50LnYpIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgICBwb2ludHMgPSBjdXJyZW50LnAuejtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50LnAueCwgLTEsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5vO1xuICAgICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICAgIGlzU3ViamVjdCA9ICFpc1N1YmplY3Q7XG4gICAgICB9IHdoaWxlICghY3VycmVudC52KTtcbiAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBQb2x5Z29uTGlua0NpcmN1bGFyKGFycmF5KSB7XG4gICAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgICB2YXIgbiwgaSA9IDAsIGEgPSBhcnJheVswXSwgYjtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgICAgYi5wID0gYTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICBhLm4gPSBiID0gYXJyYXlbMF07XG4gICAgYi5wID0gYTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG4gICAgdGhpcy54ID0gcG9pbnQ7XG4gICAgdGhpcy56ID0gcG9pbnRzO1xuICAgIHRoaXMubyA9IG90aGVyO1xuICAgIHRoaXMuZSA9IGVudHJ5O1xuICAgIHRoaXMudiA9IGZhbHNlO1xuICAgIHRoaXMubiA9IHRoaXMucCA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXAocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIGNsaXBTdGFydCkge1xuICAgIHJldHVybiBmdW5jdGlvbihyb3RhdGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGluZSA9IGNsaXBMaW5lKGxpc3RlbmVyKSwgcm90YXRlZENsaXBTdGFydCA9IHJvdGF0ZS5pbnZlcnQoY2xpcFN0YXJ0WzBdLCBjbGlwU3RhcnRbMV0pO1xuICAgICAgdmFyIGNsaXAgPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50UmluZztcbiAgICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgICBjbGlwLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgICAgIHNlZ21lbnRzID0gW107XG4gICAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgICB9LFxuICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG4gICAgICAgICAgY2xpcC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgICBzZWdtZW50cyA9IGQzLm1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgICB2YXIgY2xpcFN0YXJ0SW5zaWRlID0gZDNfZ2VvX3BvaW50SW5Qb2x5Z29uKHJvdGF0ZWRDbGlwU3RhcnQsIHBvbHlnb24pO1xuICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGQzX2dlb19jbGlwU29ydCwgY2xpcFN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgbGlzdGVuZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xpcFN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGlzdGVuZXIucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgbGlzdGVuZXIpO1xuICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmdW5jdGlvbiBwb2ludCjOuywgz4YpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKM67LCDPhik7XG4gICAgICAgIGlmIChwb2ludFZpc2libGUozrsgPSBwb2ludFswXSwgz4YgPSBwb2ludFsxXSkpIGxpc3RlbmVyLnBvaW50KM67LCDPhik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwb2ludExpbmUozrssIM+GKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHJvdGF0ZSjOuywgz4YpO1xuICAgICAgICBsaW5lLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludExpbmU7XG4gICAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgdmFyIHNlZ21lbnRzO1xuICAgICAgdmFyIGJ1ZmZlciA9IGQzX2dlb19jbGlwQnVmZmVyTGlzdGVuZXIoKSwgcmluZ0xpc3RlbmVyID0gY2xpcExpbmUoYnVmZmVyKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZSwgcG9seWdvbiwgcmluZztcbiAgICAgIGZ1bmN0aW9uIHBvaW50UmluZyjOuywgz4YpIHtcbiAgICAgICAgcmluZy5wdXNoKFsgzrssIM+GIF0pO1xuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUozrssIM+GKTtcbiAgICAgICAgcmluZ0xpc3RlbmVyLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICAgIHJpbmdMaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgcmluZyA9IFtdO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgICAgcG9pbnRSaW5nKHJpbmdbMF1bMF0sIHJpbmdbMF1bMV0pO1xuICAgICAgICByaW5nTGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICB2YXIgY2xlYW4gPSByaW5nTGlzdGVuZXIuY2xlYW4oKSwgcmluZ1NlZ21lbnRzID0gYnVmZmVyLmJ1ZmZlcigpLCBzZWdtZW50LCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgcmluZy5wb3AoKTtcbiAgICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgICByaW5nID0gbnVsbDtcbiAgICAgICAgaWYgKCFuKSByZXR1cm47XG4gICAgICAgIGlmIChjbGVhbiAmIDEpIHtcbiAgICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICAgIHZhciBuID0gc2VnbWVudC5sZW5ndGggLSAxLCBpID0gLTEsIHBvaW50O1xuICAgICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IHNlZ21lbnRbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcihkM19nZW9fY2xpcFNlZ21lbnRMZW5ndGgxKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xpcDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwU2VnbWVudExlbmd0aDEoc2VnbWVudCkge1xuICAgIHJldHVybiBzZWdtZW50Lmxlbmd0aCA+IDE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lcigpIHtcbiAgICB2YXIgbGluZXMgPSBbXSwgbGluZTtcbiAgICByZXR1cm4ge1xuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGluZXMucHVzaChsaW5lID0gW10pO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgICAgbGluZS5wdXNoKFsgzrssIM+GIF0pO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgICBidWZmZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gbGluZXM7XG4gICAgICAgIGxpbmVzID0gW107XG4gICAgICAgIGxpbmUgPSBudWxsO1xuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgfSxcbiAgICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSBsaW5lcy5wdXNoKGxpbmVzLnBvcCgpLmNvbmNhdChsaW5lcy5zaGlmdCgpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFNvcnQoYSwgYikge1xuICAgIHJldHVybiAoKGEgPSBhLngpWzBdIDwgMCA/IGFbMV0gLSBoYWxmz4AgLSDOtSA6IGhhbGbPgCAtIGFbMV0pIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZs+AIC0gzrUgOiBoYWxmz4AgLSBiWzFdKTtcbiAgfVxuICB2YXIgZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW4gPSBkM19nZW9fY2xpcChkM190cnVlLCBkM19nZW9fY2xpcEFudGltZXJpZGlhbkxpbmUsIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUsIFsgLc+ALCAtz4AgLyAyIF0pO1xuICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkxpbmUobGlzdGVuZXIpIHtcbiAgICB2YXIgzrswID0gTmFOLCDPhjAgPSBOYU4sIHPOuzAgPSBOYU4sIGNsZWFuO1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbijOuzEsIM+GMSkge1xuICAgICAgICB2YXIgc867MSA9IM67MSA+IDAgPyDPgCA6IC3PgCwgZM67ID0gYWJzKM67MSAtIM67MCk7XG4gICAgICAgIGlmIChhYnMoZM67IC0gz4ApIDwgzrUpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludCjOuzAsIM+GMCA9ICjPhjAgKyDPhjEpIC8gMiA+IDAgPyBoYWxmz4AgOiAtaGFsZs+AKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrswLCDPhjApO1xuICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrsxLCDPhjApO1xuICAgICAgICAgIGxpc3RlbmVyLnBvaW50KM67MSwgz4YwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoc867MCAhPT0gc867MSAmJiBkzrsgPj0gz4ApIHtcbiAgICAgICAgICBpZiAoYWJzKM67MCAtIHPOuzApIDwgzrUpIM67MCAtPSBzzrswICogzrU7XG4gICAgICAgICAgaWYgKGFicyjOuzEgLSBzzrsxKSA8IM61KSDOuzEgLT0gc867MSAqIM61O1xuICAgICAgICAgIM+GMCA9IGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KM67MCwgz4YwLCDOuzEsIM+GMSk7XG4gICAgICAgICAgbGlzdGVuZXIucG9pbnQoc867MCwgz4YwKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgbGlzdGVuZXIucG9pbnQoc867MSwgz4YwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdGVuZXIucG9pbnQozrswID0gzrsxLCDPhjAgPSDPhjEpO1xuICAgICAgICBzzrswID0gc867MTtcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICDOuzAgPSDPhjAgPSBOYU47XG4gICAgICB9LFxuICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMiAtIGNsZWFuO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QozrswLCDPhjAsIM67MSwgz4YxKSB7XG4gICAgdmFyIGNvc8+GMCwgY29zz4YxLCBzaW7OuzBfzrsxID0gTWF0aC5zaW4ozrswIC0gzrsxKTtcbiAgICByZXR1cm4gYWJzKHNpbs67MF/OuzEpID4gzrUgPyBNYXRoLmF0YW4oKE1hdGguc2luKM+GMCkgKiAoY29zz4YxID0gTWF0aC5jb3Moz4YxKSkgKiBNYXRoLnNpbijOuzEpIC0gTWF0aC5zaW4oz4YxKSAqIChjb3PPhjAgPSBNYXRoLmNvcyjPhjApKSAqIE1hdGguc2luKM67MCkpIC8gKGNvc8+GMCAqIGNvc8+GMSAqIHNpbs67MF/OuzEpKSA6ICjPhjAgKyDPhjEpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIGxpc3RlbmVyKSB7XG4gICAgdmFyIM+GO1xuICAgIGlmIChmcm9tID09IG51bGwpIHtcbiAgICAgIM+GID0gZGlyZWN0aW9uICogaGFsZs+AO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCDPhik7XG4gICAgICBsaXN0ZW5lci5wb2ludCgwLCDPhik7XG4gICAgICBsaXN0ZW5lci5wb2ludCjPgCwgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIDApO1xuICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIC3Phik7XG4gICAgICBsaXN0ZW5lci5wb2ludCgwLCAtz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAtz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAwKTtcbiAgICAgIGxpc3RlbmVyLnBvaW50KC3PgCwgz4YpO1xuICAgIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiDOtSkge1xuICAgICAgdmFyIHMgPSBmcm9tWzBdIDwgdG9bMF0gPyDPgCA6IC3PgDtcbiAgICAgIM+GID0gZGlyZWN0aW9uICogcyAvIDI7XG4gICAgICBsaXN0ZW5lci5wb2ludCgtcywgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoMCwgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQocywgz4YpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0ZW5lci5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcG9pbnRJblBvbHlnb24ocG9pbnQsIHBvbHlnb24pIHtcbiAgICB2YXIgbWVyaWRpYW4gPSBwb2ludFswXSwgcGFyYWxsZWwgPSBwb2ludFsxXSwgbWVyaWRpYW5Ob3JtYWwgPSBbIE1hdGguc2luKG1lcmlkaWFuKSwgLU1hdGguY29zKG1lcmlkaWFuKSwgMCBdLCBwb2xhckFuZ2xlID0gMCwgd2luZGluZyA9IDA7XG4gICAgZDNfZ2VvX2FyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIHJpbmcgPSBwb2x5Z29uW2ldLCBtID0gcmluZy5sZW5ndGg7XG4gICAgICBpZiAoIW0pIGNvbnRpbnVlO1xuICAgICAgdmFyIHBvaW50MCA9IHJpbmdbMF0sIM67MCA9IHBvaW50MFswXSwgz4YwID0gcG9pbnQwWzFdIC8gMiArIM+AIC8gNCwgc2luz4YwID0gTWF0aC5zaW4oz4YwKSwgY29zz4YwID0gTWF0aC5jb3Moz4YwKSwgaiA9IDE7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoaiA9PT0gbSkgaiA9IDA7XG4gICAgICAgIHBvaW50ID0gcmluZ1tqXTtcbiAgICAgICAgdmFyIM67ID0gcG9pbnRbMF0sIM+GID0gcG9pbnRbMV0gLyAyICsgz4AgLyA0LCBzaW7PhiA9IE1hdGguc2luKM+GKSwgY29zz4YgPSBNYXRoLmNvcyjPhiksIGTOuyA9IM67IC0gzrswLCBzZM67ID0gZM67ID49IDAgPyAxIDogLTEsIGFkzrsgPSBzZM67ICogZM67LCBhbnRpbWVyaWRpYW4gPSBhZM67ID4gz4AsIGsgPSBzaW7PhjAgKiBzaW7PhjtcbiAgICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLmFkZChNYXRoLmF0YW4yKGsgKiBzZM67ICogTWF0aC5zaW4oYWTOuyksIGNvc8+GMCAqIGNvc8+GICsgayAqIE1hdGguY29zKGFkzrspKSk7XG4gICAgICAgIHBvbGFyQW5nbGUgKz0gYW50aW1lcmlkaWFuID8gZM67ICsgc2TOuyAqIM+EIDogZM67O1xuICAgICAgICBpZiAoYW50aW1lcmlkaWFuIF4gzrswID49IG1lcmlkaWFuIF4gzrsgPj0gbWVyaWRpYW4pIHtcbiAgICAgICAgICB2YXIgYXJjID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGQzX2dlb19jYXJ0ZXNpYW4ocG9pbnQwKSwgZDNfZ2VvX2NhcnRlc2lhbihwb2ludCkpO1xuICAgICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoYXJjKTtcbiAgICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKG1lcmlkaWFuTm9ybWFsLCBhcmMpO1xuICAgICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgICB2YXIgz4ZhcmMgPSAoYW50aW1lcmlkaWFuIF4gZM67ID49IDAgPyAtMSA6IDEpICogZDNfYXNpbihpbnRlcnNlY3Rpb25bMl0pO1xuICAgICAgICAgIGlmIChwYXJhbGxlbCA+IM+GYXJjIHx8IHBhcmFsbGVsID09PSDPhmFyYyAmJiAoYXJjWzBdIHx8IGFyY1sxXSkpIHtcbiAgICAgICAgICAgIHdpbmRpbmcgKz0gYW50aW1lcmlkaWFuIF4gZM67ID49IDAgPyAxIDogLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaisrKSBicmVhaztcbiAgICAgICAgzrswID0gzrssIHNpbs+GMCA9IHNpbs+GLCBjb3PPhjAgPSBjb3PPhiwgcG9pbnQwID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAocG9sYXJBbmdsZSA8IC3OtSB8fCBwb2xhckFuZ2xlIDwgzrUgJiYgZDNfZ2VvX2FyZWFSaW5nU3VtIDwgMCkgXiB3aW5kaW5nICYgMTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcENpcmNsZShyYWRpdXMpIHtcbiAgICB2YXIgY3IgPSBNYXRoLmNvcyhyYWRpdXMpLCBzbWFsbFJhZGl1cyA9IGNyID4gMCwgbm90SGVtaXNwaGVyZSA9IGFicyhjcikgPiDOtSwgaW50ZXJwb2xhdGUgPSBkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUocmFkaXVzLCA2ICogZDNfcmFkaWFucyk7XG4gICAgcmV0dXJuIGQzX2dlb19jbGlwKHZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgc21hbGxSYWRpdXMgPyBbIDAsIC1yYWRpdXMgXSA6IFsgLc+ALCByYWRpdXMgLSDPgCBdKTtcbiAgICBmdW5jdGlvbiB2aXNpYmxlKM67LCDPhikge1xuICAgICAgcmV0dXJuIE1hdGguY29zKM67KSAqIE1hdGguY29zKM+GKSA+IGNyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbGlwTGluZShsaXN0ZW5lcikge1xuICAgICAgdmFyIHBvaW50MCwgYzAsIHYwLCB2MDAsIGNsZWFuO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xuICAgICAgICAgIGNsZWFuID0gMTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgICAgIHZhciBwb2ludDEgPSBbIM67LCDPhiBdLCBwb2ludDIsIHYgPSB2aXNpYmxlKM67LCDPhiksIGMgPSBzbWFsbFJhZGl1cyA/IHYgPyAwIDogY29kZSjOuywgz4YpIDogdiA/IGNvZGUozrsgKyAozrsgPCAwID8gz4AgOiAtz4ApLCDPhikgOiAwO1xuICAgICAgICAgIGlmICghcG9pbnQwICYmICh2MDAgPSB2MCA9IHYpKSBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgICBpZiAoZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHBvaW50MCwgcG9pbnQyKSB8fCBkM19nZW9fc3BoZXJpY2FsRXF1YWwocG9pbnQxLCBwb2ludDIpKSB7XG4gICAgICAgICAgICAgIHBvaW50MVswXSArPSDOtTtcbiAgICAgICAgICAgICAgcG9pbnQxWzFdICs9IM61O1xuICAgICAgICAgICAgICB2ID0gdmlzaWJsZShwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCk7XG4gICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9pbnQwID0gcG9pbnQyO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm90SGVtaXNwaGVyZSAmJiBwb2ludDAgJiYgc21hbGxSYWRpdXMgXiB2KSB7XG4gICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgIGlmICghKGMgJiBjMCkgJiYgKHQgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDAsIHRydWUpKSkge1xuICAgICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICAgIGlmIChzbWFsbFJhZGl1cykge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHYgJiYgKCFwb2ludDAgfHwgIWQzX2dlb19zcGhlcmljYWxFcXVhbChwb2ludDAsIHBvaW50MSkpKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5wb2ludChwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50MCA9IHBvaW50MSwgdjAgPSB2LCBjMCA9IGM7XG4gICAgICAgIH0sXG4gICAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh2MCkgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgIHBvaW50MCA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gY2xlYW4gfCAodjAwICYmIHYwKSA8PCAxO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbnRlcnNlY3QoYSwgYiwgdHdvKSB7XG4gICAgICB2YXIgcGEgPSBkM19nZW9fY2FydGVzaWFuKGEpLCBwYiA9IGQzX2dlb19jYXJ0ZXNpYW4oYik7XG4gICAgICB2YXIgbjEgPSBbIDEsIDAsIDAgXSwgbjIgPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MocGEsIHBiKSwgbjJuMiA9IGQzX2dlb19jYXJ0ZXNpYW5Eb3QobjIsIG4yKSwgbjFuMiA9IG4yWzBdLCBkZXRlcm1pbmFudCA9IG4ybjIgLSBuMW4yICogbjFuMjtcbiAgICAgIGlmICghZGV0ZXJtaW5hbnQpIHJldHVybiAhdHdvICYmIGE7XG4gICAgICB2YXIgYzEgPSBjciAqIG4ybjIgLyBkZXRlcm1pbmFudCwgYzIgPSAtY3IgKiBuMW4yIC8gZGV0ZXJtaW5hbnQsIG4xeG4yID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKG4xLCBuMiksIEEgPSBkM19nZW9fY2FydGVzaWFuU2NhbGUobjEsIGMxKSwgQiA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZShuMiwgYzIpO1xuICAgICAgZDNfZ2VvX2NhcnRlc2lhbkFkZChBLCBCKTtcbiAgICAgIHZhciB1ID0gbjF4bjIsIHcgPSBkM19nZW9fY2FydGVzaWFuRG90KEEsIHUpLCB1dSA9IGQzX2dlb19jYXJ0ZXNpYW5Eb3QodSwgdSksIHQyID0gdyAqIHcgLSB1dSAqIChkM19nZW9fY2FydGVzaWFuRG90KEEsIEEpIC0gMSk7XG4gICAgICBpZiAodDIgPCAwKSByZXR1cm47XG4gICAgICB2YXIgdCA9IE1hdGguc3FydCh0MiksIHEgPSBkM19nZW9fY2FydGVzaWFuU2NhbGUodSwgKC13IC0gdCkgLyB1dSk7XG4gICAgICBkM19nZW9fY2FydGVzaWFuQWRkKHEsIEEpO1xuICAgICAgcSA9IGQzX2dlb19zcGhlcmljYWwocSk7XG4gICAgICBpZiAoIXR3bykgcmV0dXJuIHE7XG4gICAgICB2YXIgzrswID0gYVswXSwgzrsxID0gYlswXSwgz4YwID0gYVsxXSwgz4YxID0gYlsxXSwgejtcbiAgICAgIGlmICjOuzEgPCDOuzApIHogPSDOuzAsIM67MCA9IM67MSwgzrsxID0gejtcbiAgICAgIHZhciDOtM67ID0gzrsxIC0gzrswLCBwb2xhciA9IGFicyjOtM67IC0gz4ApIDwgzrUsIG1lcmlkaWFuID0gcG9sYXIgfHwgzrTOuyA8IM61O1xuICAgICAgaWYgKCFwb2xhciAmJiDPhjEgPCDPhjApIHogPSDPhjAsIM+GMCA9IM+GMSwgz4YxID0gejtcbiAgICAgIGlmIChtZXJpZGlhbiA/IHBvbGFyID8gz4YwICsgz4YxID4gMCBeIHFbMV0gPCAoYWJzKHFbMF0gLSDOuzApIDwgzrUgPyDPhjAgOiDPhjEpIDogz4YwIDw9IHFbMV0gJiYgcVsxXSA8PSDPhjEgOiDOtM67ID4gz4AgXiAozrswIDw9IHFbMF0gJiYgcVswXSA8PSDOuzEpKSB7XG4gICAgICAgIHZhciBxMSA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgKyB0KSAvIHV1KTtcbiAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbkFkZChxMSwgQSk7XG4gICAgICAgIHJldHVybiBbIHEsIGQzX2dlb19zcGhlcmljYWwocTEpIF07XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvZGUozrssIM+GKSB7XG4gICAgICB2YXIgciA9IHNtYWxsUmFkaXVzID8gcmFkaXVzIDogz4AgLSByYWRpdXMsIGNvZGUgPSAwO1xuICAgICAgaWYgKM67IDwgLXIpIGNvZGUgfD0gMTsgZWxzZSBpZiAozrsgPiByKSBjb2RlIHw9IDI7XG4gICAgICBpZiAoz4YgPCAtcikgY29kZSB8PSA0OyBlbHNlIGlmICjPhiA+IHIpIGNvZGUgfD0gODtcbiAgICAgIHJldHVybiBjb2RlO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX2NsaXBMaW5lKHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHZhciBhID0gbGluZS5hLCBiID0gbGluZS5iLCBheCA9IGEueCwgYXkgPSBhLnksIGJ4ID0gYi54LCBieSA9IGIueSwgdDAgPSAwLCB0MSA9IDEsIGR4ID0gYnggLSBheCwgZHkgPSBieSAtIGF5LCByO1xuICAgICAgciA9IHgwIC0gYXg7XG4gICAgICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gICAgICByIC89IGR4O1xuICAgICAgaWYgKGR4IDwgMCkge1xuICAgICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICAgIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgICAgfVxuICAgICAgciA9IHgxIC0gYXg7XG4gICAgICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG4gICAgICByIC89IGR4O1xuICAgICAgaWYgKGR4IDwgMCkge1xuICAgICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICAgIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgICAgfVxuICAgICAgciA9IHkwIC0gYXk7XG4gICAgICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gICAgICByIC89IGR5O1xuICAgICAgaWYgKGR5IDwgMCkge1xuICAgICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICAgIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgICAgfVxuICAgICAgciA9IHkxIC0gYXk7XG4gICAgICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gICAgICByIC89IGR5O1xuICAgICAgaWYgKGR5IDwgMCkge1xuICAgICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICAgIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgICAgfVxuICAgICAgaWYgKHQwID4gMCkgbGluZS5hID0ge1xuICAgICAgICB4OiBheCArIHQwICogZHgsXG4gICAgICAgIHk6IGF5ICsgdDAgKiBkeVxuICAgICAgfTtcbiAgICAgIGlmICh0MSA8IDEpIGxpbmUuYiA9IHtcbiAgICAgICAgeDogYXggKyB0MSAqIGR4LFxuICAgICAgICB5OiBheSArIHQxICogZHlcbiAgICAgIH07XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuICB9XG4gIHZhciBkM19nZW9fY2xpcEV4dGVudE1BWCA9IDFlOTtcbiAgZDMuZ2VvLmNsaXBFeHRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgeDAsIHkwLCB4MSwgeTEsIHN0cmVhbSwgY2xpcCwgY2xpcEV4dGVudCA9IHtcbiAgICAgIHN0cmVhbTogZnVuY3Rpb24ob3V0cHV0KSB7XG4gICAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlO1xuICAgICAgICBzdHJlYW0gPSBjbGlwKG91dHB1dCk7XG4gICAgICAgIHN0cmVhbS52YWxpZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICB9LFxuICAgICAgZXh0ZW50OiBmdW5jdGlvbihfKSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgWyB4MCwgeTAgXSwgWyB4MSwgeTEgXSBdO1xuICAgICAgICBjbGlwID0gZDNfZ2VvX2NsaXBFeHRlbnQoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSk7XG4gICAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlLCBzdHJlYW0gPSBudWxsO1xuICAgICAgICByZXR1cm4gY2xpcEV4dGVudDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBjbGlwRXh0ZW50LmV4dGVudChbIFsgMCwgMCBdLCBbIDk2MCwgNTAwIF0gXSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwRXh0ZW50KHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdGVuZXJfID0gbGlzdGVuZXIsIGJ1ZmZlckxpc3RlbmVyID0gZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lcigpLCBjbGlwTGluZSA9IGQzX2dlb21fY2xpcExpbmUoeDAsIHkwLCB4MSwgeTEpLCBzZWdtZW50cywgcG9seWdvbiwgcmluZztcbiAgICAgIHZhciBjbGlwID0ge1xuICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxpc3RlbmVyID0gYnVmZmVyTGlzdGVuZXI7XG4gICAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgICBwb2x5Z29uID0gW107XG4gICAgICAgICAgY2xlYW4gPSB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyXztcbiAgICAgICAgICBzZWdtZW50cyA9IGQzLm1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgICB2YXIgY2xpcFN0YXJ0SW5zaWRlID0gaW5zaWRlUG9seWdvbihbIHgwLCB5MSBdKSwgaW5zaWRlID0gY2xlYW4gJiYgY2xpcFN0YXJ0SW5zaWRlLCB2aXNpYmxlID0gc2VnbWVudHMubGVuZ3RoO1xuICAgICAgICAgIGlmIChpbnNpZGUgfHwgdmlzaWJsZSkge1xuICAgICAgICAgICAgbGlzdGVuZXIucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgICBpZiAoaW5zaWRlKSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICAgIGQzX2dlb19jbGlwUG9seWdvbihzZWdtZW50cywgY29tcGFyZSwgY2xpcFN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdGVuZXIucG9seWdvbkVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSByaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIGluc2lkZVBvbHlnb24ocCkge1xuICAgICAgICB2YXIgd24gPSAwLCBuID0gcG9seWdvbi5sZW5ndGgsIHkgPSBwWzFdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAxLCB2ID0gcG9seWdvbltpXSwgbSA9IHYubGVuZ3RoLCBhID0gdlswXSwgYjsgaiA8IG07ICsraikge1xuICAgICAgICAgICAgYiA9IHZbal07XG4gICAgICAgICAgICBpZiAoYVsxXSA8PSB5KSB7XG4gICAgICAgICAgICAgIGlmIChiWzFdID4geSAmJiBkM19jcm9zczJkKGEsIGIsIHApID4gMCkgKyt3bjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChiWzFdIDw9IHkgJiYgZDNfY3Jvc3MyZChhLCBiLCBwKSA8IDApIC0td247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhID0gYjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHduICE9PSAwO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGEgPSAwLCBhMSA9IDA7XG4gICAgICAgIGlmIChmcm9tID09IG51bGwgfHwgKGEgPSBjb3JuZXIoZnJvbSwgZGlyZWN0aW9uKSkgIT09IChhMSA9IGNvcm5lcih0bywgZGlyZWN0aW9uKSkgfHwgY29tcGFyZVBvaW50cyhmcm9tLCB0bykgPCAwIF4gZGlyZWN0aW9uID4gMCkge1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KGEgPT09IDAgfHwgYSA9PT0gMyA/IHgwIDogeDEsIGEgPiAxID8geTEgOiB5MCk7XG4gICAgICAgICAgfSB3aGlsZSAoKGEgPSAoYSArIGRpcmVjdGlvbiArIDQpICUgNCkgIT09IGExKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwb2ludFZpc2libGUoeCwgeSkge1xuICAgICAgICByZXR1cm4geDAgPD0geCAmJiB4IDw9IHgxICYmIHkwIDw9IHkgJiYgeSA8PSB5MTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgICAgaWYgKHBvaW50VmlzaWJsZSh4LCB5KSkgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG4gICAgICB9XG4gICAgICB2YXIgeF9fLCB5X18sIHZfXywgeF8sIHlfLCB2XywgZmlyc3QsIGNsZWFuO1xuICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgICBpZiAocG9seWdvbikgcG9seWdvbi5wdXNoKHJpbmcgPSBbXSk7XG4gICAgICAgIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgdl8gPSBmYWxzZTtcbiAgICAgICAgeF8gPSB5XyA9IE5hTjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICAgIGlmIChzZWdtZW50cykge1xuICAgICAgICAgIGxpbmVQb2ludCh4X18sIHlfXyk7XG4gICAgICAgICAgaWYgKHZfXyAmJiB2XykgYnVmZmVyTGlzdGVuZXIucmVqb2luKCk7XG4gICAgICAgICAgc2VnbWVudHMucHVzaChidWZmZXJMaXN0ZW5lci5idWZmZXIoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuICAgICAgICBpZiAodl8pIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XG4gICAgICAgIHggPSBNYXRoLm1heCgtZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIE1hdGgubWluKGQzX2dlb19jbGlwRXh0ZW50TUFYLCB4KSk7XG4gICAgICAgIHkgPSBNYXRoLm1heCgtZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIE1hdGgubWluKGQzX2dlb19jbGlwRXh0ZW50TUFYLCB5KSk7XG4gICAgICAgIHZhciB2ID0gcG9pbnRWaXNpYmxlKHgsIHkpO1xuICAgICAgICBpZiAocG9seWdvbikgcmluZy5wdXNoKFsgeCwgeSBdKTtcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgeF9fID0geCwgeV9fID0geSwgdl9fID0gdjtcbiAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHgsIHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodiAmJiB2XykgbGlzdGVuZXIucG9pbnQoeCwgeSk7IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGwgPSB7XG4gICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICB4OiB4XyxcbiAgICAgICAgICAgICAgICB5OiB5X1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBiOiB7XG4gICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICB5OiB5XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY2xpcExpbmUobCkpIHtcbiAgICAgICAgICAgICAgaWYgKCF2Xykge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KGwuYS54LCBsLmEueSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQobC5iLngsIGwuYi55KTtcbiAgICAgICAgICAgICAgaWYgKCF2KSBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHYpIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHgsIHkpO1xuICAgICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB4XyA9IHgsIHlfID0geSwgdl8gPSB2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsaXA7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBjb3JuZXIocCwgZGlyZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYWJzKHBbMF0gLSB4MCkgPCDOtSA/IGRpcmVjdGlvbiA+IDAgPyAwIDogMyA6IGFicyhwWzBdIC0geDEpIDwgzrUgPyBkaXJlY3Rpb24gPiAwID8gMiA6IDEgOiBhYnMocFsxXSAtIHkwKSA8IM61ID8gZGlyZWN0aW9uID4gMCA/IDEgOiAwIDogZGlyZWN0aW9uID4gMCA/IDMgOiAyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgICAgIHJldHVybiBjb21wYXJlUG9pbnRzKGEueCwgYi54KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGFyZVBvaW50cyhhLCBiKSB7XG4gICAgICB2YXIgY2EgPSBjb3JuZXIoYSwgMSksIGNiID0gY29ybmVyKGIsIDEpO1xuICAgICAgcmV0dXJuIGNhICE9PSBjYiA/IGNhIC0gY2IgOiBjYSA9PT0gMCA/IGJbMV0gLSBhWzFdIDogY2EgPT09IDEgPyBhWzBdIC0gYlswXSA6IGNhID09PSAyID8gYVsxXSAtIGJbMV0gOiBiWzBdIC0gYVswXTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NvbmljKHByb2plY3RBdCkge1xuICAgIHZhciDPhjAgPSAwLCDPhjEgPSDPgCAvIDMsIG0gPSBkM19nZW9fcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSwgcCA9IG0oz4YwLCDPhjEpO1xuICAgIHAucGFyYWxsZWxzID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyDPhjAgLyDPgCAqIDE4MCwgz4YxIC8gz4AgKiAxODAgXTtcbiAgICAgIHJldHVybiBtKM+GMCA9IF9bMF0gKiDPgCAvIDE4MCwgz4YxID0gX1sxXSAqIM+AIC8gMTgwKTtcbiAgICB9O1xuICAgIHJldHVybiBwO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jb25pY0VxdWFsQXJlYSjPhjAsIM+GMSkge1xuICAgIHZhciBzaW7PhjAgPSBNYXRoLnNpbijPhjApLCBuID0gKHNpbs+GMCArIE1hdGguc2luKM+GMSkpIC8gMiwgQyA9IDEgKyBzaW7PhjAgKiAoMiAqIG4gLSBzaW7PhjApLCDPgTAgPSBNYXRoLnNxcnQoQykgLyBuO1xuICAgIGZ1bmN0aW9uIGZvcndhcmQozrssIM+GKSB7XG4gICAgICB2YXIgz4EgPSBNYXRoLnNxcnQoQyAtIDIgKiBuICogTWF0aC5zaW4oz4YpKSAvIG47XG4gICAgICByZXR1cm4gWyDPgSAqIE1hdGguc2luKM67ICo9IG4pLCDPgTAgLSDPgSAqIE1hdGguY29zKM67KSBdO1xuICAgIH1cbiAgICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciDPgTBfeSA9IM+BMCAtIHk7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHgsIM+BMF95KSAvIG4sIGQzX2FzaW4oKEMgLSAoeCAqIHggKyDPgTBfeSAqIM+BMF95KSAqIG4gKiBuKSAvICgyICogbikpIF07XG4gICAgfTtcbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfVxuICAoZDMuZ2VvLmNvbmljRXF1YWxBcmVhID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19jb25pYyhkM19nZW9fY29uaWNFcXVhbEFyZWEpO1xuICB9KS5yYXcgPSBkM19nZW9fY29uaWNFcXVhbEFyZWE7XG4gIGQzLmdlby5hbGJlcnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuZ2VvLmNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsgOTYsIDAgXSkuY2VudGVyKFsgLS42LCAzOC43IF0pLnBhcmFsbGVscyhbIDI5LjUsIDQ1LjUgXSkuc2NhbGUoMTA3MCk7XG4gIH07XG4gIGQzLmdlby5hbGJlcnNVc2EgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbG93ZXI0OCA9IGQzLmdlby5hbGJlcnMoKTtcbiAgICB2YXIgYWxhc2thID0gZDMuZ2VvLmNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsgMTU0LCAwIF0pLmNlbnRlcihbIC0yLCA1OC41IF0pLnBhcmFsbGVscyhbIDU1LCA2NSBdKTtcbiAgICB2YXIgaGF3YWlpID0gZDMuZ2VvLmNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsgMTU3LCAwIF0pLmNlbnRlcihbIC0zLCAxOS45IF0pLnBhcmFsbGVscyhbIDgsIDE4IF0pO1xuICAgIHZhciBwb2ludCwgcG9pbnRTdHJlYW0gPSB7XG4gICAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICBwb2ludCA9IFsgeCwgeSBdO1xuICAgICAgfVxuICAgIH0sIGxvd2VyNDhQb2ludCwgYWxhc2thUG9pbnQsIGhhd2FpaVBvaW50O1xuICAgIGZ1bmN0aW9uIGFsYmVyc1VzYShjb29yZGluYXRlcykge1xuICAgICAgdmFyIHggPSBjb29yZGluYXRlc1swXSwgeSA9IGNvb3JkaW5hdGVzWzFdO1xuICAgICAgcG9pbnQgPSBudWxsO1xuICAgICAgKGxvd2VyNDhQb2ludCh4LCB5KSwgcG9pbnQpIHx8IChhbGFza2FQb2ludCh4LCB5KSwgcG9pbnQpIHx8IGhhd2FpaVBvaW50KHgsIHkpO1xuICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cbiAgICBhbGJlcnNVc2EuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLCB0ID0gbG93ZXI0OC50cmFuc2xhdGUoKSwgeCA9IChjb29yZGluYXRlc1swXSAtIHRbMF0pIC8gaywgeSA9IChjb29yZGluYXRlc1sxXSAtIHRbMV0pIC8gaztcbiAgICAgIHJldHVybiAoeSA+PSAuMTIgJiYgeSA8IC4yMzQgJiYgeCA+PSAtLjQyNSAmJiB4IDwgLS4yMTQgPyBhbGFza2EgOiB5ID49IC4xNjYgJiYgeSA8IC4yMzQgJiYgeCA+PSAtLjIxNCAmJiB4IDwgLS4xMTUgPyBoYXdhaWkgOiBsb3dlcjQ4KS5pbnZlcnQoY29vcmRpbmF0ZXMpO1xuICAgIH07XG4gICAgYWxiZXJzVXNhLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgdmFyIGxvd2VyNDhTdHJlYW0gPSBsb3dlcjQ4LnN0cmVhbShzdHJlYW0pLCBhbGFza2FTdHJlYW0gPSBhbGFza2Euc3RyZWFtKHN0cmVhbSksIGhhd2FpaVN0cmVhbSA9IGhhd2FpaS5zdHJlYW0oc3RyZWFtKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICBhbGFza2FTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgICAgaGF3YWlpU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICB9LFxuICAgICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0uc3BoZXJlKCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLnNwaGVyZSgpO1xuICAgICAgICAgIGhhd2FpaVN0cmVhbS5zcGhlcmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsb3dlcjQ4U3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgaGF3YWlpU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsb3dlcjQ4U3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgaGF3YWlpU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGFsYmVyc1VzYS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnByZWNpc2lvbigpO1xuICAgICAgbG93ZXI0OC5wcmVjaXNpb24oXyk7XG4gICAgICBhbGFza2EucHJlY2lzaW9uKF8pO1xuICAgICAgaGF3YWlpLnByZWNpc2lvbihfKTtcbiAgICAgIHJldHVybiBhbGJlcnNVc2E7XG4gICAgfTtcbiAgICBhbGJlcnNVc2Euc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnNjYWxlKCk7XG4gICAgICBsb3dlcjQ4LnNjYWxlKF8pO1xuICAgICAgYWxhc2thLnNjYWxlKF8gKiAuMzUpO1xuICAgICAgaGF3YWlpLnNjYWxlKF8pO1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYS50cmFuc2xhdGUobG93ZXI0OC50cmFuc2xhdGUoKSk7XG4gICAgfTtcbiAgICBhbGJlcnNVc2EudHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC50cmFuc2xhdGUoKTtcbiAgICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLCB4ID0gK19bMF0sIHkgPSArX1sxXTtcbiAgICAgIGxvd2VyNDhQb2ludCA9IGxvd2VyNDgudHJhbnNsYXRlKF8pLmNsaXBFeHRlbnQoWyBbIHggLSAuNDU1ICogaywgeSAtIC4yMzggKiBrIF0sIFsgeCArIC40NTUgKiBrLCB5ICsgLjIzOCAqIGsgXSBdKS5zdHJlYW0ocG9pbnRTdHJlYW0pLnBvaW50O1xuICAgICAgYWxhc2thUG9pbnQgPSBhbGFza2EudHJhbnNsYXRlKFsgeCAtIC4zMDcgKiBrLCB5ICsgLjIwMSAqIGsgXSkuY2xpcEV4dGVudChbIFsgeCAtIC40MjUgKiBrICsgzrUsIHkgKyAuMTIgKiBrICsgzrUgXSwgWyB4IC0gLjIxNCAqIGsgLSDOtSwgeSArIC4yMzQgKiBrIC0gzrUgXSBdKS5zdHJlYW0ocG9pbnRTdHJlYW0pLnBvaW50O1xuICAgICAgaGF3YWlpUG9pbnQgPSBoYXdhaWkudHJhbnNsYXRlKFsgeCAtIC4yMDUgKiBrLCB5ICsgLjIxMiAqIGsgXSkuY2xpcEV4dGVudChbIFsgeCAtIC4yMTQgKiBrICsgzrUsIHkgKyAuMTY2ICogayArIM61IF0sIFsgeCAtIC4xMTUgKiBrIC0gzrUsIHkgKyAuMjM0ICogayAtIM61IF0gXSkuc3RyZWFtKHBvaW50U3RyZWFtKS5wb2ludDtcbiAgICAgIHJldHVybiBhbGJlcnNVc2E7XG4gICAgfTtcbiAgICByZXR1cm4gYWxiZXJzVXNhLnNjYWxlKDEwNzApO1xuICB9O1xuICB2YXIgZDNfZ2VvX3BhdGhBcmVhU3VtLCBkM19nZW9fcGF0aEFyZWFQb2x5Z29uLCBkM19nZW9fcGF0aEFyZWEgPSB7XG4gICAgcG9pbnQ6IGQzX25vb3AsXG4gICAgbGluZVN0YXJ0OiBkM19ub29wLFxuICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX2dlb19wYXRoQXJlYVBvbHlnb24gPSAwO1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQXJlYVJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQXJlYS5saW5lRW5kID0gZDNfZ2VvX3BhdGhBcmVhLnBvaW50ID0gZDNfbm9vcDtcbiAgICAgIGQzX2dlb19wYXRoQXJlYVN1bSArPSBhYnMoZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiAvIDIpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhBcmVhUmluZ1N0YXJ0KCkge1xuICAgIHZhciB4MDAsIHkwMCwgeDAsIHkwO1xuICAgIGQzX2dlb19wYXRoQXJlYS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIGQzX2dlb19wYXRoQXJlYS5wb2ludCA9IG5leHRQb2ludDtcbiAgICAgIHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5O1xuICAgIH07XG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KHgsIHkpIHtcbiAgICAgIGQzX2dlb19wYXRoQXJlYVBvbHlnb24gKz0geTAgKiB4IC0geDAgKiB5O1xuICAgICAgeDAgPSB4LCB5MCA9IHk7XG4gICAgfVxuICAgIGQzX2dlb19wYXRoQXJlYS5saW5lRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICBuZXh0UG9pbnQoeDAwLCB5MDApO1xuICAgIH07XG4gIH1cbiAgdmFyIGQzX2dlb19wYXRoQm91bmRzWDAsIGQzX2dlb19wYXRoQm91bmRzWTAsIGQzX2dlb19wYXRoQm91bmRzWDEsIGQzX2dlb19wYXRoQm91bmRzWTE7XG4gIHZhciBkM19nZW9fcGF0aEJvdW5kcyA9IHtcbiAgICBwb2ludDogZDNfZ2VvX3BhdGhCb3VuZHNQb2ludCxcbiAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG4gICAgbGluZUVuZDogZDNfbm9vcCxcbiAgICBwb2x5Z29uU3RhcnQ6IGQzX25vb3AsXG4gICAgcG9seWdvbkVuZDogZDNfbm9vcFxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fcGF0aEJvdW5kc1BvaW50KHgsIHkpIHtcbiAgICBpZiAoeCA8IGQzX2dlb19wYXRoQm91bmRzWDApIGQzX2dlb19wYXRoQm91bmRzWDAgPSB4O1xuICAgIGlmICh4ID4gZDNfZ2VvX3BhdGhCb3VuZHNYMSkgZDNfZ2VvX3BhdGhCb3VuZHNYMSA9IHg7XG4gICAgaWYgKHkgPCBkM19nZW9fcGF0aEJvdW5kc1kwKSBkM19nZW9fcGF0aEJvdW5kc1kwID0geTtcbiAgICBpZiAoeSA+IGQzX2dlb19wYXRoQm91bmRzWTEpIGQzX2dlb19wYXRoQm91bmRzWTEgPSB5O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQnVmZmVyKCkge1xuICAgIHZhciBwb2ludENpcmNsZSA9IGQzX2dlb19wYXRoQnVmZmVyQ2lyY2xlKDQuNSksIGJ1ZmZlciA9IFtdO1xuICAgIHZhciBzdHJlYW0gPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmVTdGFydDtcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kUG9seWdvbjtcbiAgICAgIH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIH0sXG4gICAgICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgICAgICBwb2ludENpcmNsZSA9IGQzX2dlb19wYXRoQnVmZmVyQ2lyY2xlKF8pO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgICAgfSxcbiAgICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGJ1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIGJ1ZmZlci5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSwgcG9pbnRDaXJjbGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb2ludExpbmVTdGFydCh4LCB5KSB7XG4gICAgICBidWZmZXIucHVzaChcIk1cIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb2ludExpbmUoeCwgeSkge1xuICAgICAgYnVmZmVyLnB1c2goXCJMXCIsIHgsIFwiLFwiLCB5KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lRW5kUG9seWdvbigpIHtcbiAgICAgIGJ1ZmZlci5wdXNoKFwiWlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmVhbTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcGF0aEJ1ZmZlckNpcmNsZShyYWRpdXMpIHtcbiAgICByZXR1cm4gXCJtMCxcIiArIHJhZGl1cyArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgLTIgKiByYWRpdXMgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIDIgKiByYWRpdXMgKyBcInpcIjtcbiAgfVxuICB2YXIgZDNfZ2VvX3BhdGhDZW50cm9pZCA9IHtcbiAgICBwb2ludDogZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50LFxuICAgIGxpbmVTdGFydDogZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVTdGFydCxcbiAgICBsaW5lRW5kOiBkM19nZW9fcGF0aENlbnRyb2lkTGluZUVuZCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5saW5lU3RhcnQgPSBkM19nZW9fcGF0aENlbnRyb2lkUmluZ1N0YXJ0O1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50O1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5saW5lU3RhcnQgPSBkM19nZW9fcGF0aENlbnRyb2lkTGluZVN0YXJ0O1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5saW5lRW5kID0gZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVFbmQ7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeCwgeSkge1xuICAgIGQzX2dlb19jZW50cm9pZFgwICs9IHg7XG4gICAgZDNfZ2VvX2NlbnRyb2lkWTAgKz0geTtcbiAgICArK2QzX2dlb19jZW50cm9pZFowO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lU3RhcnQoKSB7XG4gICAgdmFyIHgwLCB5MDtcbiAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5wb2ludCA9IG5leHRQb2ludDtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQoeCwgeSkge1xuICAgICAgdmFyIGR4ID0geCAtIHgwLCBkeSA9IHkgLSB5MCwgeiA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRYMSArPSB6ICogKHgwICsgeCkgLyAyO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTEgKz0geiAqICh5MCArIHkpIC8gMjtcbiAgICAgIGQzX2dlb19jZW50cm9pZFoxICs9IHo7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcGF0aENlbnRyb2lkTGluZUVuZCgpIHtcbiAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQ2VudHJvaWRSaW5nU3RhcnQoKSB7XG4gICAgdmFyIHgwMCwgeTAwLCB4MCwgeTA7XG4gICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHkpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KHgsIHkpIHtcbiAgICAgIHZhciBkeCA9IHggLSB4MCwgZHkgPSB5IC0geTAsIHogPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWDEgKz0geiAqICh4MCArIHgpIC8gMjtcbiAgICAgIGQzX2dlb19jZW50cm9pZFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG4gICAgICBkM19nZW9fY2VudHJvaWRaMSArPSB6O1xuICAgICAgeiA9IHkwICogeCAtIHgwICogeTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFgyICs9IHogKiAoeDAgKyB4KTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFkyICs9IHogKiAoeTAgKyB5KTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFoyICs9IHogKiAzO1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbiAgICB9XG4gICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5saW5lRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICBuZXh0UG9pbnQoeDAwLCB5MDApO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDb250ZXh0KGNvbnRleHQpIHtcbiAgICB2YXIgcG9pbnRSYWRpdXMgPSA0LjU7XG4gICAgdmFyIHN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZVN0YXJ0O1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmRQb2x5Z29uO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgfSxcbiAgICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHBvaW50UmFkaXVzID0gXztcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgIH0sXG4gICAgICByZXN1bHQ6IGQzX25vb3BcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIGNvbnRleHQubW92ZVRvKHggKyBwb2ludFJhZGl1cywgeSk7XG4gICAgICBjb250ZXh0LmFyYyh4LCB5LCBwb2ludFJhZGl1cywgMCwgz4QpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb2ludExpbmVTdGFydCh4LCB5KSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lKHgsIHkpIHtcbiAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpbmVFbmRQb2x5Z29uKCkge1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmVhbTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcmVzYW1wbGUocHJvamVjdCkge1xuICAgIHZhciDOtDIgPSAuNSwgY29zTWluRGlzdGFuY2UgPSBNYXRoLmNvcygzMCAqIGQzX3JhZGlhbnMpLCBtYXhEZXB0aCA9IDE2O1xuICAgIGZ1bmN0aW9uIHJlc2FtcGxlKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIChtYXhEZXB0aCA/IHJlc2FtcGxlUmVjdXJzaXZlIDogcmVzYW1wbGVOb25lKShzdHJlYW0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNhbXBsZU5vbmUoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gZDNfZ2VvX3RyYW5zZm9ybVBvaW50KHN0cmVhbSwgZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2FtcGxlUmVjdXJzaXZlKHN0cmVhbSkge1xuICAgICAgdmFyIM67MDAsIM+GMDAsIHgwMCwgeTAwLCBhMDAsIGIwMCwgYzAwLCDOuzAsIHgwLCB5MCwgYTAsIGIwLCBjMDtcbiAgICAgIHZhciByZXNhbXBsZSA9IHtcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgcmVzYW1wbGUubGluZVN0YXJ0ID0gcmluZ1N0YXJ0O1xuICAgICAgICB9LFxuICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgICAgIHJlc2FtcGxlLmxpbmVTdGFydCA9IGxpbmVTdGFydDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICAgIHN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgICAgeDAgPSBOYU47XG4gICAgICAgIHJlc2FtcGxlLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lUG9pbnQozrssIM+GKSB7XG4gICAgICAgIHZhciBjID0gZDNfZ2VvX2NhcnRlc2lhbihbIM67LCDPhiBdKSwgcCA9IHByb2plY3QozrssIM+GKTtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgwID0gcFswXSwgeTAgPSBwWzFdLCDOuzAgPSDOuywgYTAgPSBjWzBdLCBiMCA9IGNbMV0sIGMwID0gY1syXSwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICAgIHN0cmVhbS5wb2ludCh4MCwgeTApO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgICAgcmVzYW1wbGUucG9pbnQgPSBwb2ludDtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgICAgbGluZVN0YXJ0KCk7XG4gICAgICAgIHJlc2FtcGxlLnBvaW50ID0gcmluZ1BvaW50O1xuICAgICAgICByZXNhbXBsZS5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHJpbmdQb2ludCjOuywgz4YpIHtcbiAgICAgICAgbGluZVBvaW50KM67MDAgPSDOuywgz4YwMCA9IM+GKSwgeDAwID0geDAsIHkwMCA9IHkwLCBhMDAgPSBhMCwgYjAwID0gYjAsIGMwMCA9IGMwO1xuICAgICAgICByZXNhbXBsZS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgzrswLCBhMCwgYjAsIGMwLCB4MDAsIHkwMCwgzrswMCwgYTAwLCBiMDAsIGMwMCwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICAgIHJlc2FtcGxlLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBsaW5lRW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzYW1wbGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgzrswLCBhMCwgYjAsIGMwLCB4MSwgeTEsIM67MSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSkge1xuICAgICAgdmFyIGR4ID0geDEgLSB4MCwgZHkgPSB5MSAtIHkwLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgaWYgKGQyID4gNCAqIM60MiAmJiBkZXB0aC0tKSB7XG4gICAgICAgIHZhciBhID0gYTAgKyBhMSwgYiA9IGIwICsgYjEsIGMgPSBjMCArIGMxLCBtID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYyksIM+GMiA9IE1hdGguYXNpbihjIC89IG0pLCDOuzIgPSBhYnMoYWJzKGMpIC0gMSkgPCDOtSB8fCBhYnMozrswIC0gzrsxKSA8IM61ID8gKM67MCArIM67MSkgLyAyIDogTWF0aC5hdGFuMihiLCBhKSwgcCA9IHByb2plY3QozrsyLCDPhjIpLCB4MiA9IHBbMF0sIHkyID0gcFsxXSwgZHgyID0geDIgLSB4MCwgZHkyID0geTIgLSB5MCwgZHogPSBkeSAqIGR4MiAtIGR4ICogZHkyO1xuICAgICAgICBpZiAoZHogKiBkeiAvIGQyID4gzrQyIHx8IGFicygoZHggKiBkeDIgKyBkeSAqIGR5MikgLyBkMiAtIC41KSA+IC4zIHx8IGEwICogYTEgKyBiMCAqIGIxICsgYzAgKiBjMSA8IGNvc01pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgyLCB5MiwgzrsyLCBhIC89IG0sIGIgLz0gbSwgYywgZGVwdGgsIHN0cmVhbSk7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHgyLCB5Mik7XG4gICAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDIsIHkyLCDOuzIsIGEsIGIsIGMsIHgxLCB5MSwgzrsxLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXNhbXBsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBNYXRoLnNxcnQozrQyKTtcbiAgICAgIG1heERlcHRoID0gKM60MiA9IF8gKiBfKSA+IDAgJiYgMTY7XG4gICAgICByZXR1cm4gcmVzYW1wbGU7XG4gICAgfTtcbiAgICByZXR1cm4gcmVzYW1wbGU7XG4gIH1cbiAgZDMuZ2VvLnBhdGggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcG9pbnRSYWRpdXMgPSA0LjUsIHByb2plY3Rpb24sIGNvbnRleHQsIHByb2plY3RTdHJlYW0sIGNvbnRleHRTdHJlYW0sIGNhY2hlU3RyZWFtO1xuICAgIGZ1bmN0aW9uIHBhdGgob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrcG9pbnRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICAgIGlmICghY2FjaGVTdHJlYW0gfHwgIWNhY2hlU3RyZWFtLnZhbGlkKSBjYWNoZVN0cmVhbSA9IHByb2plY3RTdHJlYW0oY29udGV4dFN0cmVhbSk7XG4gICAgICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBjYWNoZVN0cmVhbSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGV4dFN0cmVhbS5yZXN1bHQoKTtcbiAgICB9XG4gICAgcGF0aC5hcmVhID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBkM19nZW9fcGF0aEFyZWFTdW0gPSAwO1xuICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIHByb2plY3RTdHJlYW0oZDNfZ2VvX3BhdGhBcmVhKSk7XG4gICAgICByZXR1cm4gZDNfZ2VvX3BhdGhBcmVhU3VtO1xuICAgIH07XG4gICAgcGF0aC5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWDAgPSBkM19nZW9fY2VudHJvaWRZMCA9IGQzX2dlb19jZW50cm9pZFowID0gZDNfZ2VvX2NlbnRyb2lkWDEgPSBkM19nZW9fY2VudHJvaWRZMSA9IGQzX2dlb19jZW50cm9pZFoxID0gZDNfZ2VvX2NlbnRyb2lkWDIgPSBkM19nZW9fY2VudHJvaWRZMiA9IGQzX2dlb19jZW50cm9pZFoyID0gMDtcbiAgICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBwcm9qZWN0U3RyZWFtKGQzX2dlb19wYXRoQ2VudHJvaWQpKTtcbiAgICAgIHJldHVybiBkM19nZW9fY2VudHJvaWRaMiA/IFsgZDNfZ2VvX2NlbnRyb2lkWDIgLyBkM19nZW9fY2VudHJvaWRaMiwgZDNfZ2VvX2NlbnRyb2lkWTIgLyBkM19nZW9fY2VudHJvaWRaMiBdIDogZDNfZ2VvX2NlbnRyb2lkWjEgPyBbIGQzX2dlb19jZW50cm9pZFgxIC8gZDNfZ2VvX2NlbnRyb2lkWjEsIGQzX2dlb19jZW50cm9pZFkxIC8gZDNfZ2VvX2NlbnRyb2lkWjEgXSA6IGQzX2dlb19jZW50cm9pZFowID8gWyBkM19nZW9fY2VudHJvaWRYMCAvIGQzX2dlb19jZW50cm9pZFowLCBkM19nZW9fY2VudHJvaWRZMCAvIGQzX2dlb19jZW50cm9pZFowIF0gOiBbIE5hTiwgTmFOIF07XG4gICAgfTtcbiAgICBwYXRoLmJvdW5kcyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgZDNfZ2VvX3BhdGhCb3VuZHNYMSA9IGQzX2dlb19wYXRoQm91bmRzWTEgPSAtKGQzX2dlb19wYXRoQm91bmRzWDAgPSBkM19nZW9fcGF0aEJvdW5kc1kwID0gSW5maW5pdHkpO1xuICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIHByb2plY3RTdHJlYW0oZDNfZ2VvX3BhdGhCb3VuZHMpKTtcbiAgICAgIHJldHVybiBbIFsgZDNfZ2VvX3BhdGhCb3VuZHNYMCwgZDNfZ2VvX3BhdGhCb3VuZHNZMCBdLCBbIGQzX2dlb19wYXRoQm91bmRzWDEsIGQzX2dlb19wYXRoQm91bmRzWTEgXSBdO1xuICAgIH07XG4gICAgcGF0aC5wcm9qZWN0aW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJvamVjdGlvbjtcbiAgICAgIHByb2plY3RTdHJlYW0gPSAocHJvamVjdGlvbiA9IF8pID8gXy5zdHJlYW0gfHwgZDNfZ2VvX3BhdGhQcm9qZWN0U3RyZWFtKF8pIDogZDNfaWRlbnRpdHk7XG4gICAgICByZXR1cm4gcmVzZXQoKTtcbiAgICB9O1xuICAgIHBhdGguY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNvbnRleHQ7XG4gICAgICBjb250ZXh0U3RyZWFtID0gKGNvbnRleHQgPSBfKSA9PSBudWxsID8gbmV3IGQzX2dlb19wYXRoQnVmZmVyKCkgOiBuZXcgZDNfZ2VvX3BhdGhDb250ZXh0KF8pO1xuICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKHBvaW50UmFkaXVzKTtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgcGF0aC5wb2ludFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBvaW50UmFkaXVzO1xuICAgICAgcG9pbnRSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IChjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtfKSwgK18pO1xuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfTtcbiAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5wcm9qZWN0aW9uKGQzLmdlby5hbGJlcnNVc2EoKSkuY29udGV4dChudWxsKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhQcm9qZWN0U3RyZWFtKHByb2plY3QpIHtcbiAgICB2YXIgcmVzYW1wbGUgPSBkM19nZW9fcmVzYW1wbGUoZnVuY3Rpb24oeCwgeSkge1xuICAgICAgcmV0dXJuIHByb2plY3QoWyB4ICogZDNfZGVncmVlcywgeSAqIGQzX2RlZ3JlZXMgXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uUmFkaWFucyhyZXNhbXBsZShzdHJlYW0pKTtcbiAgICB9O1xuICB9XG4gIGQzLmdlby50cmFuc2Zvcm0gPSBmdW5jdGlvbihtZXRob2RzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cmVhbTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBuZXcgZDNfZ2VvX3RyYW5zZm9ybShzdHJlYW0pO1xuICAgICAgICBmb3IgKHZhciBrIGluIG1ldGhvZHMpIHRyYW5zZm9ybVtrXSA9IG1ldGhvZHNba107XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3RyYW5zZm9ybShzdHJlYW0pIHtcbiAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgfVxuICBkM19nZW9fdHJhbnNmb3JtLnByb3RvdHlwZSA9IHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdGhpcy5zdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgfSxcbiAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHJlYW0uc3BoZXJlKCk7XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9LFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3RyYW5zZm9ybVBvaW50KHN0cmVhbSwgcG9pbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgc3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLnNwaGVyZSgpO1xuICAgICAgfSxcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgIH0sXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgICB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBkMy5nZW8ucHJvamVjdGlvbiA9IGQzX2dlb19wcm9qZWN0aW9uO1xuICBkMy5nZW8ucHJvamVjdGlvbk11dGF0b3IgPSBkM19nZW9fcHJvamVjdGlvbk11dGF0b3I7XG4gIGZ1bmN0aW9uIGQzX2dlb19wcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb25NdXRhdG9yKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHByb2plY3Q7XG4gICAgfSkoKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSB7XG4gICAgdmFyIHByb2plY3QsIHJvdGF0ZSwgcHJvamVjdFJvdGF0ZSwgcHJvamVjdFJlc2FtcGxlID0gZDNfZ2VvX3Jlc2FtcGxlKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgcmV0dXJuIFsgeFswXSAqIGsgKyDOtHgsIM60eSAtIHhbMV0gKiBrIF07XG4gICAgfSksIGsgPSAxNTAsIHggPSA0ODAsIHkgPSAyNTAsIM67ID0gMCwgz4YgPSAwLCDOtM67ID0gMCwgzrTPhiA9IDAsIM60zrMgPSAwLCDOtHgsIM60eSwgcHJlY2xpcCA9IGQzX2dlb19jbGlwQW50aW1lcmlkaWFuLCBwb3N0Y2xpcCA9IGQzX2lkZW50aXR5LCBjbGlwQW5nbGUgPSBudWxsLCBjbGlwRXh0ZW50ID0gbnVsbCwgc3RyZWFtO1xuICAgIGZ1bmN0aW9uIHByb2plY3Rpb24ocG9pbnQpIHtcbiAgICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZShwb2ludFswXSAqIGQzX3JhZGlhbnMsIHBvaW50WzFdICogZDNfcmFkaWFucyk7XG4gICAgICByZXR1cm4gWyBwb2ludFswXSAqIGsgKyDOtHgsIM60eSAtIHBvaW50WzFdICogayBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbnZlcnQocG9pbnQpIHtcbiAgICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZS5pbnZlcnQoKHBvaW50WzBdIC0gzrR4KSAvIGssICjOtHkgLSBwb2ludFsxXSkgLyBrKTtcbiAgICAgIHJldHVybiBwb2ludCAmJiBbIHBvaW50WzBdICogZDNfZGVncmVlcywgcG9pbnRbMV0gKiBkM19kZWdyZWVzIF07XG4gICAgfVxuICAgIHByb2plY3Rpb24uc3RyZWFtID0gZnVuY3Rpb24ob3V0cHV0KSB7XG4gICAgICBpZiAoc3RyZWFtKSBzdHJlYW0udmFsaWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbSA9IGQzX2dlb19wcm9qZWN0aW9uUmFkaWFucyhwcmVjbGlwKHJvdGF0ZSwgcHJvamVjdFJlc2FtcGxlKHBvc3RjbGlwKG91dHB1dCkpKSk7XG4gICAgICBzdHJlYW0udmFsaWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICB9O1xuICAgIHByb2plY3Rpb24uY2xpcEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xpcEFuZ2xlO1xuICAgICAgcHJlY2xpcCA9IF8gPT0gbnVsbCA/IChjbGlwQW5nbGUgPSBfLCBkM19nZW9fY2xpcEFudGltZXJpZGlhbikgOiBkM19nZW9fY2xpcENpcmNsZSgoY2xpcEFuZ2xlID0gK18pICogZDNfcmFkaWFucyk7XG4gICAgICByZXR1cm4gaW52YWxpZGF0ZSgpO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xpcEV4dGVudDtcbiAgICAgIGNsaXBFeHRlbnQgPSBfO1xuICAgICAgcG9zdGNsaXAgPSBfID8gZDNfZ2VvX2NsaXBFeHRlbnQoX1swXVswXSwgX1swXVsxXSwgX1sxXVswXSwgX1sxXVsxXSkgOiBkM19pZGVudGl0eTtcbiAgICAgIHJldHVybiBpbnZhbGlkYXRlKCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaztcbiAgICAgIGsgPSArXztcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIHgsIHkgXTtcbiAgICAgIHggPSArX1swXTtcbiAgICAgIHkgPSArX1sxXTtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIM67ICogZDNfZGVncmVlcywgz4YgKiBkM19kZWdyZWVzIF07XG4gICAgICDOuyA9IF9bMF0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgz4YgPSBfWzFdICUgMzYwICogZDNfcmFkaWFucztcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIM60zrsgKiBkM19kZWdyZWVzLCDOtM+GICogZDNfZGVncmVlcywgzrTOsyAqIGQzX2RlZ3JlZXMgXTtcbiAgICAgIM60zrsgPSBfWzBdICUgMzYwICogZDNfcmFkaWFucztcbiAgICAgIM60z4YgPSBfWzFdICUgMzYwICogZDNfcmFkaWFucztcbiAgICAgIM60zrMgPSBfLmxlbmd0aCA+IDIgPyBfWzJdICUgMzYwICogZDNfcmFkaWFucyA6IDA7XG4gICAgICByZXR1cm4gcmVzZXQoKTtcbiAgICB9O1xuICAgIGQzLnJlYmluZChwcm9qZWN0aW9uLCBwcm9qZWN0UmVzYW1wbGUsIFwicHJlY2lzaW9uXCIpO1xuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgcHJvamVjdFJvdGF0ZSA9IGQzX2dlb19jb21wb3NlKHJvdGF0ZSA9IGQzX2dlb19yb3RhdGlvbijOtM67LCDOtM+GLCDOtM6zKSwgcHJvamVjdCk7XG4gICAgICB2YXIgY2VudGVyID0gcHJvamVjdCjOuywgz4YpO1xuICAgICAgzrR4ID0geCAtIGNlbnRlclswXSAqIGs7XG4gICAgICDOtHkgPSB5ICsgY2VudGVyWzFdICogaztcbiAgICAgIHJldHVybiBpbnZhbGlkYXRlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgICBpZiAoc3RyZWFtKSBzdHJlYW0udmFsaWQgPSBmYWxzZSwgc3RyZWFtID0gbnVsbDtcbiAgICAgIHJldHVybiBwcm9qZWN0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBwcm9qZWN0ID0gcHJvamVjdEF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBwcm9qZWN0aW9uLmludmVydCA9IHByb2plY3QuaW52ZXJ0ICYmIGludmVydDtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3Byb2plY3Rpb25SYWRpYW5zKHN0cmVhbSkge1xuICAgIHJldHVybiBkM19nZW9fdHJhbnNmb3JtUG9pbnQoc3RyZWFtLCBmdW5jdGlvbih4LCB5KSB7XG4gICAgICBzdHJlYW0ucG9pbnQoeCAqIGQzX3JhZGlhbnMsIHkgKiBkM19yYWRpYW5zKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fZXF1aXJlY3Rhbmd1bGFyKM67LCDPhikge1xuICAgIHJldHVybiBbIM67LCDPhiBdO1xuICB9XG4gIChkMy5nZW8uZXF1aXJlY3Rhbmd1bGFyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uKGQzX2dlb19lcXVpcmVjdGFuZ3VsYXIpO1xuICB9KS5yYXcgPSBkM19nZW9fZXF1aXJlY3Rhbmd1bGFyLmludmVydCA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXI7XG4gIGQzLmdlby5yb3RhdGlvbiA9IGZ1bmN0aW9uKHJvdGF0ZSkge1xuICAgIHJvdGF0ZSA9IGQzX2dlb19yb3RhdGlvbihyb3RhdGVbMF0gJSAzNjAgKiBkM19yYWRpYW5zLCByb3RhdGVbMV0gKiBkM19yYWRpYW5zLCByb3RhdGUubGVuZ3RoID4gMiA/IHJvdGF0ZVsyXSAqIGQzX3JhZGlhbnMgOiAwKTtcbiAgICBmdW5jdGlvbiBmb3J3YXJkKGNvb3JkaW5hdGVzKSB7XG4gICAgICBjb29yZGluYXRlcyA9IHJvdGF0ZShjb29yZGluYXRlc1swXSAqIGQzX3JhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogZDNfcmFkaWFucyk7XG4gICAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZDNfZGVncmVlcywgY29vcmRpbmF0ZXNbMV0gKj0gZDNfZGVncmVlcywgY29vcmRpbmF0ZXM7XG4gICAgfVxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlLmludmVydChjb29yZGluYXRlc1swXSAqIGQzX3JhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogZDNfcmFkaWFucyk7XG4gICAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZDNfZGVncmVlcywgY29vcmRpbmF0ZXNbMV0gKj0gZDNfZGVncmVlcywgY29vcmRpbmF0ZXM7XG4gICAgfTtcbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX2lkZW50aXR5Um90YXRpb24ozrssIM+GKSB7XG4gICAgcmV0dXJuIFsgzrsgPiDPgCA/IM67IC0gz4QgOiDOuyA8IC3PgCA/IM67ICsgz4QgOiDOuywgz4YgXTtcbiAgfVxuICBkM19nZW9faWRlbnRpdHlSb3RhdGlvbi5pbnZlcnQgPSBkM19nZW9fZXF1aXJlY3Rhbmd1bGFyO1xuICBmdW5jdGlvbiBkM19nZW9fcm90YXRpb24ozrTOuywgzrTPhiwgzrTOsykge1xuICAgIHJldHVybiDOtM67ID8gzrTPhiB8fCDOtM6zID8gZDNfZ2VvX2NvbXBvc2UoZDNfZ2VvX3JvdGF0aW9uzrsozrTOuyksIGQzX2dlb19yb3RhdGlvbs+GzrMozrTPhiwgzrTOsykpIDogZDNfZ2VvX3JvdGF0aW9uzrsozrTOuykgOiDOtM+GIHx8IM60zrMgPyBkM19nZW9fcm90YXRpb27Phs6zKM60z4YsIM60zrMpIDogZDNfZ2VvX2lkZW50aXR5Um90YXRpb247XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2ZvcndhcmRSb3RhdGlvbs67KM60zrspIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICByZXR1cm4gzrsgKz0gzrTOuywgWyDOuyA+IM+AID8gzrsgLSDPhCA6IM67IDwgLc+AID8gzrsgKyDPhCA6IM67LCDPhiBdO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3JvdGF0aW9uzrsozrTOuykge1xuICAgIHZhciByb3RhdGlvbiA9IGQzX2dlb19mb3J3YXJkUm90YXRpb27OuyjOtM67KTtcbiAgICByb3RhdGlvbi5pbnZlcnQgPSBkM19nZW9fZm9yd2FyZFJvdGF0aW9uzrsoLc60zrspO1xuICAgIHJldHVybiByb3RhdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcm90YXRpb27Phs6zKM60z4YsIM60zrMpIHtcbiAgICB2YXIgY29zzrTPhiA9IE1hdGguY29zKM60z4YpLCBzaW7OtM+GID0gTWF0aC5zaW4ozrTPhiksIGNvc860zrMgPSBNYXRoLmNvcyjOtM6zKSwgc2luzrTOsyA9IE1hdGguc2luKM60zrMpO1xuICAgIGZ1bmN0aW9uIHJvdGF0aW9uKM67LCDPhikge1xuICAgICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YpLCB4ID0gTWF0aC5jb3MozrspICogY29zz4YsIHkgPSBNYXRoLnNpbijOuykgKiBjb3PPhiwgeiA9IE1hdGguc2luKM+GKSwgayA9IHogKiBjb3POtM+GICsgeCAqIHNpbs60z4Y7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHkgKiBjb3POtM6zIC0gayAqIHNpbs60zrMsIHggKiBjb3POtM+GIC0geiAqIHNpbs60z4YpLCBkM19hc2luKGsgKiBjb3POtM6zICsgeSAqIHNpbs60zrMpIF07XG4gICAgfVxuICAgIHJvdGF0aW9uLmludmVydCA9IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YpLCB4ID0gTWF0aC5jb3MozrspICogY29zz4YsIHkgPSBNYXRoLnNpbijOuykgKiBjb3PPhiwgeiA9IE1hdGguc2luKM+GKSwgayA9IHogKiBjb3POtM6zIC0geSAqIHNpbs60zrM7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHkgKiBjb3POtM6zICsgeiAqIHNpbs60zrMsIHggKiBjb3POtM+GICsgayAqIHNpbs60z4YpLCBkM19hc2luKGsgKiBjb3POtM+GIC0geCAqIHNpbs60z4YpIF07XG4gICAgfTtcbiAgICByZXR1cm4gcm90YXRpb247XG4gIH1cbiAgZDMuZ2VvLmNpcmNsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvcmlnaW4gPSBbIDAsIDAgXSwgYW5nbGUsIHByZWNpc2lvbiA9IDYsIGludGVycG9sYXRlO1xuICAgIGZ1bmN0aW9uIGNpcmNsZSgpIHtcbiAgICAgIHZhciBjZW50ZXIgPSB0eXBlb2Ygb3JpZ2luID09PSBcImZ1bmN0aW9uXCIgPyBvcmlnaW4uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IG9yaWdpbiwgcm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKC1jZW50ZXJbMF0gKiBkM19yYWRpYW5zLCAtY2VudGVyWzFdICogZDNfcmFkaWFucywgMCkuaW52ZXJ0LCByaW5nID0gW107XG4gICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCB7XG4gICAgICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgICAgcmluZy5wdXNoKHggPSByb3RhdGUoeCwgeSkpO1xuICAgICAgICAgIHhbMF0gKj0gZDNfZGVncmVlcywgeFsxXSAqPSBkM19kZWdyZWVzO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiUG9seWdvblwiLFxuICAgICAgICBjb29yZGluYXRlczogWyByaW5nIF1cbiAgICAgIH07XG4gICAgfVxuICAgIGNpcmNsZS5vcmlnaW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmlnaW47XG4gICAgICBvcmlnaW4gPSB4O1xuICAgICAgcmV0dXJuIGNpcmNsZTtcbiAgICB9O1xuICAgIGNpcmNsZS5hbmdsZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGFuZ2xlO1xuICAgICAgaW50ZXJwb2xhdGUgPSBkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUoKGFuZ2xlID0gK3gpICogZDNfcmFkaWFucywgcHJlY2lzaW9uICogZDNfcmFkaWFucyk7XG4gICAgICByZXR1cm4gY2lyY2xlO1xuICAgIH07XG4gICAgY2lyY2xlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByZWNpc2lvbjtcbiAgICAgIGludGVycG9sYXRlID0gZDNfZ2VvX2NpcmNsZUludGVycG9sYXRlKGFuZ2xlICogZDNfcmFkaWFucywgKHByZWNpc2lvbiA9ICtfKSAqIGQzX3JhZGlhbnMpO1xuICAgICAgcmV0dXJuIGNpcmNsZTtcbiAgICB9O1xuICAgIHJldHVybiBjaXJjbGUuYW5nbGUoOTApO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUocmFkaXVzLCBwcmVjaXNpb24pIHtcbiAgICB2YXIgY3IgPSBNYXRoLmNvcyhyYWRpdXMpLCBzciA9IE1hdGguc2luKHJhZGl1cyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZyb20sIHRvLCBkaXJlY3Rpb24sIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgc3RlcCA9IGRpcmVjdGlvbiAqIHByZWNpc2lvbjtcbiAgICAgIGlmIChmcm9tICE9IG51bGwpIHtcbiAgICAgICAgZnJvbSA9IGQzX2dlb19jaXJjbGVBbmdsZShjciwgZnJvbSk7XG4gICAgICAgIHRvID0gZDNfZ2VvX2NpcmNsZUFuZ2xlKGNyLCB0byk7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPiAwID8gZnJvbSA8IHRvIDogZnJvbSA+IHRvKSBmcm9tICs9IGRpcmVjdGlvbiAqIM+EO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnJvbSA9IHJhZGl1cyArIGRpcmVjdGlvbiAqIM+EO1xuICAgICAgICB0byA9IHJhZGl1cyAtIC41ICogc3RlcDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIHBvaW50LCB0ID0gZnJvbTsgZGlyZWN0aW9uID4gMCA/IHQgPiB0byA6IHQgPCB0bzsgdCAtPSBzdGVwKSB7XG4gICAgICAgIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IGQzX2dlb19zcGhlcmljYWwoWyBjciwgLXNyICogTWF0aC5jb3ModCksIC1zciAqIE1hdGguc2luKHQpIF0pKVswXSwgcG9pbnRbMV0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NpcmNsZUFuZ2xlKGNyLCBwb2ludCkge1xuICAgIHZhciBhID0gZDNfZ2VvX2NhcnRlc2lhbihwb2ludCk7XG4gICAgYVswXSAtPSBjcjtcbiAgICBkM19nZW9fY2FydGVzaWFuTm9ybWFsaXplKGEpO1xuICAgIHZhciBhbmdsZSA9IGQzX2Fjb3MoLWFbMV0pO1xuICAgIHJldHVybiAoKC1hWzJdIDwgMCA/IC1hbmdsZSA6IGFuZ2xlKSArIDIgKiBNYXRoLlBJIC0gzrUpICUgKDIgKiBNYXRoLlBJKTtcbiAgfVxuICBkMy5nZW8uZGlzdGFuY2UgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIM6UzrsgPSAoYlswXSAtIGFbMF0pICogZDNfcmFkaWFucywgz4YwID0gYVsxXSAqIGQzX3JhZGlhbnMsIM+GMSA9IGJbMV0gKiBkM19yYWRpYW5zLCBzaW7OlM67ID0gTWF0aC5zaW4ozpTOuyksIGNvc86UzrsgPSBNYXRoLmNvcyjOlM67KSwgc2luz4YwID0gTWF0aC5zaW4oz4YwKSwgY29zz4YwID0gTWF0aC5jb3Moz4YwKSwgc2luz4YxID0gTWF0aC5zaW4oz4YxKSwgY29zz4YxID0gTWF0aC5jb3Moz4YxKSwgdDtcbiAgICByZXR1cm4gTWF0aC5hdGFuMihNYXRoLnNxcnQoKHQgPSBjb3PPhjEgKiBzaW7OlM67KSAqIHQgKyAodCA9IGNvc8+GMCAqIHNpbs+GMSAtIHNpbs+GMCAqIGNvc8+GMSAqIGNvc86UzrspICogdCksIHNpbs+GMCAqIHNpbs+GMSArIGNvc8+GMCAqIGNvc8+GMSAqIGNvc86UzrspO1xuICB9O1xuICBkMy5nZW8uZ3JhdGljdWxlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHgxLCB4MCwgWDEsIFgwLCB5MSwgeTAsIFkxLCBZMCwgZHggPSAxMCwgZHkgPSBkeCwgRFggPSA5MCwgRFkgPSAzNjAsIHgsIHksIFgsIFksIHByZWNpc2lvbiA9IDIuNTtcbiAgICBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcIk11bHRpTGluZVN0cmluZ1wiLFxuICAgICAgICBjb29yZGluYXRlczogbGluZXMoKVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGluZXMoKSB7XG4gICAgICByZXR1cm4gZDMucmFuZ2UoTWF0aC5jZWlsKFgwIC8gRFgpICogRFgsIFgxLCBEWCkubWFwKFgpLmNvbmNhdChkMy5yYW5nZShNYXRoLmNlaWwoWTAgLyBEWSkgKiBEWSwgWTEsIERZKS5tYXAoWSkpLmNvbmNhdChkMy5yYW5nZShNYXRoLmNlaWwoeDAgLyBkeCkgKiBkeCwgeDEsIGR4KS5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gYWJzKHggJSBEWCkgPiDOtTtcbiAgICAgIH0pLm1hcCh4KSkuY29uY2F0KGQzLnJhbmdlKE1hdGguY2VpbCh5MCAvIGR5KSAqIGR5LCB5MSwgZHkpLmZpbHRlcihmdW5jdGlvbih5KSB7XG4gICAgICAgIHJldHVybiBhYnMoeSAlIERZKSA+IM61O1xuICAgICAgfSkubWFwKHkpKTtcbiAgICB9XG4gICAgZ3JhdGljdWxlLmxpbmVzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbGluZXMoKS5tYXAoZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiBcIkxpbmVTdHJpbmdcIixcbiAgICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXNcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLm91dGxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiUG9seWdvblwiLFxuICAgICAgICBjb29yZGluYXRlczogWyBYKFgwKS5jb25jYXQoWShZMSkuc2xpY2UoMSksIFgoWDEpLnJldmVyc2UoKS5zbGljZSgxKSwgWShZMCkucmV2ZXJzZSgpLnNsaWNlKDEpKSBdXG4gICAgICB9O1xuICAgIH07XG4gICAgZ3JhdGljdWxlLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5taW5vckV4dGVudCgpO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5tYWpvckV4dGVudChfKS5taW5vckV4dGVudChfKTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5tYWpvckV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgWyBYMCwgWTAgXSwgWyBYMSwgWTEgXSBdO1xuICAgICAgWDAgPSArX1swXVswXSwgWDEgPSArX1sxXVswXTtcbiAgICAgIFkwID0gK19bMF1bMV0sIFkxID0gK19bMV1bMV07XG4gICAgICBpZiAoWDAgPiBYMSkgXyA9IFgwLCBYMCA9IFgxLCBYMSA9IF87XG4gICAgICBpZiAoWTAgPiBZMSkgXyA9IFkwLCBZMCA9IFkxLCBZMSA9IF87XG4gICAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLm1pbm9yRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBbIHgwLCB5MCBdLCBbIHgxLCB5MSBdIF07XG4gICAgICB4MCA9ICtfWzBdWzBdLCB4MSA9ICtfWzFdWzBdO1xuICAgICAgeTAgPSArX1swXVsxXSwgeTEgPSArX1sxXVsxXTtcbiAgICAgIGlmICh4MCA+IHgxKSBfID0geDAsIHgwID0geDEsIHgxID0gXztcbiAgICAgIGlmICh5MCA+IHkxKSBfID0geTAsIHkwID0geTEsIHkxID0gXztcbiAgICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gICAgfTtcbiAgICBncmF0aWN1bGUuc3RlcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5taW5vclN0ZXAoKTtcbiAgICAgIHJldHVybiBncmF0aWN1bGUubWFqb3JTdGVwKF8pLm1pbm9yU3RlcChfKTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5tYWpvclN0ZXAgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIERYLCBEWSBdO1xuICAgICAgRFggPSArX1swXSwgRFkgPSArX1sxXTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcbiAgICBncmF0aWN1bGUubWlub3JTdGVwID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBkeCwgZHkgXTtcbiAgICAgIGR4ID0gK19bMF0sIGR5ID0gK19bMV07XG4gICAgICByZXR1cm4gZ3JhdGljdWxlO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByZWNpc2lvbjtcbiAgICAgIHByZWNpc2lvbiA9ICtfO1xuICAgICAgeCA9IGQzX2dlb19ncmF0aWN1bGVYKHkwLCB5MSwgOTApO1xuICAgICAgeSA9IGQzX2dlb19ncmF0aWN1bGVZKHgwLCB4MSwgcHJlY2lzaW9uKTtcbiAgICAgIFggPSBkM19nZW9fZ3JhdGljdWxlWChZMCwgWTEsIDkwKTtcbiAgICAgIFkgPSBkM19nZW9fZ3JhdGljdWxlWShYMCwgWDEsIHByZWNpc2lvbik7XG4gICAgICByZXR1cm4gZ3JhdGljdWxlO1xuICAgIH07XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5tYWpvckV4dGVudChbIFsgLTE4MCwgLTkwICsgzrUgXSwgWyAxODAsIDkwIC0gzrUgXSBdKS5taW5vckV4dGVudChbIFsgLTE4MCwgLTgwIC0gzrUgXSwgWyAxODAsIDgwICsgzrUgXSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX2dyYXRpY3VsZVgoeTAsIHkxLCBkeSkge1xuICAgIHZhciB5ID0gZDMucmFuZ2UoeTAsIHkxIC0gzrUsIGR5KS5jb25jYXQoeTEpO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geS5tYXAoZnVuY3Rpb24oeSkge1xuICAgICAgICByZXR1cm4gWyB4LCB5IF07XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19ncmF0aWN1bGVZKHgwLCB4MSwgZHgpIHtcbiAgICB2YXIgeCA9IGQzLnJhbmdlKHgwLCB4MSAtIM61LCBkeCkuY29uY2F0KHgxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIHgubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIFsgeCwgeSBdO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19zb3VyY2UoZCkge1xuICAgIHJldHVybiBkLnNvdXJjZTtcbiAgfVxuICBmdW5jdGlvbiBkM190YXJnZXQoZCkge1xuICAgIHJldHVybiBkLnRhcmdldDtcbiAgfVxuICBkMy5nZW8uZ3JlYXRBcmMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc291cmNlID0gZDNfc291cmNlLCBzb3VyY2VfLCB0YXJnZXQgPSBkM190YXJnZXQsIHRhcmdldF87XG4gICAgZnVuY3Rpb24gZ3JlYXRBcmMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcIkxpbmVTdHJpbmdcIixcbiAgICAgICAgY29vcmRpbmF0ZXM6IFsgc291cmNlXyB8fCBzb3VyY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdGFyZ2V0XyB8fCB0YXJnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKSBdXG4gICAgICB9O1xuICAgIH1cbiAgICBncmVhdEFyYy5kaXN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzLmdlby5kaXN0YW5jZShzb3VyY2VfIHx8IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0YXJnZXRfIHx8IHRhcmdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICAgIGdyZWF0QXJjLnNvdXJjZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvdXJjZTtcbiAgICAgIHNvdXJjZSA9IF8sIHNvdXJjZV8gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gbnVsbCA6IF87XG4gICAgICByZXR1cm4gZ3JlYXRBcmM7XG4gICAgfTtcbiAgICBncmVhdEFyYy50YXJnZXQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0YXJnZXQ7XG4gICAgICB0YXJnZXQgPSBfLCB0YXJnZXRfID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IG51bGwgOiBfO1xuICAgICAgcmV0dXJuIGdyZWF0QXJjO1xuICAgIH07XG4gICAgZ3JlYXRBcmMucHJlY2lzaW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGdyZWF0QXJjIDogMDtcbiAgICB9O1xuICAgIHJldHVybiBncmVhdEFyYztcbiAgfTtcbiAgZDMuZ2VvLmludGVycG9sYXRlID0gZnVuY3Rpb24oc291cmNlLCB0YXJnZXQpIHtcbiAgICByZXR1cm4gZDNfZ2VvX2ludGVycG9sYXRlKHNvdXJjZVswXSAqIGQzX3JhZGlhbnMsIHNvdXJjZVsxXSAqIGQzX3JhZGlhbnMsIHRhcmdldFswXSAqIGQzX3JhZGlhbnMsIHRhcmdldFsxXSAqIGQzX3JhZGlhbnMpO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9faW50ZXJwb2xhdGUoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgY3kwID0gTWF0aC5jb3MoeTApLCBzeTAgPSBNYXRoLnNpbih5MCksIGN5MSA9IE1hdGguY29zKHkxKSwgc3kxID0gTWF0aC5zaW4oeTEpLCBreDAgPSBjeTAgKiBNYXRoLmNvcyh4MCksIGt5MCA9IGN5MCAqIE1hdGguc2luKHgwKSwga3gxID0gY3kxICogTWF0aC5jb3MoeDEpLCBreTEgPSBjeTEgKiBNYXRoLnNpbih4MSksIGQgPSAyICogTWF0aC5hc2luKE1hdGguc3FydChkM19oYXZlcnNpbih5MSAtIHkwKSArIGN5MCAqIGN5MSAqIGQzX2hhdmVyc2luKHgxIC0geDApKSksIGsgPSAxIC8gTWF0aC5zaW4oZCk7XG4gICAgdmFyIGludGVycG9sYXRlID0gZCA/IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBCID0gTWF0aC5zaW4odCAqPSBkKSAqIGssIEEgPSBNYXRoLnNpbihkIC0gdCkgKiBrLCB4ID0gQSAqIGt4MCArIEIgKiBreDEsIHkgPSBBICoga3kwICsgQiAqIGt5MSwgeiA9IEEgKiBzeTAgKyBCICogc3kxO1xuICAgICAgcmV0dXJuIFsgTWF0aC5hdGFuMih5LCB4KSAqIGQzX2RlZ3JlZXMsIE1hdGguYXRhbjIoeiwgTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpKSAqIGQzX2RlZ3JlZXMgXTtcbiAgICB9IDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gWyB4MCAqIGQzX2RlZ3JlZXMsIHkwICogZDNfZGVncmVlcyBdO1xuICAgIH07XG4gICAgaW50ZXJwb2xhdGUuZGlzdGFuY2UgPSBkO1xuICAgIHJldHVybiBpbnRlcnBvbGF0ZTtcbiAgfVxuICBkMy5nZW8ubGVuZ3RoID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgZDNfZ2VvX2xlbmd0aFN1bSA9IDA7XG4gICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIGQzX2dlb19sZW5ndGgpO1xuICAgIHJldHVybiBkM19nZW9fbGVuZ3RoU3VtO1xuICB9O1xuICB2YXIgZDNfZ2VvX2xlbmd0aFN1bTtcbiAgdmFyIGQzX2dlb19sZW5ndGggPSB7XG4gICAgc3BoZXJlOiBkM19ub29wLFxuICAgIHBvaW50OiBkM19ub29wLFxuICAgIGxpbmVTdGFydDogZDNfZ2VvX2xlbmd0aExpbmVTdGFydCxcbiAgICBsaW5lRW5kOiBkM19ub29wLFxuICAgIHBvbHlnb25TdGFydDogZDNfbm9vcCxcbiAgICBwb2x5Z29uRW5kOiBkM19ub29wXG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19sZW5ndGhMaW5lU3RhcnQoKSB7XG4gICAgdmFyIM67MCwgc2luz4YwLCBjb3PPhjA7XG4gICAgZDNfZ2VvX2xlbmd0aC5wb2ludCA9IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgzrswID0gzrsgKiBkM19yYWRpYW5zLCBzaW7PhjAgPSBNYXRoLnNpbijPhiAqPSBkM19yYWRpYW5zKSwgY29zz4YwID0gTWF0aC5jb3Moz4YpO1xuICAgICAgZDNfZ2VvX2xlbmd0aC5wb2ludCA9IG5leHRQb2ludDtcbiAgICB9O1xuICAgIGQzX2dlb19sZW5ndGgubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2xlbmd0aC5wb2ludCA9IGQzX2dlb19sZW5ndGgubGluZUVuZCA9IGQzX25vb3A7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQozrssIM+GKSB7XG4gICAgICB2YXIgc2luz4YgPSBNYXRoLnNpbijPhiAqPSBkM19yYWRpYW5zKSwgY29zz4YgPSBNYXRoLmNvcyjPhiksIHQgPSBhYnMoKM67ICo9IGQzX3JhZGlhbnMpIC0gzrswKSwgY29zzpTOuyA9IE1hdGguY29zKHQpO1xuICAgICAgZDNfZ2VvX2xlbmd0aFN1bSArPSBNYXRoLmF0YW4yKE1hdGguc3FydCgodCA9IGNvc8+GICogTWF0aC5zaW4odCkpICogdCArICh0ID0gY29zz4YwICogc2luz4YgLSBzaW7PhjAgKiBjb3PPhiAqIGNvc86UzrspICogdCksIHNpbs+GMCAqIHNpbs+GICsgY29zz4YwICogY29zz4YgKiBjb3POlM67KTtcbiAgICAgIM67MCA9IM67LCBzaW7PhjAgPSBzaW7PhiwgY29zz4YwID0gY29zz4Y7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19hemltdXRoYWwoc2NhbGUsIGFuZ2xlKSB7XG4gICAgZnVuY3Rpb24gYXppbXV0aGFsKM67LCDPhikge1xuICAgICAgdmFyIGNvc867ID0gTWF0aC5jb3MozrspLCBjb3PPhiA9IE1hdGguY29zKM+GKSwgayA9IHNjYWxlKGNvc867ICogY29zz4YpO1xuICAgICAgcmV0dXJuIFsgayAqIGNvc8+GICogTWF0aC5zaW4ozrspLCBrICogTWF0aC5zaW4oz4YpIF07XG4gICAgfVxuICAgIGF6aW11dGhhbC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgz4EgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSksIGMgPSBhbmdsZSjPgSksIHNpbmMgPSBNYXRoLnNpbihjKSwgY29zYyA9IE1hdGguY29zKGMpO1xuICAgICAgcmV0dXJuIFsgTWF0aC5hdGFuMih4ICogc2luYywgz4EgKiBjb3NjKSwgTWF0aC5hc2luKM+BICYmIHkgKiBzaW5jIC8gz4EpIF07XG4gICAgfTtcbiAgICByZXR1cm4gYXppbXV0aGFsO1xuICB9XG4gIHZhciBkM19nZW9fYXppbXV0aGFsRXF1YWxBcmVhID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCgyIC8gKDEgKyBjb3POu2Nvc8+GKSk7XG4gIH0sIGZ1bmN0aW9uKM+BKSB7XG4gICAgcmV0dXJuIDIgKiBNYXRoLmFzaW4oz4EgLyAyKTtcbiAgfSk7XG4gIChkMy5nZW8uYXppbXV0aGFsRXF1YWxBcmVhID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uKGQzX2dlb19hemltdXRoYWxFcXVhbEFyZWEpO1xuICB9KS5yYXcgPSBkM19nZW9fYXppbXV0aGFsRXF1YWxBcmVhO1xuICB2YXIgZDNfZ2VvX2F6aW11dGhhbEVxdWlkaXN0YW50ID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG4gICAgdmFyIGMgPSBNYXRoLmFjb3MoY29zzrtjb3PPhik7XG4gICAgcmV0dXJuIGMgJiYgYyAvIE1hdGguc2luKGMpO1xuICB9LCBkM19pZGVudGl0eSk7XG4gIChkMy5nZW8uYXppbXV0aGFsRXF1aWRpc3RhbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2F6aW11dGhhbEVxdWlkaXN0YW50KTtcbiAgfSkucmF3ID0gZDNfZ2VvX2F6aW11dGhhbEVxdWlkaXN0YW50O1xuICBmdW5jdGlvbiBkM19nZW9fY29uaWNDb25mb3JtYWwoz4YwLCDPhjEpIHtcbiAgICB2YXIgY29zz4YwID0gTWF0aC5jb3Moz4YwKSwgdCA9IGZ1bmN0aW9uKM+GKSB7XG4gICAgICByZXR1cm4gTWF0aC50YW4oz4AgLyA0ICsgz4YgLyAyKTtcbiAgICB9LCBuID0gz4YwID09PSDPhjEgPyBNYXRoLnNpbijPhjApIDogTWF0aC5sb2coY29zz4YwIC8gTWF0aC5jb3Moz4YxKSkgLyBNYXRoLmxvZyh0KM+GMSkgLyB0KM+GMCkpLCBGID0gY29zz4YwICogTWF0aC5wb3codCjPhjApLCBuKSAvIG47XG4gICAgaWYgKCFuKSByZXR1cm4gZDNfZ2VvX21lcmNhdG9yO1xuICAgIGZ1bmN0aW9uIGZvcndhcmQozrssIM+GKSB7XG4gICAgICBpZiAoRiA+IDApIHtcbiAgICAgICAgaWYgKM+GIDwgLWhhbGbPgCArIM61KSDPhiA9IC1oYWxmz4AgKyDOtTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICjPhiA+IGhhbGbPgCAtIM61KSDPhiA9IGhhbGbPgCAtIM61O1xuICAgICAgfVxuICAgICAgdmFyIM+BID0gRiAvIE1hdGgucG93KHQoz4YpLCBuKTtcbiAgICAgIHJldHVybiBbIM+BICogTWF0aC5zaW4obiAqIM67KSwgRiAtIM+BICogTWF0aC5jb3MobiAqIM67KSBdO1xuICAgIH1cbiAgICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciDPgTBfeSA9IEYgLSB5LCDPgSA9IGQzX3NnbihuKSAqIE1hdGguc3FydCh4ICogeCArIM+BMF95ICogz4EwX3kpO1xuICAgICAgcmV0dXJuIFsgTWF0aC5hdGFuMih4LCDPgTBfeSkgLyBuLCAyICogTWF0aC5hdGFuKE1hdGgucG93KEYgLyDPgSwgMSAvIG4pKSAtIGhhbGbPgCBdO1xuICAgIH07XG4gICAgcmV0dXJuIGZvcndhcmQ7XG4gIH1cbiAgKGQzLmdlby5jb25pY0NvbmZvcm1hbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fY29uaWMoZDNfZ2VvX2NvbmljQ29uZm9ybWFsKTtcbiAgfSkucmF3ID0gZDNfZ2VvX2NvbmljQ29uZm9ybWFsO1xuICBmdW5jdGlvbiBkM19nZW9fY29uaWNFcXVpZGlzdGFudCjPhjAsIM+GMSkge1xuICAgIHZhciBjb3PPhjAgPSBNYXRoLmNvcyjPhjApLCBuID0gz4YwID09PSDPhjEgPyBNYXRoLnNpbijPhjApIDogKGNvc8+GMCAtIE1hdGguY29zKM+GMSkpIC8gKM+GMSAtIM+GMCksIEcgPSBjb3PPhjAgLyBuICsgz4YwO1xuICAgIGlmIChhYnMobikgPCDOtSkgcmV0dXJuIGQzX2dlb19lcXVpcmVjdGFuZ3VsYXI7XG4gICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcbiAgICAgIHZhciDPgSA9IEcgLSDPhjtcbiAgICAgIHJldHVybiBbIM+BICogTWF0aC5zaW4obiAqIM67KSwgRyAtIM+BICogTWF0aC5jb3MobiAqIM67KSBdO1xuICAgIH1cbiAgICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciDPgTBfeSA9IEcgLSB5O1xuICAgICAgcmV0dXJuIFsgTWF0aC5hdGFuMih4LCDPgTBfeSkgLyBuLCBHIC0gZDNfc2duKG4pICogTWF0aC5zcXJ0KHggKiB4ICsgz4EwX3kgKiDPgTBfeSkgXTtcbiAgICB9O1xuICAgIHJldHVybiBmb3J3YXJkO1xuICB9XG4gIChkMy5nZW8uY29uaWNFcXVpZGlzdGFudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fY29uaWMoZDNfZ2VvX2NvbmljRXF1aWRpc3RhbnQpO1xuICB9KS5yYXcgPSBkM19nZW9fY29uaWNFcXVpZGlzdGFudDtcbiAgdmFyIGQzX2dlb19nbm9tb25pYyA9IGQzX2dlb19hemltdXRoYWwoZnVuY3Rpb24oY29zzrtjb3PPhikge1xuICAgIHJldHVybiAxIC8gY29zzrtjb3PPhjtcbiAgfSwgTWF0aC5hdGFuKTtcbiAgKGQzLmdlby5nbm9tb25pYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fZ25vbW9uaWMpO1xuICB9KS5yYXcgPSBkM19nZW9fZ25vbW9uaWM7XG4gIGZ1bmN0aW9uIGQzX2dlb19tZXJjYXRvcijOuywgz4YpIHtcbiAgICByZXR1cm4gWyDOuywgTWF0aC5sb2coTWF0aC50YW4oz4AgLyA0ICsgz4YgLyAyKSkgXTtcbiAgfVxuICBkM19nZW9fbWVyY2F0b3IuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbIHgsIDIgKiBNYXRoLmF0YW4oTWF0aC5leHAoeSkpIC0gaGFsZs+AIF07XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19tZXJjYXRvclByb2plY3Rpb24ocHJvamVjdCkge1xuICAgIHZhciBtID0gZDNfZ2VvX3Byb2plY3Rpb24ocHJvamVjdCksIHNjYWxlID0gbS5zY2FsZSwgdHJhbnNsYXRlID0gbS50cmFuc2xhdGUsIGNsaXBFeHRlbnQgPSBtLmNsaXBFeHRlbnQsIGNsaXBBdXRvO1xuICAgIG0uc2NhbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gc2NhbGUuYXBwbHkobSwgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB2ID09PSBtID8gY2xpcEF1dG8gPyBtLmNsaXBFeHRlbnQobnVsbCkgOiBtIDogdjtcbiAgICB9O1xuICAgIG0udHJhbnNsYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdiA9IHRyYW5zbGF0ZS5hcHBseShtLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHYgPT09IG0gPyBjbGlwQXV0byA/IG0uY2xpcEV4dGVudChudWxsKSA6IG0gOiB2O1xuICAgIH07XG4gICAgbS5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgdmFyIHYgPSBjbGlwRXh0ZW50LmFwcGx5KG0sIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodiA9PT0gbSkge1xuICAgICAgICBpZiAoY2xpcEF1dG8gPSBfID09IG51bGwpIHtcbiAgICAgICAgICB2YXIgayA9IM+AICogc2NhbGUoKSwgdCA9IHRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGNsaXBFeHRlbnQoWyBbIHRbMF0gLSBrLCB0WzFdIC0gayBdLCBbIHRbMF0gKyBrLCB0WzFdICsgayBdIF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNsaXBBdXRvKSB7XG4gICAgICAgIHYgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHY7XG4gICAgfTtcbiAgICByZXR1cm4gbS5jbGlwRXh0ZW50KG51bGwpO1xuICB9XG4gIChkMy5nZW8ubWVyY2F0b3IgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX21lcmNhdG9yUHJvamVjdGlvbihkM19nZW9fbWVyY2F0b3IpO1xuICB9KS5yYXcgPSBkM19nZW9fbWVyY2F0b3I7XG4gIHZhciBkM19nZW9fb3J0aG9ncmFwaGljID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gMTtcbiAgfSwgTWF0aC5hc2luKTtcbiAgKGQzLmdlby5vcnRob2dyYXBoaWMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX29ydGhvZ3JhcGhpYyk7XG4gIH0pLnJhdyA9IGQzX2dlb19vcnRob2dyYXBoaWM7XG4gIHZhciBkM19nZW9fc3RlcmVvZ3JhcGhpYyA9IGQzX2dlb19hemltdXRoYWwoZnVuY3Rpb24oY29zzrtjb3PPhikge1xuICAgIHJldHVybiAxIC8gKDEgKyBjb3POu2Nvc8+GKTtcbiAgfSwgZnVuY3Rpb24oz4EpIHtcbiAgICByZXR1cm4gMiAqIE1hdGguYXRhbijPgSk7XG4gIH0pO1xuICAoZDMuZ2VvLnN0ZXJlb2dyYXBoaWMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX3N0ZXJlb2dyYXBoaWMpO1xuICB9KS5yYXcgPSBkM19nZW9fc3RlcmVvZ3JhcGhpYztcbiAgZnVuY3Rpb24gZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvcijOuywgz4YpIHtcbiAgICByZXR1cm4gWyBNYXRoLmxvZyhNYXRoLnRhbijPgCAvIDQgKyDPhiAvIDIpKSwgLc67IF07XG4gIH1cbiAgZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvci5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFsgLXksIDIgKiBNYXRoLmF0YW4oTWF0aC5leHAoeCkpIC0gaGFsZs+AIF07XG4gIH07XG4gIChkMy5nZW8udHJhbnN2ZXJzZU1lcmNhdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByb2plY3Rpb24gPSBkM19nZW9fbWVyY2F0b3JQcm9qZWN0aW9uKGQzX2dlb190cmFuc3ZlcnNlTWVyY2F0b3IpLCBjZW50ZXIgPSBwcm9qZWN0aW9uLmNlbnRlciwgcm90YXRlID0gcHJvamVjdGlvbi5yb3RhdGU7XG4gICAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gXyA/IGNlbnRlcihbIC1fWzFdLCBfWzBdIF0pIDogKF8gPSBjZW50ZXIoKSwgWyBfWzFdLCAtX1swXSBdKTtcbiAgICB9O1xuICAgIHByb2plY3Rpb24ucm90YXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIF8gPyByb3RhdGUoWyBfWzBdLCBfWzFdLCBfLmxlbmd0aCA+IDIgPyBfWzJdICsgOTAgOiA5MCBdKSA6IChfID0gcm90YXRlKCksIFxuICAgICAgWyBfWzBdLCBfWzFdLCBfWzJdIC0gOTAgXSk7XG4gICAgfTtcbiAgICByZXR1cm4gcm90YXRlKFsgMCwgMCwgOTAgXSk7XG4gIH0pLnJhdyA9IGQzX2dlb190cmFuc3ZlcnNlTWVyY2F0b3I7XG4gIGQzLmdlb20gPSB7fTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV9wb2ludFgoZCkge1xuICAgIHJldHVybiBkWzBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fcG9pbnRZKGQpIHtcbiAgICByZXR1cm4gZFsxXTtcbiAgfVxuICBkMy5nZW9tLmh1bGwgPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgIHZhciB4ID0gZDNfZ2VvbV9wb2ludFgsIHkgPSBkM19nZW9tX3BvaW50WTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGh1bGwodmVydGljZXMpO1xuICAgIGZ1bmN0aW9uIGh1bGwoZGF0YSkge1xuICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgMykgcmV0dXJuIFtdO1xuICAgICAgdmFyIGZ4ID0gZDNfZnVuY3Rvcih4KSwgZnkgPSBkM19mdW5jdG9yKHkpLCBpLCBuID0gZGF0YS5sZW5ndGgsIHBvaW50cyA9IFtdLCBmbGlwcGVkUG9pbnRzID0gW107XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHBvaW50cy5wdXNoKFsgK2Z4LmNhbGwodGhpcywgZGF0YVtpXSwgaSksICtmeS5jYWxsKHRoaXMsIGRhdGFbaV0sIGkpLCBpIF0pO1xuICAgICAgfVxuICAgICAgcG9pbnRzLnNvcnQoZDNfZ2VvbV9odWxsT3JkZXIpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykgZmxpcHBlZFBvaW50cy5wdXNoKFsgcG9pbnRzW2ldWzBdLCAtcG9pbnRzW2ldWzFdIF0pO1xuICAgICAgdmFyIHVwcGVyID0gZDNfZ2VvbV9odWxsVXBwZXIocG9pbnRzKSwgbG93ZXIgPSBkM19nZW9tX2h1bGxVcHBlcihmbGlwcGVkUG9pbnRzKTtcbiAgICAgIHZhciBza2lwTGVmdCA9IGxvd2VyWzBdID09PSB1cHBlclswXSwgc2tpcFJpZ2h0ID0gbG93ZXJbbG93ZXIubGVuZ3RoIC0gMV0gPT09IHVwcGVyW3VwcGVyLmxlbmd0aCAtIDFdLCBwb2x5Z29uID0gW107XG4gICAgICBmb3IgKGkgPSB1cHBlci5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgcG9seWdvbi5wdXNoKGRhdGFbcG9pbnRzW3VwcGVyW2ldXVsyXV0pO1xuICAgICAgZm9yIChpID0gK3NraXBMZWZ0OyBpIDwgbG93ZXIubGVuZ3RoIC0gc2tpcFJpZ2h0OyArK2kpIHBvbHlnb24ucHVzaChkYXRhW3BvaW50c1tsb3dlcltpXV1bMl1dKTtcbiAgICAgIHJldHVybiBwb2x5Z29uO1xuICAgIH1cbiAgICBodWxsLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gXywgaHVsbCkgOiB4O1xuICAgIH07XG4gICAgaHVsbC55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IF8sIGh1bGwpIDogeTtcbiAgICB9O1xuICAgIHJldHVybiBodWxsO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9tX2h1bGxVcHBlcihwb2ludHMpIHtcbiAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGgsIGh1bGwgPSBbIDAsIDEgXSwgaHMgPSAyO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgbjsgaSsrKSB7XG4gICAgICB3aGlsZSAoaHMgPiAxICYmIGQzX2Nyb3NzMmQocG9pbnRzW2h1bGxbaHMgLSAyXV0sIHBvaW50c1todWxsW2hzIC0gMV1dLCBwb2ludHNbaV0pIDw9IDApIC0taHM7XG4gICAgICBodWxsW2hzKytdID0gaTtcbiAgICB9XG4gICAgcmV0dXJuIGh1bGwuc2xpY2UoMCwgaHMpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21faHVsbE9yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV07XG4gIH1cbiAgZDMuZ2VvbS5wb2x5Z29uID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICBkM19zdWJjbGFzcyhjb29yZGluYXRlcywgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlKTtcbiAgICByZXR1cm4gY29vcmRpbmF0ZXM7XG4gIH07XG4gIHZhciBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUgPSBkMy5nZW9tLnBvbHlnb24ucHJvdG90eXBlID0gW107XG4gIGQzX2dlb21fcG9seWdvblByb3RvdHlwZS5hcmVhID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IHRoaXMubGVuZ3RoLCBhLCBiID0gdGhpc1tuIC0gMV0sIGFyZWEgPSAwO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSB0aGlzW2ldO1xuICAgICAgYXJlYSArPSBhWzFdICogYlswXSAtIGFbMF0gKiBiWzFdO1xuICAgIH1cbiAgICByZXR1cm4gYXJlYSAqIC41O1xuICB9O1xuICBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUuY2VudHJvaWQgPSBmdW5jdGlvbihrKSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IHRoaXMubGVuZ3RoLCB4ID0gMCwgeSA9IDAsIGEsIGIgPSB0aGlzW24gLSAxXSwgYztcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIGsgPSAtMSAvICg2ICogdGhpcy5hcmVhKCkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSB0aGlzW2ldO1xuICAgICAgYyA9IGFbMF0gKiBiWzFdIC0gYlswXSAqIGFbMV07XG4gICAgICB4ICs9IChhWzBdICsgYlswXSkgKiBjO1xuICAgICAgeSArPSAoYVsxXSArIGJbMV0pICogYztcbiAgICB9XG4gICAgcmV0dXJuIFsgeCAqIGssIHkgKiBrIF07XG4gIH07XG4gIGQzX2dlb21fcG9seWdvblByb3RvdHlwZS5jbGlwID0gZnVuY3Rpb24oc3ViamVjdCkge1xuICAgIHZhciBpbnB1dCwgY2xvc2VkID0gZDNfZ2VvbV9wb2x5Z29uQ2xvc2VkKHN1YmplY3QpLCBpID0gLTEsIG4gPSB0aGlzLmxlbmd0aCAtIGQzX2dlb21fcG9seWdvbkNsb3NlZCh0aGlzKSwgaiwgbSwgYSA9IHRoaXNbbiAtIDFdLCBiLCBjLCBkO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpbnB1dCA9IHN1YmplY3Quc2xpY2UoKTtcbiAgICAgIHN1YmplY3QubGVuZ3RoID0gMDtcbiAgICAgIGIgPSB0aGlzW2ldO1xuICAgICAgYyA9IGlucHV0WyhtID0gaW5wdXQubGVuZ3RoIC0gY2xvc2VkKSAtIDFdO1xuICAgICAgaiA9IC0xO1xuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgZCA9IGlucHV0W2pdO1xuICAgICAgICBpZiAoZDNfZ2VvbV9wb2x5Z29uSW5zaWRlKGQsIGEsIGIpKSB7XG4gICAgICAgICAgaWYgKCFkM19nZW9tX3BvbHlnb25JbnNpZGUoYywgYSwgYikpIHtcbiAgICAgICAgICAgIHN1YmplY3QucHVzaChkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QoYywgZCwgYSwgYikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdWJqZWN0LnB1c2goZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZDNfZ2VvbV9wb2x5Z29uSW5zaWRlKGMsIGEsIGIpKSB7XG4gICAgICAgICAgc3ViamVjdC5wdXNoKGQzX2dlb21fcG9seWdvbkludGVyc2VjdChjLCBkLCBhLCBiKSk7XG4gICAgICAgIH1cbiAgICAgICAgYyA9IGQ7XG4gICAgICB9XG4gICAgICBpZiAoY2xvc2VkKSBzdWJqZWN0LnB1c2goc3ViamVjdFswXSk7XG4gICAgICBhID0gYjtcbiAgICB9XG4gICAgcmV0dXJuIHN1YmplY3Q7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21fcG9seWdvbkluc2lkZShwLCBhLCBiKSB7XG4gICAgcmV0dXJuIChiWzBdIC0gYVswXSkgKiAocFsxXSAtIGFbMV0pIDwgKGJbMV0gLSBhWzFdKSAqIChwWzBdIC0gYVswXSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9wb2x5Z29uSW50ZXJzZWN0KGMsIGQsIGEsIGIpIHtcbiAgICB2YXIgeDEgPSBjWzBdLCB4MyA9IGFbMF0sIHgyMSA9IGRbMF0gLSB4MSwgeDQzID0gYlswXSAtIHgzLCB5MSA9IGNbMV0sIHkzID0gYVsxXSwgeTIxID0gZFsxXSAtIHkxLCB5NDMgPSBiWzFdIC0geTMsIHVhID0gKHg0MyAqICh5MSAtIHkzKSAtIHk0MyAqICh4MSAtIHgzKSkgLyAoeTQzICogeDIxIC0geDQzICogeTIxKTtcbiAgICByZXR1cm4gWyB4MSArIHVhICogeDIxLCB5MSArIHVhICogeTIxIF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9wb2x5Z29uQ2xvc2VkKGNvb3JkaW5hdGVzKSB7XG4gICAgdmFyIGEgPSBjb29yZGluYXRlc1swXSwgYiA9IGNvb3JkaW5hdGVzW2Nvb3JkaW5hdGVzLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiAhKGFbMF0gLSBiWzBdIHx8IGFbMV0gLSBiWzFdKTtcbiAgfVxuICB2YXIgZDNfZ2VvbV92b3Jvbm9pRWRnZXMsIGQzX2dlb21fdm9yb25vaUNlbGxzLCBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLCBkM19nZW9tX3Zvcm9ub2lCZWFjaFBvb2wgPSBbXSwgZDNfZ2VvbV92b3Jvbm9pRmlyc3RDaXJjbGUsIGQzX2dlb21fdm9yb25vaUNpcmNsZXMsIGQzX2dlb21fdm9yb25vaUNpcmNsZVBvb2wgPSBbXTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQmVhY2goKSB7XG4gICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tOb2RlKHRoaXMpO1xuICAgIHRoaXMuZWRnZSA9IHRoaXMuc2l0ZSA9IHRoaXMuY2lyY2xlID0gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDcmVhdGVCZWFjaChzaXRlKSB7XG4gICAgdmFyIGJlYWNoID0gZDNfZ2VvbV92b3Jvbm9pQmVhY2hQb29sLnBvcCgpIHx8IG5ldyBkM19nZW9tX3Zvcm9ub2lCZWFjaCgpO1xuICAgIGJlYWNoLnNpdGUgPSBzaXRlO1xuICAgIHJldHVybiBiZWFjaDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lEZXRhY2hCZWFjaChiZWFjaCkge1xuICAgIGQzX2dlb21fdm9yb25vaURldGFjaENpcmNsZShiZWFjaCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcy5yZW1vdmUoYmVhY2gpO1xuICAgIGQzX2dlb21fdm9yb25vaUJlYWNoUG9vbC5wdXNoKGJlYWNoKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUoYmVhY2gpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlbW92ZUJlYWNoKGJlYWNoKSB7XG4gICAgdmFyIGNpcmNsZSA9IGJlYWNoLmNpcmNsZSwgeCA9IGNpcmNsZS54LCB5ID0gY2lyY2xlLmN5LCB2ZXJ0ZXggPSB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeVxuICAgIH0sIHByZXZpb3VzID0gYmVhY2guUCwgbmV4dCA9IGJlYWNoLk4sIGRpc2FwcGVhcmluZyA9IFsgYmVhY2ggXTtcbiAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hCZWFjaChiZWFjaCk7XG4gICAgdmFyIGxBcmMgPSBwcmV2aW91cztcbiAgICB3aGlsZSAobEFyYy5jaXJjbGUgJiYgYWJzKHggLSBsQXJjLmNpcmNsZS54KSA8IM61ICYmIGFicyh5IC0gbEFyYy5jaXJjbGUuY3kpIDwgzrUpIHtcbiAgICAgIHByZXZpb3VzID0gbEFyYy5QO1xuICAgICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hCZWFjaChsQXJjKTtcbiAgICAgIGxBcmMgPSBwcmV2aW91cztcbiAgICB9XG4gICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIHZhciByQXJjID0gbmV4dDtcbiAgICB3aGlsZSAockFyYy5jaXJjbGUgJiYgYWJzKHggLSByQXJjLmNpcmNsZS54KSA8IM61ICYmIGFicyh5IC0gckFyYy5jaXJjbGUuY3kpIDwgzrUpIHtcbiAgICAgIG5leHQgPSByQXJjLk47XG4gICAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKHJBcmMpO1xuICAgICAgckFyYyA9IG5leHQ7XG4gICAgfVxuICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgIGQzX2dlb21fdm9yb25vaURldGFjaENpcmNsZShyQXJjKTtcbiAgICB2YXIgbkFyY3MgPSBkaXNhcHBlYXJpbmcubGVuZ3RoLCBpQXJjO1xuICAgIGZvciAoaUFyYyA9IDE7IGlBcmMgPCBuQXJjczsgKytpQXJjKSB7XG4gICAgICByQXJjID0gZGlzYXBwZWFyaW5nW2lBcmNdO1xuICAgICAgbEFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjIC0gMV07XG4gICAgICBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKHJBcmMuZWRnZSwgbEFyYy5zaXRlLCByQXJjLnNpdGUsIHZlcnRleCk7XG4gICAgfVxuICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbMF07XG4gICAgckFyYyA9IGRpc2FwcGVhcmluZ1tuQXJjcyAtIDFdO1xuICAgIHJBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShyQXJjKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lBZGRCZWFjaChzaXRlKSB7XG4gICAgdmFyIHggPSBzaXRlLngsIGRpcmVjdHJpeCA9IHNpdGUueSwgbEFyYywgckFyYywgZHhsLCBkeHIsIG5vZGUgPSBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLl87XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIGR4bCA9IGQzX2dlb21fdm9yb25vaUxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuICAgICAgaWYgKGR4bCA+IM61KSBub2RlID0gbm9kZS5MOyBlbHNlIHtcbiAgICAgICAgZHhyID0geCAtIGQzX2dlb21fdm9yb25vaVJpZ2h0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpO1xuICAgICAgICBpZiAoZHhyID4gzrUpIHtcbiAgICAgICAgICBpZiAoIW5vZGUuUikge1xuICAgICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZSA9IG5vZGUuUjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZHhsID4gLc61KSB7XG4gICAgICAgICAgICBsQXJjID0gbm9kZS5QO1xuICAgICAgICAgICAgckFyYyA9IG5vZGU7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeHIgPiAtzrUpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgICAgckFyYyA9IG5vZGUuTjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbEFyYyA9IHJBcmMgPSBub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgbmV3QXJjID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2goc2l0ZSk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcy5pbnNlcnQobEFyYywgbmV3QXJjKTtcbiAgICBpZiAoIWxBcmMgJiYgIXJBcmMpIHJldHVybjtcbiAgICBpZiAobEFyYyA9PT0gckFyYykge1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgICAgckFyYyA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUJlYWNoKGxBcmMuc2l0ZSk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLmluc2VydChuZXdBcmMsIHJBcmMpO1xuICAgICAgbmV3QXJjLmVkZ2UgPSByQXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKHJBcmMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXJBcmMpIHtcbiAgICAgIG5ld0FyYy5lZGdlID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGQzX2dlb21fdm9yb25vaURldGFjaENpcmNsZShyQXJjKTtcbiAgICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsIGF4ID0gbFNpdGUueCwgYXkgPSBsU2l0ZS55LCBieCA9IHNpdGUueCAtIGF4LCBieSA9IHNpdGUueSAtIGF5LCByU2l0ZSA9IHJBcmMuc2l0ZSwgY3ggPSByU2l0ZS54IC0gYXgsIGN5ID0gclNpdGUueSAtIGF5LCBkID0gMiAqIChieCAqIGN5IC0gYnkgKiBjeCksIGhiID0gYnggKiBieCArIGJ5ICogYnksIGhjID0gY3ggKiBjeCArIGN5ICogY3ksIHZlcnRleCA9IHtcbiAgICAgIHg6IChjeSAqIGhiIC0gYnkgKiBoYykgLyBkICsgYXgsXG4gICAgICB5OiAoYnggKiBoYyAtIGN4ICogaGIpIC8gZCArIGF5XG4gICAgfTtcbiAgICBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xuICAgIG5ld0FyYy5lZGdlID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsU2l0ZSwgc2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgICByQXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKHNpdGUsIHJTaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShsQXJjKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUockFyYyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pTGVmdEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgICB2YXIgc2l0ZSA9IGFyYy5zaXRlLCByZm9jeCA9IHNpdGUueCwgcmZvY3kgPSBzaXRlLnksIHBieTIgPSByZm9jeSAtIGRpcmVjdHJpeDtcbiAgICBpZiAoIXBieTIpIHJldHVybiByZm9jeDtcbiAgICB2YXIgbEFyYyA9IGFyYy5QO1xuICAgIGlmICghbEFyYykgcmV0dXJuIC1JbmZpbml0eTtcbiAgICBzaXRlID0gbEFyYy5zaXRlO1xuICAgIHZhciBsZm9jeCA9IHNpdGUueCwgbGZvY3kgPSBzaXRlLnksIHBsYnkyID0gbGZvY3kgLSBkaXJlY3RyaXg7XG4gICAgaWYgKCFwbGJ5MikgcmV0dXJuIGxmb2N4O1xuICAgIHZhciBobCA9IGxmb2N4IC0gcmZvY3gsIGFieTIgPSAxIC8gcGJ5MiAtIDEgLyBwbGJ5MiwgYiA9IGhsIC8gcGxieTI7XG4gICAgaWYgKGFieTIpIHJldHVybiAoLWIgKyBNYXRoLnNxcnQoYiAqIGIgLSAyICogYWJ5MiAqIChobCAqIGhsIC8gKC0yICogcGxieTIpIC0gbGZvY3kgKyBwbGJ5MiAvIDIgKyByZm9jeSAtIHBieTIgLyAyKSkpIC8gYWJ5MiArIHJmb2N4O1xuICAgIHJldHVybiAocmZvY3ggKyBsZm9jeCkgLyAyO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJpZ2h0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICAgIHZhciByQXJjID0gYXJjLk47XG4gICAgaWYgKHJBcmMpIHJldHVybiBkM19nZW9tX3Zvcm9ub2lMZWZ0QnJlYWtQb2ludChyQXJjLCBkaXJlY3RyaXgpO1xuICAgIHZhciBzaXRlID0gYXJjLnNpdGU7XG4gICAgcmV0dXJuIHNpdGUueSA9PT0gZGlyZWN0cml4ID8gc2l0ZS54IDogSW5maW5pdHk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2VsbChzaXRlKSB7XG4gICAgdGhpcy5zaXRlID0gc2l0ZTtcbiAgICB0aGlzLmVkZ2VzID0gW107XG4gIH1cbiAgZDNfZ2VvbV92b3Jvbm9pQ2VsbC5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoYWxmRWRnZXMgPSB0aGlzLmVkZ2VzLCBpSGFsZkVkZ2UgPSBoYWxmRWRnZXMubGVuZ3RoLCBlZGdlO1xuICAgIHdoaWxlIChpSGFsZkVkZ2UtLSkge1xuICAgICAgZWRnZSA9IGhhbGZFZGdlc1tpSGFsZkVkZ2VdLmVkZ2U7XG4gICAgICBpZiAoIWVkZ2UuYiB8fCAhZWRnZS5hKSBoYWxmRWRnZXMuc3BsaWNlKGlIYWxmRWRnZSwgMSk7XG4gICAgfVxuICAgIGhhbGZFZGdlcy5zb3J0KGQzX2dlb21fdm9yb25vaUhhbGZFZGdlT3JkZXIpO1xuICAgIHJldHVybiBoYWxmRWRnZXMubGVuZ3RoO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDbG9zZUNlbGxzKGV4dGVudCkge1xuICAgIHZhciB4MCA9IGV4dGVudFswXVswXSwgeDEgPSBleHRlbnRbMV1bMF0sIHkwID0gZXh0ZW50WzBdWzFdLCB5MSA9IGV4dGVudFsxXVsxXSwgeDIsIHkyLCB4MywgeTMsIGNlbGxzID0gZDNfZ2VvbV92b3Jvbm9pQ2VsbHMsIGlDZWxsID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBpSGFsZkVkZ2UsIGhhbGZFZGdlcywgbkhhbGZFZGdlcywgc3RhcnQsIGVuZDtcbiAgICB3aGlsZSAoaUNlbGwtLSkge1xuICAgICAgY2VsbCA9IGNlbGxzW2lDZWxsXTtcbiAgICAgIGlmICghY2VsbCB8fCAhY2VsbC5wcmVwYXJlKCkpIGNvbnRpbnVlO1xuICAgICAgaGFsZkVkZ2VzID0gY2VsbC5lZGdlcztcbiAgICAgIG5IYWxmRWRnZXMgPSBoYWxmRWRnZXMubGVuZ3RoO1xuICAgICAgaUhhbGZFZGdlID0gMDtcbiAgICAgIHdoaWxlIChpSGFsZkVkZ2UgPCBuSGFsZkVkZ2VzKSB7XG4gICAgICAgIGVuZCA9IGhhbGZFZGdlc1tpSGFsZkVkZ2VdLmVuZCgpLCB4MyA9IGVuZC54LCB5MyA9IGVuZC55O1xuICAgICAgICBzdGFydCA9IGhhbGZFZGdlc1srK2lIYWxmRWRnZSAlIG5IYWxmRWRnZXNdLnN0YXJ0KCksIHgyID0gc3RhcnQueCwgeTIgPSBzdGFydC55O1xuICAgICAgICBpZiAoYWJzKHgzIC0geDIpID4gzrUgfHwgYWJzKHkzIC0geTIpID4gzrUpIHtcbiAgICAgICAgICBoYWxmRWRnZXMuc3BsaWNlKGlIYWxmRWRnZSwgMCwgbmV3IGQzX2dlb21fdm9yb25vaUhhbGZFZGdlKGQzX2dlb21fdm9yb25vaUNyZWF0ZUJvcmRlckVkZ2UoY2VsbC5zaXRlLCBlbmQsIGFicyh4MyAtIHgwKSA8IM61ICYmIHkxIC0geTMgPiDOtSA/IHtcbiAgICAgICAgICAgIHg6IHgwLFxuICAgICAgICAgICAgeTogYWJzKHgyIC0geDApIDwgzrUgPyB5MiA6IHkxXG4gICAgICAgICAgfSA6IGFicyh5MyAtIHkxKSA8IM61ICYmIHgxIC0geDMgPiDOtSA/IHtcbiAgICAgICAgICAgIHg6IGFicyh5MiAtIHkxKSA8IM61ID8geDIgOiB4MSxcbiAgICAgICAgICAgIHk6IHkxXG4gICAgICAgICAgfSA6IGFicyh4MyAtIHgxKSA8IM61ICYmIHkzIC0geTAgPiDOtSA/IHtcbiAgICAgICAgICAgIHg6IHgxLFxuICAgICAgICAgICAgeTogYWJzKHgyIC0geDEpIDwgzrUgPyB5MiA6IHkwXG4gICAgICAgICAgfSA6IGFicyh5MyAtIHkwKSA8IM61ICYmIHgzIC0geDAgPiDOtSA/IHtcbiAgICAgICAgICAgIHg6IGFicyh5MiAtIHkwKSA8IM61ID8geDIgOiB4MCxcbiAgICAgICAgICAgIHk6IHkwXG4gICAgICAgICAgfSA6IG51bGwpLCBjZWxsLnNpdGUsIG51bGwpKTtcbiAgICAgICAgICArK25IYWxmRWRnZXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2VPcmRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGIuYW5nbGUgLSBhLmFuZ2xlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNpcmNsZSgpIHtcbiAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUodGhpcyk7XG4gICAgdGhpcy54ID0gdGhpcy55ID0gdGhpcy5hcmMgPSB0aGlzLnNpdGUgPSB0aGlzLmN5ID0gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUoYXJjKSB7XG4gICAgdmFyIGxBcmMgPSBhcmMuUCwgckFyYyA9IGFyYy5OO1xuICAgIGlmICghbEFyYyB8fCAhckFyYykgcmV0dXJuO1xuICAgIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSwgY1NpdGUgPSBhcmMuc2l0ZSwgclNpdGUgPSByQXJjLnNpdGU7XG4gICAgaWYgKGxTaXRlID09PSByU2l0ZSkgcmV0dXJuO1xuICAgIHZhciBieCA9IGNTaXRlLngsIGJ5ID0gY1NpdGUueSwgYXggPSBsU2l0ZS54IC0gYngsIGF5ID0gbFNpdGUueSAtIGJ5LCBjeCA9IHJTaXRlLnggLSBieCwgY3kgPSByU2l0ZS55IC0gYnk7XG4gICAgdmFyIGQgPSAyICogKGF4ICogY3kgLSBheSAqIGN4KTtcbiAgICBpZiAoZCA+PSAtzrUyKSByZXR1cm47XG4gICAgdmFyIGhhID0gYXggKiBheCArIGF5ICogYXksIGhjID0gY3ggKiBjeCArIGN5ICogY3ksIHggPSAoY3kgKiBoYSAtIGF5ICogaGMpIC8gZCwgeSA9IChheCAqIGhjIC0gY3ggKiBoYSkgLyBkLCBjeSA9IHkgKyBieTtcbiAgICB2YXIgY2lyY2xlID0gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlUG9vbC5wb3AoKSB8fCBuZXcgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlKCk7XG4gICAgY2lyY2xlLmFyYyA9IGFyYztcbiAgICBjaXJjbGUuc2l0ZSA9IGNTaXRlO1xuICAgIGNpcmNsZS54ID0geCArIGJ4O1xuICAgIGNpcmNsZS55ID0gY3kgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgY2lyY2xlLmN5ID0gY3k7XG4gICAgYXJjLmNpcmNsZSA9IGNpcmNsZTtcbiAgICB2YXIgYmVmb3JlID0gbnVsbCwgbm9kZSA9IGQzX2dlb21fdm9yb25vaUNpcmNsZXMuXztcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgaWYgKGNpcmNsZS55IDwgbm9kZS55IHx8IGNpcmNsZS55ID09PSBub2RlLnkgJiYgY2lyY2xlLnggPD0gbm9kZS54KSB7XG4gICAgICAgIGlmIChub2RlLkwpIG5vZGUgPSBub2RlLkw7IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IG5vZGUuUDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG5vZGUuUikgbm9kZSA9IG5vZGUuUjsgZWxzZSB7XG4gICAgICAgICAgYmVmb3JlID0gbm9kZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzLmluc2VydChiZWZvcmUsIGNpcmNsZSk7XG4gICAgaWYgKCFiZWZvcmUpIGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlID0gY2lyY2xlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaURldGFjaENpcmNsZShhcmMpIHtcbiAgICB2YXIgY2lyY2xlID0gYXJjLmNpcmNsZTtcbiAgICBpZiAoY2lyY2xlKSB7XG4gICAgICBpZiAoIWNpcmNsZS5QKSBkM19nZW9tX3Zvcm9ub2lGaXJzdENpcmNsZSA9IGNpcmNsZS5OO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcy5yZW1vdmUoY2lyY2xlKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZVBvb2wucHVzaChjaXJjbGUpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tOb2RlKGNpcmNsZSk7XG4gICAgICBhcmMuY2lyY2xlID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2xpcEVkZ2VzKGV4dGVudCkge1xuICAgIHZhciBlZGdlcyA9IGQzX2dlb21fdm9yb25vaUVkZ2VzLCBjbGlwID0gZDNfZ2VvbV9jbGlwTGluZShleHRlbnRbMF1bMF0sIGV4dGVudFswXVsxXSwgZXh0ZW50WzFdWzBdLCBleHRlbnRbMV1bMV0pLCBpID0gZWRnZXMubGVuZ3RoLCBlO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGUgPSBlZGdlc1tpXTtcbiAgICAgIGlmICghZDNfZ2VvbV92b3Jvbm9pQ29ubmVjdEVkZ2UoZSwgZXh0ZW50KSB8fCAhY2xpcChlKSB8fCBhYnMoZS5hLnggLSBlLmIueCkgPCDOtSAmJiBhYnMoZS5hLnkgLSBlLmIueSkgPCDOtSkge1xuICAgICAgICBlLmEgPSBlLmIgPSBudWxsO1xuICAgICAgICBlZGdlcy5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNvbm5lY3RFZGdlKGVkZ2UsIGV4dGVudCkge1xuICAgIHZhciB2YiA9IGVkZ2UuYjtcbiAgICBpZiAodmIpIHJldHVybiB0cnVlO1xuICAgIHZhciB2YSA9IGVkZ2UuYSwgeDAgPSBleHRlbnRbMF1bMF0sIHgxID0gZXh0ZW50WzFdWzBdLCB5MCA9IGV4dGVudFswXVsxXSwgeTEgPSBleHRlbnRbMV1bMV0sIGxTaXRlID0gZWRnZS5sLCByU2l0ZSA9IGVkZ2UuciwgbHggPSBsU2l0ZS54LCBseSA9IGxTaXRlLnksIHJ4ID0gclNpdGUueCwgcnkgPSByU2l0ZS55LCBmeCA9IChseCArIHJ4KSAvIDIsIGZ5ID0gKGx5ICsgcnkpIC8gMiwgZm0sIGZiO1xuICAgIGlmIChyeSA9PT0gbHkpIHtcbiAgICAgIGlmIChmeCA8IHgwIHx8IGZ4ID49IHgxKSByZXR1cm47XG4gICAgICBpZiAobHggPiByeCkge1xuICAgICAgICBpZiAoIXZhKSB2YSA9IHtcbiAgICAgICAgICB4OiBmeCxcbiAgICAgICAgICB5OiB5MFxuICAgICAgICB9OyBlbHNlIGlmICh2YS55ID49IHkxKSByZXR1cm47XG4gICAgICAgIHZiID0ge1xuICAgICAgICAgIHg6IGZ4LFxuICAgICAgICAgIHk6IHkxXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXZhKSB2YSA9IHtcbiAgICAgICAgICB4OiBmeCxcbiAgICAgICAgICB5OiB5MVxuICAgICAgICB9OyBlbHNlIGlmICh2YS55IDwgeTApIHJldHVybjtcbiAgICAgICAgdmIgPSB7XG4gICAgICAgICAgeDogZngsXG4gICAgICAgICAgeTogeTBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm0gPSAobHggLSByeCkgLyAocnkgLSBseSk7XG4gICAgICBmYiA9IGZ5IC0gZm0gKiBmeDtcbiAgICAgIGlmIChmbSA8IC0xIHx8IGZtID4gMSkge1xuICAgICAgICBpZiAobHggPiByeCkge1xuICAgICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgICAgeDogKHkwIC0gZmIpIC8gZm0sXG4gICAgICAgICAgICB5OiB5MFxuICAgICAgICAgIH07IGVsc2UgaWYgKHZhLnkgPj0geTEpIHJldHVybjtcbiAgICAgICAgICB2YiA9IHtcbiAgICAgICAgICAgIHg6ICh5MSAtIGZiKSAvIGZtLFxuICAgICAgICAgICAgeTogeTFcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgICAgeDogKHkxIC0gZmIpIC8gZm0sXG4gICAgICAgICAgICB5OiB5MVxuICAgICAgICAgIH07IGVsc2UgaWYgKHZhLnkgPCB5MCkgcmV0dXJuO1xuICAgICAgICAgIHZiID0ge1xuICAgICAgICAgICAgeDogKHkwIC0gZmIpIC8gZm0sXG4gICAgICAgICAgICB5OiB5MFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChseSA8IHJ5KSB7XG4gICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG4gICAgICAgICAgICB4OiB4MCxcbiAgICAgICAgICAgIHk6IGZtICogeDAgKyBmYlxuICAgICAgICAgIH07IGVsc2UgaWYgKHZhLnggPj0geDEpIHJldHVybjtcbiAgICAgICAgICB2YiA9IHtcbiAgICAgICAgICAgIHg6IHgxLFxuICAgICAgICAgICAgeTogZm0gKiB4MSArIGZiXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXZhKSB2YSA9IHtcbiAgICAgICAgICAgIHg6IHgxLFxuICAgICAgICAgICAgeTogZm0gKiB4MSArIGZiXG4gICAgICAgICAgfTsgZWxzZSBpZiAodmEueCA8IHgwKSByZXR1cm47XG4gICAgICAgICAgdmIgPSB7XG4gICAgICAgICAgICB4OiB4MCxcbiAgICAgICAgICAgIHk6IGZtICogeDAgKyBmYlxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWRnZS5hID0gdmE7XG4gICAgZWRnZS5iID0gdmI7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pRWRnZShsU2l0ZSwgclNpdGUpIHtcbiAgICB0aGlzLmwgPSBsU2l0ZTtcbiAgICB0aGlzLnIgPSByU2l0ZTtcbiAgICB0aGlzLmEgPSB0aGlzLmIgPSBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobFNpdGUsIHJTaXRlLCB2YSwgdmIpIHtcbiAgICB2YXIgZWRnZSA9IG5ldyBkM19nZW9tX3Zvcm9ub2lFZGdlKGxTaXRlLCByU2l0ZSk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRWRnZXMucHVzaChlZGdlKTtcbiAgICBpZiAodmEpIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQoZWRnZSwgbFNpdGUsIHJTaXRlLCB2YSk7XG4gICAgaWYgKHZiKSBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKGVkZ2UsIHJTaXRlLCBsU2l0ZSwgdmIpO1xuICAgIGQzX2dlb21fdm9yb25vaUNlbGxzW2xTaXRlLmldLmVkZ2VzLnB1c2gobmV3IGQzX2dlb21fdm9yb25vaUhhbGZFZGdlKGVkZ2UsIGxTaXRlLCByU2l0ZSkpO1xuICAgIGQzX2dlb21fdm9yb25vaUNlbGxzW3JTaXRlLmldLmVkZ2VzLnB1c2gobmV3IGQzX2dlb21fdm9yb25vaUhhbGZFZGdlKGVkZ2UsIHJTaXRlLCBsU2l0ZSkpO1xuICAgIHJldHVybiBlZGdlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNyZWF0ZUJvcmRlckVkZ2UobFNpdGUsIHZhLCB2Yikge1xuICAgIHZhciBlZGdlID0gbmV3IGQzX2dlb21fdm9yb25vaUVkZ2UobFNpdGUsIG51bGwpO1xuICAgIGVkZ2UuYSA9IHZhO1xuICAgIGVkZ2UuYiA9IHZiO1xuICAgIGQzX2dlb21fdm9yb25vaUVkZ2VzLnB1c2goZWRnZSk7XG4gICAgcmV0dXJuIGVkZ2U7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pU2V0RWRnZUVuZChlZGdlLCBsU2l0ZSwgclNpdGUsIHZlcnRleCkge1xuICAgIGlmICghZWRnZS5hICYmICFlZGdlLmIpIHtcbiAgICAgIGVkZ2UuYSA9IHZlcnRleDtcbiAgICAgIGVkZ2UubCA9IGxTaXRlO1xuICAgICAgZWRnZS5yID0gclNpdGU7XG4gICAgfSBlbHNlIGlmIChlZGdlLmwgPT09IHJTaXRlKSB7XG4gICAgICBlZGdlLmIgPSB2ZXJ0ZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVkZ2UuYSA9IHZlcnRleDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZWRnZSwgbFNpdGUsIHJTaXRlKSB7XG4gICAgdmFyIHZhID0gZWRnZS5hLCB2YiA9IGVkZ2UuYjtcbiAgICB0aGlzLmVkZ2UgPSBlZGdlO1xuICAgIHRoaXMuc2l0ZSA9IGxTaXRlO1xuICAgIHRoaXMuYW5nbGUgPSByU2l0ZSA/IE1hdGguYXRhbjIoclNpdGUueSAtIGxTaXRlLnksIHJTaXRlLnggLSBsU2l0ZS54KSA6IGVkZ2UubCA9PT0gbFNpdGUgPyBNYXRoLmF0YW4yKHZiLnggLSB2YS54LCB2YS55IC0gdmIueSkgOiBNYXRoLmF0YW4yKHZhLnggLSB2Yi54LCB2Yi55IC0gdmEueSk7XG4gIH1cbiAgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UucHJvdG90eXBlID0ge1xuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVkZ2UubCA9PT0gdGhpcy5zaXRlID8gdGhpcy5lZGdlLmEgOiB0aGlzLmVkZ2UuYjtcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5lZGdlLmwgPT09IHRoaXMuc2l0ZSA/IHRoaXMuZWRnZS5iIDogdGhpcy5lZGdlLmE7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUoKSB7XG4gICAgdGhpcy5fID0gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUobm9kZSkge1xuICAgIG5vZGUuVSA9IG5vZGUuQyA9IG5vZGUuTCA9IG5vZGUuUiA9IG5vZGUuUCA9IG5vZGUuTiA9IG51bGw7XG4gIH1cbiAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tUcmVlLnByb3RvdHlwZSA9IHtcbiAgICBpbnNlcnQ6IGZ1bmN0aW9uKGFmdGVyLCBub2RlKSB7XG4gICAgICB2YXIgcGFyZW50LCBncmFuZHBhLCB1bmNsZTtcbiAgICAgIGlmIChhZnRlcikge1xuICAgICAgICBub2RlLlAgPSBhZnRlcjtcbiAgICAgICAgbm9kZS5OID0gYWZ0ZXIuTjtcbiAgICAgICAgaWYgKGFmdGVyLk4pIGFmdGVyLk4uUCA9IG5vZGU7XG4gICAgICAgIGFmdGVyLk4gPSBub2RlO1xuICAgICAgICBpZiAoYWZ0ZXIuUikge1xuICAgICAgICAgIGFmdGVyID0gYWZ0ZXIuUjtcbiAgICAgICAgICB3aGlsZSAoYWZ0ZXIuTCkgYWZ0ZXIgPSBhZnRlci5MO1xuICAgICAgICAgIGFmdGVyLkwgPSBub2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFmdGVyLlIgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IGFmdGVyO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcbiAgICAgICAgYWZ0ZXIgPSBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja0ZpcnN0KHRoaXMuXyk7XG4gICAgICAgIG5vZGUuUCA9IG51bGw7XG4gICAgICAgIG5vZGUuTiA9IGFmdGVyO1xuICAgICAgICBhZnRlci5QID0gYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICAgIHBhcmVudCA9IGFmdGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgICAgICAgdGhpcy5fID0gbm9kZTtcbiAgICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIG5vZGUuTCA9IG5vZGUuUiA9IG51bGw7XG4gICAgICBub2RlLlUgPSBwYXJlbnQ7XG4gICAgICBub2RlLkMgPSB0cnVlO1xuICAgICAgYWZ0ZXIgPSBub2RlO1xuICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuQykge1xuICAgICAgICBncmFuZHBhID0gcGFyZW50LlU7XG4gICAgICAgIGlmIChwYXJlbnQgPT09IGdyYW5kcGEuTCkge1xuICAgICAgICAgIHVuY2xlID0gZ3JhbmRwYS5SO1xuICAgICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LlIpIHtcbiAgICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1bmNsZSA9IGdyYW5kcGEuTDtcbiAgICAgICAgICBpZiAodW5jbGUgJiYgdW5jbGUuQykge1xuICAgICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgYWZ0ZXIgPSBncmFuZHBhO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5MKSB7XG4gICAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBncmFuZHBhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgIH1cbiAgICAgIHRoaXMuXy5DID0gZmFsc2U7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLk4pIG5vZGUuTi5QID0gbm9kZS5QO1xuICAgICAgaWYgKG5vZGUuUCkgbm9kZS5QLk4gPSBub2RlLk47XG4gICAgICBub2RlLk4gPSBub2RlLlAgPSBudWxsO1xuICAgICAgdmFyIHBhcmVudCA9IG5vZGUuVSwgc2libGluZywgbGVmdCA9IG5vZGUuTCwgcmlnaHQgPSBub2RlLlIsIG5leHQsIHJlZDtcbiAgICAgIGlmICghbGVmdCkgbmV4dCA9IHJpZ2h0OyBlbHNlIGlmICghcmlnaHQpIG5leHQgPSBsZWZ0OyBlbHNlIG5leHQgPSBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja0ZpcnN0KHJpZ2h0KTtcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7IGVsc2UgcGFyZW50LlIgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICAgIH1cbiAgICAgIGlmIChsZWZ0ICYmIHJpZ2h0KSB7XG4gICAgICAgIHJlZCA9IG5leHQuQztcbiAgICAgICAgbmV4dC5DID0gbm9kZS5DO1xuICAgICAgICBuZXh0LkwgPSBsZWZ0O1xuICAgICAgICBsZWZ0LlUgPSBuZXh0O1xuICAgICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcbiAgICAgICAgICBwYXJlbnQgPSBuZXh0LlU7XG4gICAgICAgICAgbmV4dC5VID0gbm9kZS5VO1xuICAgICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgICAgcGFyZW50LkwgPSBub2RlO1xuICAgICAgICAgIG5leHQuUiA9IHJpZ2h0O1xuICAgICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQuVSA9IHBhcmVudDtcbiAgICAgICAgICBwYXJlbnQgPSBuZXh0O1xuICAgICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZCA9IG5vZGUuQztcbiAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICB9XG4gICAgICBpZiAobm9kZSkgbm9kZS5VID0gcGFyZW50O1xuICAgICAgaWYgKHJlZCkgcmV0dXJuO1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZS5DKSB7XG4gICAgICAgIG5vZGUuQyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLl8pIGJyZWFrO1xuICAgICAgICBpZiAobm9kZSA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQyB8fCBzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIGlmICghc2libGluZy5SIHx8ICFzaWJsaW5nLlIuQykge1xuICAgICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHNpYmxpbmcpO1xuICAgICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcbiAgICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaWJsaW5nLkwgJiYgc2libGluZy5MLkMgfHwgc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICBpZiAoIXNpYmxpbmcuTCB8fCAhc2libGluZy5MLkMpIHtcbiAgICAgICAgICAgICAgc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHNpYmxpbmcpO1xuICAgICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcbiAgICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LlU7XG4gICAgICB9IHdoaWxlICghbm9kZS5DKTtcbiAgICAgIGlmIChub2RlKSBub2RlLkMgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlTGVmdCh0cmVlLCBub2RlKSB7XG4gICAgdmFyIHAgPSBub2RlLCBxID0gbm9kZS5SLCBwYXJlbnQgPSBwLlU7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7IGVsc2UgcGFyZW50LlIgPSBxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlLl8gPSBxO1xuICAgIH1cbiAgICBxLlUgPSBwYXJlbnQ7XG4gICAgcC5VID0gcTtcbiAgICBwLlIgPSBxLkw7XG4gICAgaWYgKHAuUikgcC5SLlUgPSBwO1xuICAgIHEuTCA9IHA7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0cmVlLCBub2RlKSB7XG4gICAgdmFyIHAgPSBub2RlLCBxID0gbm9kZS5MLCBwYXJlbnQgPSBwLlU7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7IGVsc2UgcGFyZW50LlIgPSBxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlLl8gPSBxO1xuICAgIH1cbiAgICBxLlUgPSBwYXJlbnQ7XG4gICAgcC5VID0gcTtcbiAgICBwLkwgPSBxLlI7XG4gICAgaWYgKHAuTCkgcC5MLlUgPSBwO1xuICAgIHEuUiA9IHA7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tGaXJzdChub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2koc2l0ZXMsIGJib3gpIHtcbiAgICB2YXIgc2l0ZSA9IHNpdGVzLnNvcnQoZDNfZ2VvbV92b3Jvbm9pVmVydGV4T3JkZXIpLnBvcCgpLCB4MCwgeTAsIGNpcmNsZTtcbiAgICBkM19nZW9tX3Zvcm9ub2lFZGdlcyA9IFtdO1xuICAgIGQzX2dlb21fdm9yb25vaUNlbGxzID0gbmV3IEFycmF5KHNpdGVzLmxlbmd0aCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcyA9IG5ldyBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUoKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzID0gbmV3IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjaXJjbGUgPSBkM19nZW9tX3Zvcm9ub2lGaXJzdENpcmNsZTtcbiAgICAgIGlmIChzaXRlICYmICghY2lyY2xlIHx8IHNpdGUueSA8IGNpcmNsZS55IHx8IHNpdGUueSA9PT0gY2lyY2xlLnkgJiYgc2l0ZS54IDwgY2lyY2xlLngpKSB7XG4gICAgICAgIGlmIChzaXRlLnggIT09IHgwIHx8IHNpdGUueSAhPT0geTApIHtcbiAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lDZWxsc1tzaXRlLmldID0gbmV3IGQzX2dlb21fdm9yb25vaUNlbGwoc2l0ZSk7XG4gICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pQWRkQmVhY2goc2l0ZSk7XG4gICAgICAgICAgeDAgPSBzaXRlLngsIHkwID0gc2l0ZS55O1xuICAgICAgICB9XG4gICAgICAgIHNpdGUgPSBzaXRlcy5wb3AoKTtcbiAgICAgIH0gZWxzZSBpZiAoY2lyY2xlKSB7XG4gICAgICAgIGQzX2dlb21fdm9yb25vaVJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChiYm94KSBkM19nZW9tX3Zvcm9ub2lDbGlwRWRnZXMoYmJveCksIGQzX2dlb21fdm9yb25vaUNsb3NlQ2VsbHMoYmJveCk7XG4gICAgdmFyIGRpYWdyYW0gPSB7XG4gICAgICBjZWxsczogZDNfZ2VvbV92b3Jvbm9pQ2VsbHMsXG4gICAgICBlZGdlczogZDNfZ2VvbV92b3Jvbm9pRWRnZXNcbiAgICB9O1xuICAgIGQzX2dlb21fdm9yb25vaUJlYWNoZXMgPSBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzID0gZDNfZ2VvbV92b3Jvbm9pRWRnZXMgPSBkM19nZW9tX3Zvcm9ub2lDZWxscyA9IG51bGw7XG4gICAgcmV0dXJuIGRpYWdyYW07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pVmVydGV4T3JkZXIoYSwgYikge1xuICAgIHJldHVybiBiLnkgLSBhLnkgfHwgYi54IC0gYS54O1xuICB9XG4gIGQzLmdlb20udm9yb25vaSA9IGZ1bmN0aW9uKHBvaW50cykge1xuICAgIHZhciB4ID0gZDNfZ2VvbV9wb2ludFgsIHkgPSBkM19nZW9tX3BvaW50WSwgZnggPSB4LCBmeSA9IHksIGNsaXBFeHRlbnQgPSBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50O1xuICAgIGlmIChwb2ludHMpIHJldHVybiB2b3Jvbm9pKHBvaW50cyk7XG4gICAgZnVuY3Rpb24gdm9yb25vaShkYXRhKSB7XG4gICAgICB2YXIgcG9seWdvbnMgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpLCB4MCA9IGNsaXBFeHRlbnRbMF1bMF0sIHkwID0gY2xpcEV4dGVudFswXVsxXSwgeDEgPSBjbGlwRXh0ZW50WzFdWzBdLCB5MSA9IGNsaXBFeHRlbnRbMV1bMV07XG4gICAgICBkM19nZW9tX3Zvcm9ub2koc2l0ZXMoZGF0YSksIGNsaXBFeHRlbnQpLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCwgaSkge1xuICAgICAgICB2YXIgZWRnZXMgPSBjZWxsLmVkZ2VzLCBzaXRlID0gY2VsbC5zaXRlLCBwb2x5Z29uID0gcG9seWdvbnNbaV0gPSBlZGdlcy5sZW5ndGggPyBlZGdlcy5tYXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHZhciBzID0gZS5zdGFydCgpO1xuICAgICAgICAgIHJldHVybiBbIHMueCwgcy55IF07XG4gICAgICAgIH0pIDogc2l0ZS54ID49IHgwICYmIHNpdGUueCA8PSB4MSAmJiBzaXRlLnkgPj0geTAgJiYgc2l0ZS55IDw9IHkxID8gWyBbIHgwLCB5MSBdLCBbIHgxLCB5MSBdLCBbIHgxLCB5MCBdLCBbIHgwLCB5MCBdIF0gOiBbXTtcbiAgICAgICAgcG9seWdvbi5wb2ludCA9IGRhdGFbaV07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwb2x5Z29ucztcbiAgICB9XG4gICAgZnVuY3Rpb24gc2l0ZXMoZGF0YSkge1xuICAgICAgcmV0dXJuIGRhdGEubWFwKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiBNYXRoLnJvdW5kKGZ4KGQsIGkpIC8gzrUpICogzrUsXG4gICAgICAgICAgeTogTWF0aC5yb3VuZChmeShkLCBpKSAvIM61KSAqIM61LFxuICAgICAgICAgIGk6IGlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2b3Jvbm9pLmxpbmtzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIGQzX2dlb21fdm9yb25vaShzaXRlcyhkYXRhKSkuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgICAgcmV0dXJuIGVkZ2UubCAmJiBlZGdlLnI7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogZGF0YVtlZGdlLmwuaV0sXG4gICAgICAgICAgdGFyZ2V0OiBkYXRhW2VkZ2Uuci5pXVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcbiAgICB2b3Jvbm9pLnRyaWFuZ2xlcyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciB0cmlhbmdsZXMgPSBbXTtcbiAgICAgIGQzX2dlb21fdm9yb25vaShzaXRlcyhkYXRhKSkuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLCBlZGdlcyA9IGNlbGwuZWRnZXMuc29ydChkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZU9yZGVyKSwgaiA9IC0xLCBtID0gZWRnZXMubGVuZ3RoLCBlMCwgczAsIGUxID0gZWRnZXNbbSAtIDFdLmVkZ2UsIHMxID0gZTEubCA9PT0gc2l0ZSA/IGUxLnIgOiBlMS5sO1xuICAgICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICAgIGUwID0gZTE7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICBlMSA9IGVkZ2VzW2pdLmVkZ2U7XG4gICAgICAgICAgczEgPSBlMS5sID09PSBzaXRlID8gZTEuciA6IGUxLmw7XG4gICAgICAgICAgaWYgKGkgPCBzMC5pICYmIGkgPCBzMS5pICYmIGQzX2dlb21fdm9yb25vaVRyaWFuZ2xlQXJlYShzaXRlLCBzMCwgczEpIDwgMCkge1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goWyBkYXRhW2ldLCBkYXRhW3MwLmldLCBkYXRhW3MxLmldIF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJpYW5nbGVzO1xuICAgIH07XG4gICAgdm9yb25vaS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZnggPSBkM19mdW5jdG9yKHggPSBfKSwgdm9yb25vaSkgOiB4O1xuICAgIH07XG4gICAgdm9yb25vaS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZnkgPSBkM19mdW5jdG9yKHkgPSBfKSwgdm9yb25vaSkgOiB5O1xuICAgIH07XG4gICAgdm9yb25vaS5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xpcEV4dGVudCA9PT0gZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudCA/IG51bGwgOiBjbGlwRXh0ZW50O1xuICAgICAgY2xpcEV4dGVudCA9IF8gPT0gbnVsbCA/IGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQgOiBfO1xuICAgICAgcmV0dXJuIHZvcm9ub2k7XG4gICAgfTtcbiAgICB2b3Jvbm9pLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwRXh0ZW50ID09PSBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50ID8gbnVsbCA6IGNsaXBFeHRlbnQgJiYgY2xpcEV4dGVudFsxXTtcbiAgICAgIHJldHVybiB2b3Jvbm9pLmNsaXBFeHRlbnQoXyAmJiBbIFsgMCwgMCBdLCBfIF0pO1xuICAgIH07XG4gICAgcmV0dXJuIHZvcm9ub2k7XG4gIH07XG4gIHZhciBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50ID0gWyBbIC0xZTYsIC0xZTYgXSwgWyAxZTYsIDFlNiBdIF07XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVRyaWFuZ2xlQXJlYShhLCBiLCBjKSB7XG4gICAgcmV0dXJuIChhLnggLSBjLngpICogKGIueSAtIGEueSkgLSAoYS54IC0gYi54KSAqIChjLnkgLSBhLnkpO1xuICB9XG4gIGQzLmdlb20uZGVsYXVuYXkgPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgIHJldHVybiBkMy5nZW9tLnZvcm9ub2koKS50cmlhbmdsZXModmVydGljZXMpO1xuICB9O1xuICBkMy5nZW9tLnF1YWR0cmVlID0gZnVuY3Rpb24ocG9pbnRzLCB4MSwgeTEsIHgyLCB5Mikge1xuICAgIHZhciB4ID0gZDNfZ2VvbV9wb2ludFgsIHkgPSBkM19nZW9tX3BvaW50WSwgY29tcGF0O1xuICAgIGlmIChjb21wYXQgPSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB4ID0gZDNfZ2VvbV9xdWFkdHJlZUNvbXBhdFg7XG4gICAgICB5ID0gZDNfZ2VvbV9xdWFkdHJlZUNvbXBhdFk7XG4gICAgICBpZiAoY29tcGF0ID09PSAzKSB7XG4gICAgICAgIHkyID0geTE7XG4gICAgICAgIHgyID0geDE7XG4gICAgICAgIHkxID0geDEgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHF1YWR0cmVlKHBvaW50cyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHF1YWR0cmVlKGRhdGEpIHtcbiAgICAgIHZhciBkLCBmeCA9IGQzX2Z1bmN0b3IoeCksIGZ5ID0gZDNfZnVuY3Rvcih5KSwgeHMsIHlzLCBpLCBuLCB4MV8sIHkxXywgeDJfLCB5Ml87XG4gICAgICBpZiAoeDEgIT0gbnVsbCkge1xuICAgICAgICB4MV8gPSB4MSwgeTFfID0geTEsIHgyXyA9IHgyLCB5Ml8gPSB5MjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHgyXyA9IHkyXyA9IC0oeDFfID0geTFfID0gSW5maW5pdHkpO1xuICAgICAgICB4cyA9IFtdLCB5cyA9IFtdO1xuICAgICAgICBuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGlmIChjb21wYXQpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBkID0gZGF0YVtpXTtcbiAgICAgICAgICBpZiAoZC54IDwgeDFfKSB4MV8gPSBkLng7XG4gICAgICAgICAgaWYgKGQueSA8IHkxXykgeTFfID0gZC55O1xuICAgICAgICAgIGlmIChkLnggPiB4Ml8pIHgyXyA9IGQueDtcbiAgICAgICAgICBpZiAoZC55ID4geTJfKSB5Ml8gPSBkLnk7XG4gICAgICAgICAgeHMucHVzaChkLngpO1xuICAgICAgICAgIHlzLnB1c2goZC55KTtcbiAgICAgICAgfSBlbHNlIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICB2YXIgeF8gPSArZngoZCA9IGRhdGFbaV0sIGkpLCB5XyA9ICtmeShkLCBpKTtcbiAgICAgICAgICBpZiAoeF8gPCB4MV8pIHgxXyA9IHhfO1xuICAgICAgICAgIGlmICh5XyA8IHkxXykgeTFfID0geV87XG4gICAgICAgICAgaWYgKHhfID4geDJfKSB4Ml8gPSB4XztcbiAgICAgICAgICBpZiAoeV8gPiB5Ml8pIHkyXyA9IHlfO1xuICAgICAgICAgIHhzLnB1c2goeF8pO1xuICAgICAgICAgIHlzLnB1c2goeV8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgZHggPSB4Ml8gLSB4MV8sIGR5ID0geTJfIC0geTFfO1xuICAgICAgaWYgKGR4ID4gZHkpIHkyXyA9IHkxXyArIGR4OyBlbHNlIHgyXyA9IHgxXyArIGR5O1xuICAgICAgZnVuY3Rpb24gaW5zZXJ0KG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgIGlmIChpc05hTih4KSB8fCBpc05hTih5KSkgcmV0dXJuO1xuICAgICAgICBpZiAobi5sZWFmKSB7XG4gICAgICAgICAgdmFyIG54ID0gbi54LCBueSA9IG4ueTtcbiAgICAgICAgICBpZiAobnggIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGFicyhueCAtIHgpICsgYWJzKG55IC0geSkgPCAuMDEpIHtcbiAgICAgICAgICAgICAgaW5zZXJ0Q2hpbGQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIG5Qb2ludCA9IG4ucG9pbnQ7XG4gICAgICAgICAgICAgIG4ueCA9IG4ueSA9IG4ucG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgICBpbnNlcnRDaGlsZChuLCBuUG9pbnQsIG54LCBueSwgeDEsIHkxLCB4MiwgeTIpO1xuICAgICAgICAgICAgICBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG4ueCA9IHgsIG4ueSA9IHksIG4ucG9pbnQgPSBkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGluc2VydENoaWxkKG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgIHZhciB4bSA9ICh4MSArIHgyKSAqIC41LCB5bSA9ICh5MSArIHkyKSAqIC41LCByaWdodCA9IHggPj0geG0sIGJlbG93ID0geSA+PSB5bSwgaSA9IGJlbG93IDw8IDEgfCByaWdodDtcbiAgICAgICAgbi5sZWFmID0gZmFsc2U7XG4gICAgICAgIG4gPSBuLm5vZGVzW2ldIHx8IChuLm5vZGVzW2ldID0gZDNfZ2VvbV9xdWFkdHJlZU5vZGUoKSk7XG4gICAgICAgIGlmIChyaWdodCkgeDEgPSB4bTsgZWxzZSB4MiA9IHhtO1xuICAgICAgICBpZiAoYmVsb3cpIHkxID0geW07IGVsc2UgeTIgPSB5bTtcbiAgICAgICAgaW5zZXJ0KG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgIH1cbiAgICAgIHZhciByb290ID0gZDNfZ2VvbV9xdWFkdHJlZU5vZGUoKTtcbiAgICAgIHJvb3QuYWRkID0gZnVuY3Rpb24oZCkge1xuICAgICAgICBpbnNlcnQocm9vdCwgZCwgK2Z4KGQsICsraSksICtmeShkLCBpKSwgeDFfLCB5MV8sIHgyXywgeTJfKTtcbiAgICAgIH07XG4gICAgICByb290LnZpc2l0ID0gZnVuY3Rpb24oZikge1xuICAgICAgICBkM19nZW9tX3F1YWR0cmVlVmlzaXQoZiwgcm9vdCwgeDFfLCB5MV8sIHgyXywgeTJfKTtcbiAgICAgIH07XG4gICAgICByb290LmZpbmQgPSBmdW5jdGlvbihwb2ludCkge1xuICAgICAgICByZXR1cm4gZDNfZ2VvbV9xdWFkdHJlZUZpbmQocm9vdCwgcG9pbnRbMF0sIHBvaW50WzFdLCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgfTtcbiAgICAgIGkgPSAtMTtcbiAgICAgIGlmICh4MSA9PSBudWxsKSB7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgaW5zZXJ0KHJvb3QsIGRhdGFbaV0sIHhzW2ldLCB5c1tpXSwgeDFfLCB5MV8sIHgyXywgeTJfKTtcbiAgICAgICAgfVxuICAgICAgICAtLWk7XG4gICAgICB9IGVsc2UgZGF0YS5mb3JFYWNoKHJvb3QuYWRkKTtcbiAgICAgIHhzID0geXMgPSBkYXRhID0gZCA9IG51bGw7XG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG4gICAgcXVhZHRyZWUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSBfLCBxdWFkdHJlZSkgOiB4O1xuICAgIH07XG4gICAgcXVhZHRyZWUueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSBfLCBxdWFkdHJlZSkgOiB5O1xuICAgIH07XG4gICAgcXVhZHRyZWUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDEgPT0gbnVsbCA/IG51bGwgOiBbIFsgeDEsIHkxIF0sIFsgeDIsIHkyIF0gXTtcbiAgICAgIGlmIChfID09IG51bGwpIHgxID0geTEgPSB4MiA9IHkyID0gbnVsbDsgZWxzZSB4MSA9ICtfWzBdWzBdLCB5MSA9ICtfWzBdWzFdLCB4MiA9ICtfWzFdWzBdLCBcbiAgICAgIHkyID0gK19bMV1bMV07XG4gICAgICByZXR1cm4gcXVhZHRyZWU7XG4gICAgfTtcbiAgICBxdWFkdHJlZS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDEgPT0gbnVsbCA/IG51bGwgOiBbIHgyIC0geDEsIHkyIC0geTEgXTtcbiAgICAgIGlmIChfID09IG51bGwpIHgxID0geTEgPSB4MiA9IHkyID0gbnVsbDsgZWxzZSB4MSA9IHkxID0gMCwgeDIgPSArX1swXSwgeTIgPSArX1sxXTtcbiAgICAgIHJldHVybiBxdWFkdHJlZTtcbiAgICB9O1xuICAgIHJldHVybiBxdWFkdHJlZTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV9xdWFkdHJlZUNvbXBhdFgoZCkge1xuICAgIHJldHVybiBkLng7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9xdWFkdHJlZUNvbXBhdFkoZCkge1xuICAgIHJldHVybiBkLnk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9xdWFkdHJlZU5vZGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlYWY6IHRydWUsXG4gICAgICBub2RlczogW10sXG4gICAgICBwb2ludDogbnVsbCxcbiAgICAgIHg6IG51bGwsXG4gICAgICB5OiBudWxsXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlVmlzaXQoZiwgbm9kZSwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICBpZiAoIWYobm9kZSwgeDEsIHkxLCB4MiwgeTIpKSB7XG4gICAgICB2YXIgc3ggPSAoeDEgKyB4MikgKiAuNSwgc3kgPSAoeTEgKyB5MikgKiAuNSwgY2hpbGRyZW4gPSBub2RlLm5vZGVzO1xuICAgICAgaWYgKGNoaWxkcmVuWzBdKSBkM19nZW9tX3F1YWR0cmVlVmlzaXQoZiwgY2hpbGRyZW5bMF0sIHgxLCB5MSwgc3gsIHN5KTtcbiAgICAgIGlmIChjaGlsZHJlblsxXSkgZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIGNoaWxkcmVuWzFdLCBzeCwgeTEsIHgyLCBzeSk7XG4gICAgICBpZiAoY2hpbGRyZW5bMl0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblsyXSwgeDEsIHN5LCBzeCwgeTIpO1xuICAgICAgaWYgKGNoaWxkcmVuWzNdKSBkM19nZW9tX3F1YWR0cmVlVmlzaXQoZiwgY2hpbGRyZW5bM10sIHN4LCBzeSwgeDIsIHkyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9xdWFkdHJlZUZpbmQocm9vdCwgeCwgeSwgeDAsIHkwLCB4MywgeTMpIHtcbiAgICB2YXIgbWluRGlzdGFuY2UyID0gSW5maW5pdHksIGNsb3Nlc3RQb2ludDtcbiAgICAoZnVuY3Rpb24gZmluZChub2RlLCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgaWYgKHgxID4geDMgfHwgeTEgPiB5MyB8fCB4MiA8IHgwIHx8IHkyIDwgeTApIHJldHVybjtcbiAgICAgIGlmIChwb2ludCA9IG5vZGUucG9pbnQpIHtcbiAgICAgICAgdmFyIHBvaW50LCBkeCA9IHggLSBub2RlLngsIGR5ID0geSAtIG5vZGUueSwgZGlzdGFuY2UyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkaXN0YW5jZTIgPCBtaW5EaXN0YW5jZTIpIHtcbiAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQobWluRGlzdGFuY2UyID0gZGlzdGFuY2UyKTtcbiAgICAgICAgICB4MCA9IHggLSBkaXN0YW5jZSwgeTAgPSB5IC0gZGlzdGFuY2U7XG4gICAgICAgICAgeDMgPSB4ICsgZGlzdGFuY2UsIHkzID0geSArIGRpc3RhbmNlO1xuICAgICAgICAgIGNsb3Nlc3RQb2ludCA9IHBvaW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLm5vZGVzLCB4bSA9ICh4MSArIHgyKSAqIC41LCB5bSA9ICh5MSArIHkyKSAqIC41LCByaWdodCA9IHggPj0geG0sIGJlbG93ID0geSA+PSB5bTtcbiAgICAgIGZvciAodmFyIGkgPSBiZWxvdyA8PCAxIHwgcmlnaHQsIGogPSBpICsgNDsgaSA8IGo7ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGNoaWxkcmVuW2kgJiAzXSkgc3dpdGNoIChpICYgMykge1xuICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGZpbmQobm9kZSwgeDEsIHkxLCB4bSwgeW0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgZmluZChub2RlLCB4bSwgeTEsIHgyLCB5bSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBmaW5kKG5vZGUsIHgxLCB5bSwgeG0sIHkyKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGZpbmQobm9kZSwgeG0sIHltLCB4MiwgeTIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkocm9vdCwgeDAsIHkwLCB4MywgeTMpO1xuICAgIHJldHVybiBjbG9zZXN0UG9pbnQ7XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVSZ2IgPSBkM19pbnRlcnBvbGF0ZVJnYjtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVSZ2IoYSwgYikge1xuICAgIGEgPSBkMy5yZ2IoYSk7XG4gICAgYiA9IGQzLnJnYihiKTtcbiAgICB2YXIgYXIgPSBhLnIsIGFnID0gYS5nLCBhYiA9IGEuYiwgYnIgPSBiLnIgLSBhciwgYmcgPSBiLmcgLSBhZywgYmIgPSBiLmIgLSBhYjtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIFwiI1wiICsgZDNfcmdiX2hleChNYXRoLnJvdW5kKGFyICsgYnIgKiB0KSkgKyBkM19yZ2JfaGV4KE1hdGgucm91bmQoYWcgKyBiZyAqIHQpKSArIGQzX3JnYl9oZXgoTWF0aC5yb3VuZChhYiArIGJiICogdCkpO1xuICAgIH07XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVPYmplY3QgPSBkM19pbnRlcnBvbGF0ZU9iamVjdDtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVPYmplY3QoYSwgYikge1xuICAgIHZhciBpID0ge30sIGMgPSB7fSwgaztcbiAgICBmb3IgKGsgaW4gYSkge1xuICAgICAgaWYgKGsgaW4gYikge1xuICAgICAgICBpW2tdID0gZDNfaW50ZXJwb2xhdGUoYVtrXSwgYltrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjW2tdID0gYVtrXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrIGluIGIpIHtcbiAgICAgIGlmICghKGsgaW4gYSkpIHtcbiAgICAgICAgY1trXSA9IGJba107XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG4gICAgICByZXR1cm4gYztcbiAgICB9O1xuICB9XG4gIGQzLmludGVycG9sYXRlTnVtYmVyID0gZDNfaW50ZXJwb2xhdGVOdW1iZXI7XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlTnVtYmVyKGEsIGIpIHtcbiAgICBhID0gK2EsIGIgPSArYjtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIGEgKiAoMSAtIHQpICsgYiAqIHQ7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZVN0cmluZyA9IGQzX2ludGVycG9sYXRlU3RyaW5nO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVN0cmluZyhhLCBiKSB7XG4gICAgdmFyIGJpID0gZDNfaW50ZXJwb2xhdGVfbnVtYmVyQS5sYXN0SW5kZXggPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJCLmxhc3RJbmRleCA9IDAsIGFtLCBibSwgYnMsIGkgPSAtMSwgcyA9IFtdLCBxID0gW107XG4gICAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG4gICAgd2hpbGUgKChhbSA9IGQzX2ludGVycG9sYXRlX251bWJlckEuZXhlYyhhKSkgJiYgKGJtID0gZDNfaW50ZXJwb2xhdGVfbnVtYmVyQi5leGVjKGIpKSkge1xuICAgICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7XG4gICAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgZWxzZSBzWysraV0gPSBicztcbiAgICAgIH1cbiAgICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkge1xuICAgICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgZWxzZSBzWysraV0gPSBibTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICAgIHEucHVzaCh7XG4gICAgICAgICAgaTogaSxcbiAgICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcihhbSwgYm0pXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYmkgPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJCLmxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IHFbMF0gPyAoYiA9IHFbMF0ueCwgZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICAgIH0pIDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9IDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfSk7XG4gIH1cbiAgdmFyIGQzX2ludGVycG9sYXRlX251bWJlckEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csIGQzX2ludGVycG9sYXRlX251bWJlckIgPSBuZXcgUmVnRXhwKGQzX2ludGVycG9sYXRlX251bWJlckEuc291cmNlLCBcImdcIik7XG4gIGQzLmludGVycG9sYXRlID0gZDNfaW50ZXJwb2xhdGU7XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlKGEsIGIpIHtcbiAgICB2YXIgaSA9IGQzLmludGVycG9sYXRvcnMubGVuZ3RoLCBmO1xuICAgIHdoaWxlICgtLWkgPj0gMCAmJiAhKGYgPSBkMy5pbnRlcnBvbGF0b3JzW2ldKGEsIGIpKSkgO1xuICAgIHJldHVybiBmO1xuICB9XG4gIGQzLmludGVycG9sYXRvcnMgPSBbIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiBiO1xuICAgIHJldHVybiAodCA9PT0gXCJzdHJpbmdcIiA/IGQzX3JnYl9uYW1lcy5oYXMoYi50b0xvd2VyQ2FzZSgpKSB8fCAvXigjfHJnYlxcKHxoc2xcXCgpL2kudGVzdChiKSA/IGQzX2ludGVycG9sYXRlUmdiIDogZDNfaW50ZXJwb2xhdGVTdHJpbmcgOiBiIGluc3RhbmNlb2YgZDNfY29sb3IgPyBkM19pbnRlcnBvbGF0ZVJnYiA6IEFycmF5LmlzQXJyYXkoYikgPyBkM19pbnRlcnBvbGF0ZUFycmF5IDogdCA9PT0gXCJvYmplY3RcIiAmJiBpc05hTihiKSA/IGQzX2ludGVycG9sYXRlT2JqZWN0IDogZDNfaW50ZXJwb2xhdGVOdW1iZXIpKGEsIGIpO1xuICB9IF07XG4gIGQzLmludGVycG9sYXRlQXJyYXkgPSBkM19pbnRlcnBvbGF0ZUFycmF5O1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUFycmF5KGEsIGIpIHtcbiAgICB2YXIgeCA9IFtdLCBjID0gW10sIG5hID0gYS5sZW5ndGgsIG5iID0gYi5sZW5ndGgsIG4wID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKSwgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjA7ICsraSkgeC5wdXNoKGQzX2ludGVycG9sYXRlKGFbaV0sIGJbaV0pKTtcbiAgICBmb3IgKDtpIDwgbmE7ICsraSkgY1tpXSA9IGFbaV07XG4gICAgZm9yICg7aSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjA7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgICByZXR1cm4gYztcbiAgICB9O1xuICB9XG4gIHZhciBkM19lYXNlX2RlZmF1bHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfaWRlbnRpdHk7XG4gIH07XG4gIHZhciBkM19lYXNlID0gZDMubWFwKHtcbiAgICBsaW5lYXI6IGQzX2Vhc2VfZGVmYXVsdCxcbiAgICBwb2x5OiBkM19lYXNlX3BvbHksXG4gICAgcXVhZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9xdWFkO1xuICAgIH0sXG4gICAgY3ViaWM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX2Vhc2VfY3ViaWM7XG4gICAgfSxcbiAgICBzaW46IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX2Vhc2Vfc2luO1xuICAgIH0sXG4gICAgZXhwOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX2V4cDtcbiAgICB9LFxuICAgIGNpcmNsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9jaXJjbGU7XG4gICAgfSxcbiAgICBlbGFzdGljOiBkM19lYXNlX2VsYXN0aWMsXG4gICAgYmFjazogZDNfZWFzZV9iYWNrLFxuICAgIGJvdW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9ib3VuY2U7XG4gICAgfVxuICB9KTtcbiAgdmFyIGQzX2Vhc2VfbW9kZSA9IGQzLm1hcCh7XG4gICAgXCJpblwiOiBkM19pZGVudGl0eSxcbiAgICBvdXQ6IGQzX2Vhc2VfcmV2ZXJzZSxcbiAgICBcImluLW91dFwiOiBkM19lYXNlX3JlZmxlY3QsXG4gICAgXCJvdXQtaW5cIjogZnVuY3Rpb24oZikge1xuICAgICAgcmV0dXJuIGQzX2Vhc2VfcmVmbGVjdChkM19lYXNlX3JldmVyc2UoZikpO1xuICAgIH1cbiAgfSk7XG4gIGQzLmVhc2UgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSBuYW1lLmluZGV4T2YoXCItXCIpLCB0ID0gaSA+PSAwID8gbmFtZS5zbGljZSgwLCBpKSA6IG5hbWUsIG0gPSBpID49IDAgPyBuYW1lLnNsaWNlKGkgKyAxKSA6IFwiaW5cIjtcbiAgICB0ID0gZDNfZWFzZS5nZXQodCkgfHwgZDNfZWFzZV9kZWZhdWx0O1xuICAgIG0gPSBkM19lYXNlX21vZGUuZ2V0KG0pIHx8IGQzX2lkZW50aXR5O1xuICAgIHJldHVybiBkM19lYXNlX2NsYW1wKG0odC5hcHBseShudWxsLCBkM19hcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZWFzZV9jbGFtcChmKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiB0IDw9IDAgPyAwIDogdCA+PSAxID8gMSA6IGYodCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19lYXNlX3JldmVyc2UoZikge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gMSAtIGYoMSAtIHQpO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9yZWZsZWN0KGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIC41ICogKHQgPCAuNSA/IGYoMiAqIHQpIDogMiAtIGYoMiAtIDIgKiB0KSk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19lYXNlX3F1YWQodCkge1xuICAgIHJldHVybiB0ICogdDtcbiAgfVxuICBmdW5jdGlvbiBkM19lYXNlX2N1YmljKHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiB0O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfY3ViaWNJbk91dCh0KSB7XG4gICAgaWYgKHQgPD0gMCkgcmV0dXJuIDA7XG4gICAgaWYgKHQgPj0gMSkgcmV0dXJuIDE7XG4gICAgdmFyIHQyID0gdCAqIHQsIHQzID0gdDIgKiB0O1xuICAgIHJldHVybiA0ICogKHQgPCAuNSA/IHQzIDogMyAqICh0IC0gdDIpICsgdDMgLSAuNzUpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfcG9seShlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2Vfc2luKHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGguY29zKHQgKiBoYWxmz4ApO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfZXhwKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKTtcbiAgfVxuICBmdW5jdGlvbiBkM19lYXNlX2NpcmNsZSh0KSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KTtcbiAgfVxuICBmdW5jdGlvbiBkM19lYXNlX2VsYXN0aWMoYSwgcCkge1xuICAgIHZhciBzO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcCA9IC40NTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgcyA9IHAgLyDPhCAqIE1hdGguYXNpbigxIC8gYSk7IGVsc2UgYSA9IDEsIHMgPSBwIC8gNDtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIDEgKyBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAtIHMpICogz4QgLyBwKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfYmFjayhzKSB7XG4gICAgaWYgKCFzKSBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19lYXNlX2JvdW5jZSh0KSB7XG4gICAgcmV0dXJuIHQgPCAxIC8gMi43NSA/IDcuNTYyNSAqIHQgKiB0IDogdCA8IDIgLyAyLjc1ID8gNy41NjI1ICogKHQgLT0gMS41IC8gMi43NSkgKiB0ICsgLjc1IDogdCA8IDIuNSAvIDIuNzUgPyA3LjU2MjUgKiAodCAtPSAyLjI1IC8gMi43NSkgKiB0ICsgLjkzNzUgOiA3LjU2MjUgKiAodCAtPSAyLjYyNSAvIDIuNzUpICogdCArIC45ODQzNzU7XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVIY2wgPSBkM19pbnRlcnBvbGF0ZUhjbDtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVIY2woYSwgYikge1xuICAgIGEgPSBkMy5oY2woYSk7XG4gICAgYiA9IGQzLmhjbChiKTtcbiAgICB2YXIgYWggPSBhLmgsIGFjID0gYS5jLCBhbCA9IGEubCwgYmggPSBiLmggLSBhaCwgYmMgPSBiLmMgLSBhYywgYmwgPSBiLmwgLSBhbDtcbiAgICBpZiAoaXNOYU4oYmMpKSBiYyA9IDAsIGFjID0gaXNOYU4oYWMpID8gYi5jIDogYWM7XG4gICAgaWYgKGlzTmFOKGJoKSkgYmggPSAwLCBhaCA9IGlzTmFOKGFoKSA/IGIuaCA6IGFoOyBlbHNlIGlmIChiaCA+IDE4MCkgYmggLT0gMzYwOyBlbHNlIGlmIChiaCA8IC0xODApIGJoICs9IDM2MDtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIGQzX2hjbF9sYWIoYWggKyBiaCAqIHQsIGFjICsgYmMgKiB0LCBhbCArIGJsICogdCkgKyBcIlwiO1xuICAgIH07XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVIc2wgPSBkM19pbnRlcnBvbGF0ZUhzbDtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVIc2woYSwgYikge1xuICAgIGEgPSBkMy5oc2woYSk7XG4gICAgYiA9IGQzLmhzbChiKTtcbiAgICB2YXIgYWggPSBhLmgsIGFzID0gYS5zLCBhbCA9IGEubCwgYmggPSBiLmggLSBhaCwgYnMgPSBiLnMgLSBhcywgYmwgPSBiLmwgLSBhbDtcbiAgICBpZiAoaXNOYU4oYnMpKSBicyA9IDAsIGFzID0gaXNOYU4oYXMpID8gYi5zIDogYXM7XG4gICAgaWYgKGlzTmFOKGJoKSkgYmggPSAwLCBhaCA9IGlzTmFOKGFoKSA/IGIuaCA6IGFoOyBlbHNlIGlmIChiaCA+IDE4MCkgYmggLT0gMzYwOyBlbHNlIGlmIChiaCA8IC0xODApIGJoICs9IDM2MDtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIGQzX2hzbF9yZ2IoYWggKyBiaCAqIHQsIGFzICsgYnMgKiB0LCBhbCArIGJsICogdCkgKyBcIlwiO1xuICAgIH07XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVMYWIgPSBkM19pbnRlcnBvbGF0ZUxhYjtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVMYWIoYSwgYikge1xuICAgIGEgPSBkMy5sYWIoYSk7XG4gICAgYiA9IGQzLmxhYihiKTtcbiAgICB2YXIgYWwgPSBhLmwsIGFhID0gYS5hLCBhYiA9IGEuYiwgYmwgPSBiLmwgLSBhbCwgYmEgPSBiLmEgLSBhYSwgYmIgPSBiLmIgLSBhYjtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIGQzX2xhYl9yZ2IoYWwgKyBibCAqIHQsIGFhICsgYmEgKiB0LCBhYiArIGJiICogdCkgKyBcIlwiO1xuICAgIH07XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVSb3VuZCA9IGQzX2ludGVycG9sYXRlUm91bmQ7XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlUm91bmQoYSwgYikge1xuICAgIGIgLT0gYTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgICB9O1xuICB9XG4gIGQzLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBnID0gZDNfZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGQzLm5zLnByZWZpeC5zdmcsIFwiZ1wiKTtcbiAgICByZXR1cm4gKGQzLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgaWYgKHN0cmluZyAhPSBudWxsKSB7XG4gICAgICAgIGcuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHN0cmluZyk7XG4gICAgICAgIHZhciB0ID0gZy50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBkM190cmFuc2Zvcm0odCA/IHQubWF0cml4IDogZDNfdHJhbnNmb3JtSWRlbnRpdHkpO1xuICAgIH0pKHN0cmluZyk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybShtKSB7XG4gICAgdmFyIHIwID0gWyBtLmEsIG0uYiBdLCByMSA9IFsgbS5jLCBtLmQgXSwga3ggPSBkM190cmFuc2Zvcm1Ob3JtYWxpemUocjApLCBreiA9IGQzX3RyYW5zZm9ybURvdChyMCwgcjEpLCBreSA9IGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShkM190cmFuc2Zvcm1Db21iaW5lKHIxLCByMCwgLWt6KSkgfHwgMDtcbiAgICBpZiAocjBbMF0gKiByMVsxXSA8IHIxWzBdICogcjBbMV0pIHtcbiAgICAgIHIwWzBdICo9IC0xO1xuICAgICAgcjBbMV0gKj0gLTE7XG4gICAgICBreCAqPSAtMTtcbiAgICAgIGt6ICo9IC0xO1xuICAgIH1cbiAgICB0aGlzLnJvdGF0ZSA9IChreCA/IE1hdGguYXRhbjIocjBbMV0sIHIwWzBdKSA6IE1hdGguYXRhbjIoLXIxWzBdLCByMVsxXSkpICogZDNfZGVncmVlcztcbiAgICB0aGlzLnRyYW5zbGF0ZSA9IFsgbS5lLCBtLmYgXTtcbiAgICB0aGlzLnNjYWxlID0gWyBreCwga3kgXTtcbiAgICB0aGlzLnNrZXcgPSBreSA/IE1hdGguYXRhbjIoa3osIGt5KSAqIGQzX2RlZ3JlZXMgOiAwO1xuICB9XG4gIGQzX3RyYW5zZm9ybS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLnRyYW5zbGF0ZSArIFwiKXJvdGF0ZShcIiArIHRoaXMucm90YXRlICsgXCIpc2tld1goXCIgKyB0aGlzLnNrZXcgKyBcIilzY2FsZShcIiArIHRoaXMuc2NhbGUgKyBcIilcIjtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNmb3JtRG90KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXTtcbiAgfVxuICBmdW5jdGlvbiBkM190cmFuc2Zvcm1Ob3JtYWxpemUoYSkge1xuICAgIHZhciBrID0gTWF0aC5zcXJ0KGQzX3RyYW5zZm9ybURvdChhLCBhKSk7XG4gICAgaWYgKGspIHtcbiAgICAgIGFbMF0gLz0gaztcbiAgICAgIGFbMV0gLz0gaztcbiAgICB9XG4gICAgcmV0dXJuIGs7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdHJhbnNmb3JtQ29tYmluZShhLCBiLCBrKSB7XG4gICAgYVswXSArPSBrICogYlswXTtcbiAgICBhWzFdICs9IGsgKiBiWzFdO1xuICAgIHJldHVybiBhO1xuICB9XG4gIHZhciBkM190cmFuc2Zvcm1JZGVudGl0eSA9IHtcbiAgICBhOiAxLFxuICAgIGI6IDAsXG4gICAgYzogMCxcbiAgICBkOiAxLFxuICAgIGU6IDAsXG4gICAgZjogMFxuICB9O1xuICBkMy5pbnRlcnBvbGF0ZVRyYW5zZm9ybSA9IGQzX2ludGVycG9sYXRlVHJhbnNmb3JtO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiLFwiIDogXCJcIjtcbiAgfVxuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVRyYW5zbGF0ZSh0YSwgdGIsIHMsIHEpIHtcbiAgICBpZiAodGFbMF0gIT09IHRiWzBdIHx8IHRhWzFdICE9PSB0YlsxXSkge1xuICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe1xuICAgICAgICBpOiBpIC0gNCxcbiAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIodGFbMF0sIHRiWzBdKVxuICAgICAgfSwge1xuICAgICAgICBpOiBpIC0gMixcbiAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIodGFbMV0sIHRiWzFdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0YlswXSB8fCB0YlsxXSkge1xuICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgdGIgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlUm90YXRlKHJhLCByYiwgcywgcSkge1xuICAgIGlmIChyYSAhPT0gcmIpIHtcbiAgICAgIGlmIChyYSAtIHJiID4gMTgwKSByYiArPSAzNjA7IGVsc2UgaWYgKHJiIC0gcmEgPiAxODApIHJhICs9IDM2MDtcbiAgICAgIHEucHVzaCh7XG4gICAgICAgIGk6IHMucHVzaChkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBcIilcIikgLSAyLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcihyYSwgcmIpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJiKSB7XG4gICAgICBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInJvdGF0ZShcIiArIHJiICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVNrZXcod2EsIHdiLCBzLCBxKSB7XG4gICAgaWYgKHdhICE9PSB3Yikge1xuICAgICAgcS5wdXNoKHtcbiAgICAgICAgaTogcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgXCIpXCIpIC0gMixcbiAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIod2EsIHdiKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh3Yikge1xuICAgICAgcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJza2V3WChcIiArIHdiICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVNjYWxlKGthLCBrYiwgcywgcSkge1xuICAgIGlmIChrYVswXSAhPT0ga2JbMF0gfHwga2FbMV0gIT09IGtiWzFdKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe1xuICAgICAgICBpOiBpIC0gNCxcbiAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIoa2FbMF0sIGtiWzBdKVxuICAgICAgfSwge1xuICAgICAgICBpOiBpIC0gMixcbiAgICAgICAgeDogZDNfaW50ZXJwb2xhdGVOdW1iZXIoa2FbMV0sIGtiWzFdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChrYlswXSAhPT0gMSB8fCBrYlsxXSAhPT0gMSkge1xuICAgICAgcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJzY2FsZShcIiArIGtiICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybShhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgcSA9IFtdO1xuICAgIGEgPSBkMy50cmFuc2Zvcm0oYSksIGIgPSBkMy50cmFuc2Zvcm0oYik7XG4gICAgZDNfaW50ZXJwb2xhdGVUcmFuc2xhdGUoYS50cmFuc2xhdGUsIGIudHJhbnNsYXRlLCBzLCBxKTtcbiAgICBkM19pbnRlcnBvbGF0ZVJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuICAgIGQzX2ludGVycG9sYXRlU2tldyhhLnNrZXcsIGIuc2tldywgcywgcSk7XG4gICAgZDNfaW50ZXJwb2xhdGVTY2FsZShhLnNjYWxlLCBiLnNjYWxlLCBzLCBxKTtcbiAgICBhID0gYiA9IG51bGw7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfdW5pbnRlcnBvbGF0ZU51bWJlcihhLCBiKSB7XG4gICAgYiA9IChiIC09IGEgPSArYSkgfHwgMSAvIGI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiAoeCAtIGEpIC8gYjtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3VuaW50ZXJwb2xhdGVDbGFtcChhLCBiKSB7XG4gICAgYiA9IChiIC09IGEgPSArYSkgfHwgMSAvIGI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCAoeCAtIGEpIC8gYikpO1xuICAgIH07XG4gIH1cbiAgZDMubGF5b3V0ID0ge307XG4gIGQzLmxheW91dC5idW5kbGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obGlua3MpIHtcbiAgICAgIHZhciBwYXRocyA9IFtdLCBpID0gLTEsIG4gPSBsaW5rcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgcGF0aHMucHVzaChkM19sYXlvdXRfYnVuZGxlUGF0aChsaW5rc1tpXSkpO1xuICAgICAgcmV0dXJuIHBhdGhzO1xuICAgIH07XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9idW5kbGVQYXRoKGxpbmspIHtcbiAgICB2YXIgc3RhcnQgPSBsaW5rLnNvdXJjZSwgZW5kID0gbGluay50YXJnZXQsIGxjYSA9IGQzX2xheW91dF9idW5kbGVMZWFzdENvbW1vbkFuY2VzdG9yKHN0YXJ0LCBlbmQpLCBwb2ludHMgPSBbIHN0YXJ0IF07XG4gICAgd2hpbGUgKHN0YXJ0ICE9PSBsY2EpIHtcbiAgICAgIHN0YXJ0ID0gc3RhcnQucGFyZW50O1xuICAgICAgcG9pbnRzLnB1c2goc3RhcnQpO1xuICAgIH1cbiAgICB2YXIgayA9IHBvaW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKGVuZCAhPT0gbGNhKSB7XG4gICAgICBwb2ludHMuc3BsaWNlKGssIDAsIGVuZCk7XG4gICAgICBlbmQgPSBlbmQucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9idW5kbGVBbmNlc3RvcnMobm9kZSkge1xuICAgIHZhciBhbmNlc3RvcnMgPSBbXSwgcGFyZW50ID0gbm9kZS5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCAhPSBudWxsKSB7XG4gICAgICBhbmNlc3RvcnMucHVzaChub2RlKTtcbiAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgICBhbmNlc3RvcnMucHVzaChub2RlKTtcbiAgICByZXR1cm4gYW5jZXN0b3JzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9idW5kbGVMZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG4gICAgdmFyIGFOb2RlcyA9IGQzX2xheW91dF9idW5kbGVBbmNlc3RvcnMoYSksIGJOb2RlcyA9IGQzX2xheW91dF9idW5kbGVBbmNlc3RvcnMoYiksIGFOb2RlID0gYU5vZGVzLnBvcCgpLCBiTm9kZSA9IGJOb2Rlcy5wb3AoKSwgc2hhcmVkTm9kZSA9IG51bGw7XG4gICAgd2hpbGUgKGFOb2RlID09PSBiTm9kZSkge1xuICAgICAgc2hhcmVkTm9kZSA9IGFOb2RlO1xuICAgICAgYU5vZGUgPSBhTm9kZXMucG9wKCk7XG4gICAgICBiTm9kZSA9IGJOb2Rlcy5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYXJlZE5vZGU7XG4gIH1cbiAgZDMubGF5b3V0LmNob3JkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNob3JkID0ge30sIGNob3JkcywgZ3JvdXBzLCBtYXRyaXgsIG4sIHBhZGRpbmcgPSAwLCBzb3J0R3JvdXBzLCBzb3J0U3ViZ3JvdXBzLCBzb3J0Q2hvcmRzO1xuICAgIGZ1bmN0aW9uIHJlbGF5b3V0KCkge1xuICAgICAgdmFyIHN1Ymdyb3VwcyA9IHt9LCBncm91cFN1bXMgPSBbXSwgZ3JvdXBJbmRleCA9IGQzLnJhbmdlKG4pLCBzdWJncm91cEluZGV4ID0gW10sIGssIHgsIHgwLCBpLCBqO1xuICAgICAgY2hvcmRzID0gW107XG4gICAgICBncm91cHMgPSBbXTtcbiAgICAgIGsgPSAwLCBpID0gLTE7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICB4ID0gMCwgaiA9IC0xO1xuICAgICAgICB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICAgIHggKz0gbWF0cml4W2ldW2pdO1xuICAgICAgICB9XG4gICAgICAgIGdyb3VwU3Vtcy5wdXNoKHgpO1xuICAgICAgICBzdWJncm91cEluZGV4LnB1c2goZDMucmFuZ2UobikpO1xuICAgICAgICBrICs9IHg7XG4gICAgICB9XG4gICAgICBpZiAoc29ydEdyb3Vwcykge1xuICAgICAgICBncm91cEluZGV4LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiBzb3J0R3JvdXBzKGdyb3VwU3Vtc1thXSwgZ3JvdXBTdW1zW2JdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoc29ydFN1Ymdyb3Vwcykge1xuICAgICAgICBzdWJncm91cEluZGV4LmZvckVhY2goZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgIGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gc29ydFN1Ymdyb3VwcyhtYXRyaXhbaV1bYV0sIG1hdHJpeFtpXVtiXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgayA9ICjPhCAtIHBhZGRpbmcgKiBuKSAvIGs7XG4gICAgICB4ID0gMCwgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgeDAgPSB4LCBqID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgICAgdmFyIGRpID0gZ3JvdXBJbmRleFtpXSwgZGogPSBzdWJncm91cEluZGV4W2RpXVtqXSwgdiA9IG1hdHJpeFtkaV1bZGpdLCBhMCA9IHgsIGExID0geCArPSB2ICogaztcbiAgICAgICAgICBzdWJncm91cHNbZGkgKyBcIi1cIiArIGRqXSA9IHtcbiAgICAgICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgICAgIHN1YmluZGV4OiBkaixcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICAgICAgZW5kQW5nbGU6IGExLFxuICAgICAgICAgICAgdmFsdWU6IHZcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGdyb3Vwc1tkaV0gPSB7XG4gICAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IHgwLFxuICAgICAgICAgIGVuZEFuZ2xlOiB4LFxuICAgICAgICAgIHZhbHVlOiBncm91cFN1bXNbZGldXG4gICAgICAgIH07XG4gICAgICAgIHggKz0gcGFkZGluZztcbiAgICAgIH1cbiAgICAgIGkgPSAtMTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGogPSBpIC0gMTtcbiAgICAgICAgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc3ViZ3JvdXBzW2kgKyBcIi1cIiArIGpdLCB0YXJnZXQgPSBzdWJncm91cHNbaiArIFwiLVwiICsgaV07XG4gICAgICAgICAgaWYgKHNvdXJjZS52YWx1ZSB8fCB0YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICAgIGNob3Jkcy5wdXNoKHNvdXJjZS52YWx1ZSA8IHRhcmdldC52YWx1ZSA/IHtcbiAgICAgICAgICAgICAgc291cmNlOiB0YXJnZXQsXG4gICAgICAgICAgICAgIHRhcmdldDogc291cmNlXG4gICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNvcnRDaG9yZHMpIHJlc29ydCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNvcnQoKSB7XG4gICAgICBjaG9yZHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBzb3J0Q2hvcmRzKChhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlKSAvIDIsIChiLnNvdXJjZS52YWx1ZSArIGIudGFyZ2V0LnZhbHVlKSAvIDIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNob3JkLm1hdHJpeCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1hdHJpeDtcbiAgICAgIG4gPSAobWF0cml4ID0geCkgJiYgbWF0cml4Lmxlbmd0aDtcbiAgICAgIGNob3JkcyA9IGdyb3VwcyA9IG51bGw7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkZGluZztcbiAgICAgIHBhZGRpbmcgPSB4O1xuICAgICAgY2hvcmRzID0gZ3JvdXBzID0gbnVsbDtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0R3JvdXBzO1xuICAgICAgc29ydEdyb3VwcyA9IHg7XG4gICAgICBjaG9yZHMgPSBncm91cHMgPSBudWxsO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnRTdWJncm91cHM7XG4gICAgICBzb3J0U3ViZ3JvdXBzID0geDtcbiAgICAgIGNob3JkcyA9IG51bGw7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5zb3J0Q2hvcmRzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydENob3JkcztcbiAgICAgIHNvcnRDaG9yZHMgPSB4O1xuICAgICAgaWYgKGNob3JkcykgcmVzb3J0KCk7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5jaG9yZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghY2hvcmRzKSByZWxheW91dCgpO1xuICAgICAgcmV0dXJuIGNob3JkcztcbiAgICB9O1xuICAgIGNob3JkLmdyb3VwcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFncm91cHMpIHJlbGF5b3V0KCk7XG4gICAgICByZXR1cm4gZ3JvdXBzO1xuICAgIH07XG4gICAgcmV0dXJuIGNob3JkO1xuICB9O1xuICBkMy5sYXlvdXQuZm9yY2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9yY2UgPSB7fSwgZXZlbnQgPSBkMy5kaXNwYXRjaChcInN0YXJ0XCIsIFwidGlja1wiLCBcImVuZFwiKSwgdGltZXIsIHNpemUgPSBbIDEsIDEgXSwgZHJhZywgYWxwaGEsIGZyaWN0aW9uID0gLjksIGxpbmtEaXN0YW5jZSA9IGQzX2xheW91dF9mb3JjZUxpbmtEaXN0YW5jZSwgbGlua1N0cmVuZ3RoID0gZDNfbGF5b3V0X2ZvcmNlTGlua1N0cmVuZ3RoLCBjaGFyZ2UgPSAtMzAsIGNoYXJnZURpc3RhbmNlMiA9IGQzX2xheW91dF9mb3JjZUNoYXJnZURpc3RhbmNlMiwgZ3Jhdml0eSA9IC4xLCB0aGV0YTIgPSAuNjQsIG5vZGVzID0gW10sIGxpbmtzID0gW10sIGRpc3RhbmNlcywgc3RyZW5ndGhzLCBjaGFyZ2VzO1xuICAgIGZ1bmN0aW9uIHJlcHVsc2Uobm9kZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHF1YWQsIHgxLCBfLCB4Mikge1xuICAgICAgICBpZiAocXVhZC5wb2ludCAhPT0gbm9kZSkge1xuICAgICAgICAgIHZhciBkeCA9IHF1YWQuY3ggLSBub2RlLngsIGR5ID0gcXVhZC5jeSAtIG5vZGUueSwgZHcgPSB4MiAtIHgxLCBkbiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICAgIGlmIChkdyAqIGR3IC8gdGhldGEyIDwgZG4pIHtcbiAgICAgICAgICAgIGlmIChkbiA8IGNoYXJnZURpc3RhbmNlMikge1xuICAgICAgICAgICAgICB2YXIgayA9IHF1YWQuY2hhcmdlIC8gZG47XG4gICAgICAgICAgICAgIG5vZGUucHggLT0gZHggKiBrO1xuICAgICAgICAgICAgICBub2RlLnB5IC09IGR5ICogaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocXVhZC5wb2ludCAmJiBkbiAmJiBkbiA8IGNoYXJnZURpc3RhbmNlMikge1xuICAgICAgICAgICAgdmFyIGsgPSBxdWFkLnBvaW50Q2hhcmdlIC8gZG47XG4gICAgICAgICAgICBub2RlLnB4IC09IGR4ICogaztcbiAgICAgICAgICAgIG5vZGUucHkgLT0gZHkgKiBrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXF1YWQuY2hhcmdlO1xuICAgICAgfTtcbiAgICB9XG4gICAgZm9yY2UudGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKChhbHBoYSAqPSAuOTkpIDwgLjAwNSkge1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgIGV2ZW50LmVuZCh7XG4gICAgICAgICAgdHlwZTogXCJlbmRcIixcbiAgICAgICAgICBhbHBoYTogYWxwaGEgPSAwXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBuID0gbm9kZXMubGVuZ3RoLCBtID0gbGlua3MubGVuZ3RoLCBxLCBpLCBvLCBzLCB0LCBsLCBrLCB4LCB5O1xuICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkge1xuICAgICAgICBvID0gbGlua3NbaV07XG4gICAgICAgIHMgPSBvLnNvdXJjZTtcbiAgICAgICAgdCA9IG8udGFyZ2V0O1xuICAgICAgICB4ID0gdC54IC0gcy54O1xuICAgICAgICB5ID0gdC55IC0gcy55O1xuICAgICAgICBpZiAobCA9IHggKiB4ICsgeSAqIHkpIHtcbiAgICAgICAgICBsID0gYWxwaGEgKiBzdHJlbmd0aHNbaV0gKiAoKGwgPSBNYXRoLnNxcnQobCkpIC0gZGlzdGFuY2VzW2ldKSAvIGw7XG4gICAgICAgICAgeCAqPSBsO1xuICAgICAgICAgIHkgKj0gbDtcbiAgICAgICAgICB0LnggLT0geCAqIChrID0gcy53ZWlnaHQgKyB0LndlaWdodCA/IHMud2VpZ2h0IC8gKHMud2VpZ2h0ICsgdC53ZWlnaHQpIDogLjUpO1xuICAgICAgICAgIHQueSAtPSB5ICogaztcbiAgICAgICAgICBzLnggKz0geCAqIChrID0gMSAtIGspO1xuICAgICAgICAgIHMueSArPSB5ICogaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGsgPSBhbHBoYSAqIGdyYXZpdHkpIHtcbiAgICAgICAgeCA9IHNpemVbMF0gLyAyO1xuICAgICAgICB5ID0gc2l6ZVsxXSAvIDI7XG4gICAgICAgIGkgPSAtMTtcbiAgICAgICAgaWYgKGspIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgbyA9IG5vZGVzW2ldO1xuICAgICAgICAgIG8ueCArPSAoeCAtIG8ueCkgKiBrO1xuICAgICAgICAgIG8ueSArPSAoeSAtIG8ueSkgKiBrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2hhcmdlKSB7XG4gICAgICAgIGQzX2xheW91dF9mb3JjZUFjY3VtdWxhdGUocSA9IGQzLmdlb20ucXVhZHRyZWUobm9kZXMpLCBhbHBoYSwgY2hhcmdlcyk7XG4gICAgICAgIGkgPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBpZiAoIShvID0gbm9kZXNbaV0pLmZpeGVkKSB7XG4gICAgICAgICAgICBxLnZpc2l0KHJlcHVsc2UobykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgbyA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAoby5maXhlZCkge1xuICAgICAgICAgIG8ueCA9IG8ucHg7XG4gICAgICAgICAgby55ID0gby5weTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvLnggLT0gKG8ucHggLSAoby5weCA9IG8ueCkpICogZnJpY3Rpb247XG4gICAgICAgICAgby55IC09IChvLnB5IC0gKG8ucHkgPSBvLnkpKSAqIGZyaWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBldmVudC50aWNrKHtcbiAgICAgICAgdHlwZTogXCJ0aWNrXCIsXG4gICAgICAgIGFscGhhOiBhbHBoYVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBmb3JjZS5ub2RlcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG5vZGVzO1xuICAgICAgbm9kZXMgPSB4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UubGlua3MgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5rcztcbiAgICAgIGxpbmtzID0geDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuICAgICAgc2l6ZSA9IHg7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5saW5rRGlzdGFuY2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5rRGlzdGFuY2U7XG4gICAgICBsaW5rRGlzdGFuY2UgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6ICt4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuZGlzdGFuY2UgPSBmb3JjZS5saW5rRGlzdGFuY2U7XG4gICAgZm9yY2UubGlua1N0cmVuZ3RoID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbGlua1N0cmVuZ3RoO1xuICAgICAgbGlua1N0cmVuZ3RoID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiAreDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLmZyaWN0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZnJpY3Rpb247XG4gICAgICBmcmljdGlvbiA9ICt4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuY2hhcmdlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2hhcmdlO1xuICAgICAgY2hhcmdlID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiAreDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLmNoYXJnZURpc3RhbmNlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gTWF0aC5zcXJ0KGNoYXJnZURpc3RhbmNlMik7XG4gICAgICBjaGFyZ2VEaXN0YW5jZTIgPSB4ICogeDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLmdyYXZpdHkgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF2aXR5O1xuICAgICAgZ3Jhdml0eSA9ICt4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UudGhldGEgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBNYXRoLnNxcnQodGhldGEyKTtcbiAgICAgIHRoZXRhMiA9IHggKiB4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuYWxwaGEgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBhbHBoYTtcbiAgICAgIHggPSAreDtcbiAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICBpZiAoeCA+IDApIHtcbiAgICAgICAgICBhbHBoYSA9IHg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZXIuYyA9IG51bGwsIHRpbWVyLnQgPSBOYU4sIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICBldmVudC5lbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJlbmRcIixcbiAgICAgICAgICAgIGFscGhhOiBhbHBoYSA9IDBcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh4ID4gMCkge1xuICAgICAgICBldmVudC5zdGFydCh7XG4gICAgICAgICAgdHlwZTogXCJzdGFydFwiLFxuICAgICAgICAgIGFscGhhOiBhbHBoYSA9IHhcbiAgICAgICAgfSk7XG4gICAgICAgIHRpbWVyID0gZDNfdGltZXIoZm9yY2UudGljayk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIG0gPSBsaW5rcy5sZW5ndGgsIHcgPSBzaXplWzBdLCBoID0gc2l6ZVsxXSwgbmVpZ2hib3JzLCBvO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAobyA9IG5vZGVzW2ldKS5pbmRleCA9IGk7XG4gICAgICAgIG8ud2VpZ2h0ID0gMDtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHtcbiAgICAgICAgbyA9IGxpbmtzW2ldO1xuICAgICAgICBpZiAodHlwZW9mIG8uc291cmNlID09IFwibnVtYmVyXCIpIG8uc291cmNlID0gbm9kZXNbby5zb3VyY2VdO1xuICAgICAgICBpZiAodHlwZW9mIG8udGFyZ2V0ID09IFwibnVtYmVyXCIpIG8udGFyZ2V0ID0gbm9kZXNbby50YXJnZXRdO1xuICAgICAgICArK28uc291cmNlLndlaWdodDtcbiAgICAgICAgKytvLnRhcmdldC53ZWlnaHQ7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG8gPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKGlzTmFOKG8ueCkpIG8ueCA9IHBvc2l0aW9uKFwieFwiLCB3KTtcbiAgICAgICAgaWYgKGlzTmFOKG8ueSkpIG8ueSA9IHBvc2l0aW9uKFwieVwiLCBoKTtcbiAgICAgICAgaWYgKGlzTmFOKG8ucHgpKSBvLnB4ID0gby54O1xuICAgICAgICBpZiAoaXNOYU4oby5weSkpIG8ucHkgPSBvLnk7XG4gICAgICB9XG4gICAgICBkaXN0YW5jZXMgPSBbXTtcbiAgICAgIGlmICh0eXBlb2YgbGlua0Rpc3RhbmNlID09PSBcImZ1bmN0aW9uXCIpIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIGRpc3RhbmNlc1tpXSA9ICtsaW5rRGlzdGFuY2UuY2FsbCh0aGlzLCBsaW5rc1tpXSwgaSk7IGVsc2UgZm9yIChpID0gMDsgaSA8IG07ICsraSkgZGlzdGFuY2VzW2ldID0gbGlua0Rpc3RhbmNlO1xuICAgICAgc3RyZW5ndGhzID0gW107XG4gICAgICBpZiAodHlwZW9mIGxpbmtTdHJlbmd0aCA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBzdHJlbmd0aHNbaV0gPSArbGlua1N0cmVuZ3RoLmNhbGwodGhpcywgbGlua3NbaV0sIGkpOyBlbHNlIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHN0cmVuZ3Roc1tpXSA9IGxpbmtTdHJlbmd0aDtcbiAgICAgIGNoYXJnZXMgPSBbXTtcbiAgICAgIGlmICh0eXBlb2YgY2hhcmdlID09PSBcImZ1bmN0aW9uXCIpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNoYXJnZXNbaV0gPSArY2hhcmdlLmNhbGwodGhpcywgbm9kZXNbaV0sIGkpOyBlbHNlIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNoYXJnZXNbaV0gPSBjaGFyZ2U7XG4gICAgICBmdW5jdGlvbiBwb3NpdGlvbihkaW1lbnNpb24sIHNpemUpIHtcbiAgICAgICAgaWYgKCFuZWlnaGJvcnMpIHtcbiAgICAgICAgICBuZWlnaGJvcnMgPSBuZXcgQXJyYXkobik7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IG47ICsraikge1xuICAgICAgICAgICAgbmVpZ2hib3JzW2pdID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgICAgIHZhciBvID0gbGlua3Nbal07XG4gICAgICAgICAgICBuZWlnaGJvcnNbby5zb3VyY2UuaW5kZXhdLnB1c2goby50YXJnZXQpO1xuICAgICAgICAgICAgbmVpZ2hib3JzW28udGFyZ2V0LmluZGV4XS5wdXNoKG8uc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbmRpZGF0ZXMgPSBuZWlnaGJvcnNbaV0sIGogPSAtMSwgbCA9IGNhbmRpZGF0ZXMubGVuZ3RoLCB4O1xuICAgICAgICB3aGlsZSAoKytqIDwgbCkgaWYgKCFpc05hTih4ID0gY2FuZGlkYXRlc1tqXVtkaW1lbnNpb25dKSkgcmV0dXJuIHg7XG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JjZS5yZXN1bWUoKTtcbiAgICB9O1xuICAgIGZvcmNlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZvcmNlLmFscGhhKC4xKTtcbiAgICB9O1xuICAgIGZvcmNlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmb3JjZS5hbHBoYSgwKTtcbiAgICB9O1xuICAgIGZvcmNlLmRyYWcgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghZHJhZykgZHJhZyA9IGQzLmJlaGF2aW9yLmRyYWcoKS5vcmlnaW4oZDNfaWRlbnRpdHkpLm9uKFwiZHJhZ3N0YXJ0LmZvcmNlXCIsIGQzX2xheW91dF9mb3JjZURyYWdzdGFydCkub24oXCJkcmFnLmZvcmNlXCIsIGRyYWdtb3ZlKS5vbihcImRyYWdlbmQuZm9yY2VcIiwgZDNfbGF5b3V0X2ZvcmNlRHJhZ2VuZCk7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkcmFnO1xuICAgICAgdGhpcy5vbihcIm1vdXNlb3Zlci5mb3JjZVwiLCBkM19sYXlvdXRfZm9yY2VNb3VzZW92ZXIpLm9uKFwibW91c2VvdXQuZm9yY2VcIiwgZDNfbGF5b3V0X2ZvcmNlTW91c2VvdXQpLmNhbGwoZHJhZyk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBkcmFnbW92ZShkKSB7XG4gICAgICBkLnB4ID0gZDMuZXZlbnQueCwgZC5weSA9IGQzLmV2ZW50Lnk7XG4gICAgICBmb3JjZS5yZXN1bWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGQzLnJlYmluZChmb3JjZSwgZXZlbnQsIFwib25cIik7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9mb3JjZURyYWdzdGFydChkKSB7XG4gICAgZC5maXhlZCB8PSAyO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9mb3JjZURyYWdlbmQoZCkge1xuICAgIGQuZml4ZWQgJj0gfjY7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlTW91c2VvdmVyKGQpIHtcbiAgICBkLmZpeGVkIHw9IDQ7XG4gICAgZC5weCA9IGQueCwgZC5weSA9IGQueTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VNb3VzZW91dChkKSB7XG4gICAgZC5maXhlZCAmPSB+NDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VBY2N1bXVsYXRlKHF1YWQsIGFscGhhLCBjaGFyZ2VzKSB7XG4gICAgdmFyIGN4ID0gMCwgY3kgPSAwO1xuICAgIHF1YWQuY2hhcmdlID0gMDtcbiAgICBpZiAoIXF1YWQubGVhZikge1xuICAgICAgdmFyIG5vZGVzID0gcXVhZC5ub2RlcywgbiA9IG5vZGVzLmxlbmd0aCwgaSA9IC0xLCBjO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgYyA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAoYyA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgZDNfbGF5b3V0X2ZvcmNlQWNjdW11bGF0ZShjLCBhbHBoYSwgY2hhcmdlcyk7XG4gICAgICAgIHF1YWQuY2hhcmdlICs9IGMuY2hhcmdlO1xuICAgICAgICBjeCArPSBjLmNoYXJnZSAqIGMuY3g7XG4gICAgICAgIGN5ICs9IGMuY2hhcmdlICogYy5jeTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHF1YWQucG9pbnQpIHtcbiAgICAgIGlmICghcXVhZC5sZWFmKSB7XG4gICAgICAgIHF1YWQucG9pbnQueCArPSBNYXRoLnJhbmRvbSgpIC0gLjU7XG4gICAgICAgIHF1YWQucG9pbnQueSArPSBNYXRoLnJhbmRvbSgpIC0gLjU7XG4gICAgICB9XG4gICAgICB2YXIgayA9IGFscGhhICogY2hhcmdlc1txdWFkLnBvaW50LmluZGV4XTtcbiAgICAgIHF1YWQuY2hhcmdlICs9IHF1YWQucG9pbnRDaGFyZ2UgPSBrO1xuICAgICAgY3ggKz0gayAqIHF1YWQucG9pbnQueDtcbiAgICAgIGN5ICs9IGsgKiBxdWFkLnBvaW50Lnk7XG4gICAgfVxuICAgIHF1YWQuY3ggPSBjeCAvIHF1YWQuY2hhcmdlO1xuICAgIHF1YWQuY3kgPSBjeSAvIHF1YWQuY2hhcmdlO1xuICB9XG4gIHZhciBkM19sYXlvdXRfZm9yY2VMaW5rRGlzdGFuY2UgPSAyMCwgZDNfbGF5b3V0X2ZvcmNlTGlua1N0cmVuZ3RoID0gMSwgZDNfbGF5b3V0X2ZvcmNlQ2hhcmdlRGlzdGFuY2UyID0gSW5maW5pdHk7XG4gIGQzLmxheW91dC5oaWVyYXJjaHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc29ydCA9IGQzX2xheW91dF9oaWVyYXJjaHlTb3J0LCBjaGlsZHJlbiA9IGQzX2xheW91dF9oaWVyYXJjaHlDaGlsZHJlbiwgdmFsdWUgPSBkM19sYXlvdXRfaGllcmFyY2h5VmFsdWU7XG4gICAgZnVuY3Rpb24gaGllcmFyY2h5KHJvb3QpIHtcbiAgICAgIHZhciBzdGFjayA9IFsgcm9vdCBdLCBub2RlcyA9IFtdLCBub2RlO1xuICAgICAgcm9vdC5kZXB0aCA9IDA7XG4gICAgICB3aGlsZSAoKG5vZGUgPSBzdGFjay5wb3AoKSkgIT0gbnVsbCkge1xuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICBpZiAoKGNoaWxkcyA9IGNoaWxkcmVuLmNhbGwoaGllcmFyY2h5LCBub2RlLCBub2RlLmRlcHRoKSkgJiYgKG4gPSBjaGlsZHMubGVuZ3RoKSkge1xuICAgICAgICAgIHZhciBuLCBjaGlsZHMsIGNoaWxkO1xuICAgICAgICAgIHdoaWxlICgtLW4gPj0gMCkge1xuICAgICAgICAgICAgc3RhY2sucHVzaChjaGlsZCA9IGNoaWxkc1tuXSk7XG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlKSBub2RlLnZhbHVlID0gMDtcbiAgICAgICAgICBub2RlLmNoaWxkcmVuID0gY2hpbGRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2YWx1ZSkgbm9kZS52YWx1ZSA9ICt2YWx1ZS5jYWxsKGhpZXJhcmNoeSwgbm9kZSwgbm9kZS5kZXB0aCkgfHwgMDtcbiAgICAgICAgICBkZWxldGUgbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB2YXIgY2hpbGRzLCBwYXJlbnQ7XG4gICAgICAgIGlmIChzb3J0ICYmIChjaGlsZHMgPSBub2RlLmNoaWxkcmVuKSkgY2hpbGRzLnNvcnQoc29ydCk7XG4gICAgICAgIGlmICh2YWx1ZSAmJiAocGFyZW50ID0gbm9kZS5wYXJlbnQpKSBwYXJlbnQudmFsdWUgKz0gbm9kZS52YWx1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICBoaWVyYXJjaHkuc29ydCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnQ7XG4gICAgICBzb3J0ID0geDtcbiAgICAgIHJldHVybiBoaWVyYXJjaHk7XG4gICAgfTtcbiAgICBoaWVyYXJjaHkuY2hpbGRyZW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjaGlsZHJlbjtcbiAgICAgIGNoaWxkcmVuID0geDtcbiAgICAgIHJldHVybiBoaWVyYXJjaHk7XG4gICAgfTtcbiAgICBoaWVyYXJjaHkudmFsdWUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZTtcbiAgICAgIHZhbHVlID0geDtcbiAgICAgIHJldHVybiBoaWVyYXJjaHk7XG4gICAgfTtcbiAgICBoaWVyYXJjaHkucmV2YWx1ZSA9IGZ1bmN0aW9uKHJvb3QpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLmNoaWxkcmVuKSBub2RlLnZhbHVlID0gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICB2YXIgcGFyZW50O1xuICAgICAgICAgIGlmICghbm9kZS5jaGlsZHJlbikgbm9kZS52YWx1ZSA9ICt2YWx1ZS5jYWxsKGhpZXJhcmNoeSwgbm9kZSwgbm9kZS5kZXB0aCkgfHwgMDtcbiAgICAgICAgICBpZiAocGFyZW50ID0gbm9kZS5wYXJlbnQpIHBhcmVudC52YWx1ZSArPSBub2RlLnZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb290O1xuICAgIH07XG4gICAgcmV0dXJuIGhpZXJhcmNoeTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZChvYmplY3QsIGhpZXJhcmNoeSkge1xuICAgIGQzLnJlYmluZChvYmplY3QsIGhpZXJhcmNoeSwgXCJzb3J0XCIsIFwiY2hpbGRyZW5cIiwgXCJ2YWx1ZVwiKTtcbiAgICBvYmplY3Qubm9kZXMgPSBvYmplY3Q7XG4gICAgb2JqZWN0LmxpbmtzID0gZDNfbGF5b3V0X2hpZXJhcmNoeUxpbmtzO1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QmVmb3JlKG5vZGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGVzID0gWyBub2RlIF07XG4gICAgd2hpbGUgKChub2RlID0gbm9kZXMucG9wKCkpICE9IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgICAgaWYgKChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICB2YXIgbiwgY2hpbGRyZW47XG4gICAgICAgIHdoaWxlICgtLW4gPj0gMCkgbm9kZXMucHVzaChjaGlsZHJlbltuXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKG5vZGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGVzID0gWyBub2RlIF0sIG5vZGVzMiA9IFtdO1xuICAgIHdoaWxlICgobm9kZSA9IG5vZGVzLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICBub2RlczIucHVzaChub2RlKTtcbiAgICAgIGlmICgoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSAmJiAobiA9IGNoaWxkcmVuLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbiwgY2hpbGRyZW47XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKChub2RlID0gbm9kZXMyLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhub2RlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeUNoaWxkcmVuKGQpIHtcbiAgICByZXR1cm4gZC5jaGlsZHJlbjtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5VmFsdWUoZCkge1xuICAgIHJldHVybiBkLnZhbHVlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlTb3J0KGEsIGIpIHtcbiAgICByZXR1cm4gYi52YWx1ZSAtIGEudmFsdWU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeUxpbmtzKG5vZGVzKSB7XG4gICAgcmV0dXJuIGQzLm1lcmdlKG5vZGVzLm1hcChmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgIHJldHVybiAocGFyZW50LmNoaWxkcmVuIHx8IFtdKS5tYXAoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IHBhcmVudCxcbiAgICAgICAgICB0YXJnZXQ6IGNoaWxkXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KSk7XG4gIH1cbiAgZDMubGF5b3V0LnBhcnRpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCksIHNpemUgPSBbIDEsIDEgXTtcbiAgICBmdW5jdGlvbiBwb3NpdGlvbihub2RlLCB4LCBkeCwgZHkpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBub2RlLnggPSB4O1xuICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGR5O1xuICAgICAgbm9kZS5keCA9IGR4O1xuICAgICAgbm9kZS5keSA9IGR5O1xuICAgICAgaWYgKGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuLCBjLCBkO1xuICAgICAgICBkeCA9IG5vZGUudmFsdWUgPyBkeCAvIG5vZGUudmFsdWUgOiAwO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIHBvc2l0aW9uKGMgPSBjaGlsZHJlbltpXSwgeCwgZCA9IGMudmFsdWUgKiBkeCwgZHkpO1xuICAgICAgICAgIHggKz0gZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBkZXB0aChub2RlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLCBkID0gMDtcbiAgICAgIGlmIChjaGlsZHJlbiAmJiAobiA9IGNoaWxkcmVuLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbjtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIGQgPSBNYXRoLm1heChkLCBkZXB0aChjaGlsZHJlbltpXSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDEgKyBkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJ0aXRpb24oZCwgaSkge1xuICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSk7XG4gICAgICBwb3NpdGlvbihub2Rlc1swXSwgMCwgc2l6ZVswXSwgc2l6ZVsxXSAvIGRlcHRoKG5vZGVzWzBdKSk7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIHBhcnRpdGlvbi5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSB4O1xuICAgICAgcmV0dXJuIHBhcnRpdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHBhcnRpdGlvbiwgaGllcmFyY2h5KTtcbiAgfTtcbiAgZDMubGF5b3V0LnBpZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IE51bWJlciwgc29ydCA9IGQzX2xheW91dF9waWVTb3J0QnlWYWx1ZSwgc3RhcnRBbmdsZSA9IDAsIGVuZEFuZ2xlID0gz4QsIHBhZEFuZ2xlID0gMDtcbiAgICBmdW5jdGlvbiBwaWUoZGF0YSkge1xuICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCwgdmFsdWVzID0gZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICByZXR1cm4gK3ZhbHVlLmNhbGwocGllLCBkLCBpKTtcbiAgICAgIH0pLCBhID0gKyh0eXBlb2Ygc3RhcnRBbmdsZSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc3RhcnRBbmdsZSksIGRhID0gKHR5cGVvZiBlbmRBbmdsZSA9PT0gXCJmdW5jdGlvblwiID8gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGVuZEFuZ2xlKSAtIGEsIHAgPSBNYXRoLm1pbihNYXRoLmFicyhkYSkgLyBuLCArKHR5cGVvZiBwYWRBbmdsZSA9PT0gXCJmdW5jdGlvblwiID8gcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHBhZEFuZ2xlKSksIHBhID0gcCAqIChkYSA8IDAgPyAtMSA6IDEpLCBzdW0gPSBkMy5zdW0odmFsdWVzKSwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwLCBpbmRleCA9IGQzLnJhbmdlKG4pLCBhcmNzID0gW10sIHY7XG4gICAgICBpZiAoc29ydCAhPSBudWxsKSBpbmRleC5zb3J0KHNvcnQgPT09IGQzX2xheW91dF9waWVTb3J0QnlWYWx1ZSA/IGZ1bmN0aW9uKGksIGopIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlc1tqXSAtIHZhbHVlc1tpXTtcbiAgICAgIH0gOiBmdW5jdGlvbihpLCBqKSB7XG4gICAgICAgIHJldHVybiBzb3J0KGRhdGFbaV0sIGRhdGFbal0pO1xuICAgICAgfSk7XG4gICAgICBpbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgYXJjc1tpXSA9IHtcbiAgICAgICAgICBkYXRhOiBkYXRhW2ldLFxuICAgICAgICAgIHZhbHVlOiB2ID0gdmFsdWVzW2ldLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IGEsXG4gICAgICAgICAgZW5kQW5nbGU6IGEgKz0gdiAqIGsgKyBwYSxcbiAgICAgICAgICBwYWRBbmdsZTogcFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYXJjcztcbiAgICB9XG4gICAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWU7XG4gICAgICB2YWx1ZSA9IF87XG4gICAgICByZXR1cm4gcGllO1xuICAgIH07XG4gICAgcGllLnNvcnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0O1xuICAgICAgc29ydCA9IF87XG4gICAgICByZXR1cm4gcGllO1xuICAgIH07XG4gICAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGFydEFuZ2xlO1xuICAgICAgc3RhcnRBbmdsZSA9IF87XG4gICAgICByZXR1cm4gcGllO1xuICAgIH07XG4gICAgcGllLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZW5kQW5nbGU7XG4gICAgICBlbmRBbmdsZSA9IF87XG4gICAgICByZXR1cm4gcGllO1xuICAgIH07XG4gICAgcGllLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkQW5nbGU7XG4gICAgICBwYWRBbmdsZSA9IF87XG4gICAgICByZXR1cm4gcGllO1xuICAgIH07XG4gICAgcmV0dXJuIHBpZTtcbiAgfTtcbiAgdmFyIGQzX2xheW91dF9waWVTb3J0QnlWYWx1ZSA9IHt9O1xuICBkMy5sYXlvdXQuc3RhY2sgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gZDNfaWRlbnRpdHksIG9yZGVyID0gZDNfbGF5b3V0X3N0YWNrT3JkZXJEZWZhdWx0LCBvZmZzZXQgPSBkM19sYXlvdXRfc3RhY2tPZmZzZXRaZXJvLCBvdXQgPSBkM19sYXlvdXRfc3RhY2tPdXQsIHggPSBkM19sYXlvdXRfc3RhY2tYLCB5ID0gZDNfbGF5b3V0X3N0YWNrWTtcbiAgICBmdW5jdGlvbiBzdGFjayhkYXRhLCBpbmRleCkge1xuICAgICAgaWYgKCEobiA9IGRhdGEubGVuZ3RoKSkgcmV0dXJuIGRhdGE7XG4gICAgICB2YXIgc2VyaWVzID0gZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICByZXR1cm4gdmFsdWVzLmNhbGwoc3RhY2ssIGQsIGkpO1xuICAgICAgfSk7XG4gICAgICB2YXIgcG9pbnRzID0gc2VyaWVzLm1hcChmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLm1hcChmdW5jdGlvbih2LCBpKSB7XG4gICAgICAgICAgcmV0dXJuIFsgeC5jYWxsKHN0YWNrLCB2LCBpKSwgeS5jYWxsKHN0YWNrLCB2LCBpKSBdO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdmFyIG9yZGVycyA9IG9yZGVyLmNhbGwoc3RhY2ssIHBvaW50cywgaW5kZXgpO1xuICAgICAgc2VyaWVzID0gZDMucGVybXV0ZShzZXJpZXMsIG9yZGVycyk7XG4gICAgICBwb2ludHMgPSBkMy5wZXJtdXRlKHBvaW50cywgb3JkZXJzKTtcbiAgICAgIHZhciBvZmZzZXRzID0gb2Zmc2V0LmNhbGwoc3RhY2ssIHBvaW50cywgaW5kZXgpO1xuICAgICAgdmFyIG0gPSBzZXJpZXNbMF0ubGVuZ3RoLCBuLCBpLCBqLCBvO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICBvdXQuY2FsbChzdGFjaywgc2VyaWVzWzBdW2pdLCBvID0gb2Zmc2V0c1tqXSwgcG9pbnRzWzBdW2pdWzFdKTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IG47ICsraSkge1xuICAgICAgICAgIG91dC5jYWxsKHN0YWNrLCBzZXJpZXNbaV1bal0sIG8gKz0gcG9pbnRzW2kgLSAxXVtqXVsxXSwgcG9pbnRzW2ldW2pdWzFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHN0YWNrLnZhbHVlcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZhbHVlcztcbiAgICAgIHZhbHVlcyA9IHg7XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICBzdGFjay5vcmRlciA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9yZGVyO1xuICAgICAgb3JkZXIgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGQzX2xheW91dF9zdGFja09yZGVycy5nZXQoeCkgfHwgZDNfbGF5b3V0X3N0YWNrT3JkZXJEZWZhdWx0O1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gICAgc3RhY2sub2Zmc2V0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb2Zmc2V0O1xuICAgICAgb2Zmc2V0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBkM19sYXlvdXRfc3RhY2tPZmZzZXRzLmdldCh4KSB8fCBkM19sYXlvdXRfc3RhY2tPZmZzZXRaZXJvO1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gICAgc3RhY2sueCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHg7XG4gICAgICB4ID0gejtcbiAgICAgIHJldHVybiBzdGFjaztcbiAgICB9O1xuICAgIHN0YWNrLnkgPSBmdW5jdGlvbih6KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5O1xuICAgICAgeSA9IHo7XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICBzdGFjay5vdXQgPSBmdW5jdGlvbih6KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvdXQ7XG4gICAgICBvdXQgPSB6O1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gICAgcmV0dXJuIHN0YWNrO1xuICB9O1xuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tYKGQpIHtcbiAgICByZXR1cm4gZC54O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja1koZCkge1xuICAgIHJldHVybiBkLnk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrT3V0KGQsIHkwLCB5KSB7XG4gICAgZC55MCA9IHkwO1xuICAgIGQueSA9IHk7XG4gIH1cbiAgdmFyIGQzX2xheW91dF9zdGFja09yZGVycyA9IGQzLm1hcCh7XG4gICAgXCJpbnNpZGUtb3V0XCI6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIGksIGosIG1heCA9IGRhdGEubWFwKGQzX2xheW91dF9zdGFja01heEluZGV4KSwgc3VtcyA9IGRhdGEubWFwKGQzX2xheW91dF9zdGFja1JlZHVjZVN1bSksIGluZGV4ID0gZDMucmFuZ2Uobikuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBtYXhbYV0gLSBtYXhbYl07XG4gICAgICB9KSwgdG9wID0gMCwgYm90dG9tID0gMCwgdG9wcyA9IFtdLCBib3R0b21zID0gW107XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGogPSBpbmRleFtpXTtcbiAgICAgICAgaWYgKHRvcCA8IGJvdHRvbSkge1xuICAgICAgICAgIHRvcCArPSBzdW1zW2pdO1xuICAgICAgICAgIHRvcHMucHVzaChqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBib3R0b20gKz0gc3Vtc1tqXTtcbiAgICAgICAgICBib3R0b21zLnB1c2goaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBib3R0b21zLnJldmVyc2UoKS5jb25jYXQodG9wcyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZDMucmFuZ2UoZGF0YS5sZW5ndGgpLnJldmVyc2UoKTtcbiAgICB9LFxuICAgIFwiZGVmYXVsdFwiOiBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHRcbiAgfSk7XG4gIHZhciBkM19sYXlvdXRfc3RhY2tPZmZzZXRzID0gZDMubWFwKHtcbiAgICBzaWxob3VldHRlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLCBtID0gZGF0YVswXS5sZW5ndGgsIHN1bXMgPSBbXSwgbWF4ID0gMCwgaSwgaiwgbywgeTAgPSBbXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgZm9yIChpID0gMCwgbyA9IDA7IGkgPCBuOyBpKyspIG8gKz0gZGF0YVtpXVtqXVsxXTtcbiAgICAgICAgaWYgKG8gPiBtYXgpIG1heCA9IG87XG4gICAgICAgIHN1bXMucHVzaChvKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgeTBbal0gPSAobWF4IC0gc3Vtc1tqXSkgLyAyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHkwO1xuICAgIH0sXG4gICAgd2lnZ2xlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLCB4ID0gZGF0YVswXSwgbSA9IHgubGVuZ3RoLCBpLCBqLCBrLCBzMSwgczIsIHMzLCBkeCwgbywgbzAsIHkwID0gW107XG4gICAgICB5MFswXSA9IG8gPSBvMCA9IDA7XG4gICAgICBmb3IgKGogPSAxOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIHMxID0gMDsgaSA8IG47ICsraSkgczEgKz0gZGF0YVtpXVtqXVsxXTtcbiAgICAgICAgZm9yIChpID0gMCwgczIgPSAwLCBkeCA9IHhbal1bMF0gLSB4W2ogLSAxXVswXTsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGZvciAoayA9IDAsIHMzID0gKGRhdGFbaV1bal1bMV0gLSBkYXRhW2ldW2ogLSAxXVsxXSkgLyAoMiAqIGR4KTsgayA8IGk7ICsraykge1xuICAgICAgICAgICAgczMgKz0gKGRhdGFba11bal1bMV0gLSBkYXRhW2tdW2ogLSAxXVsxXSkgLyBkeDtcbiAgICAgICAgICB9XG4gICAgICAgICAgczIgKz0gczMgKiBkYXRhW2ldW2pdWzFdO1xuICAgICAgICB9XG4gICAgICAgIHkwW2pdID0gbyAtPSBzMSA/IHMyIC8gczEgKiBkeCA6IDA7XG4gICAgICAgIGlmIChvIDwgbzApIG8wID0gbztcbiAgICAgIH1cbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHkwW2pdIC09IG8wO1xuICAgICAgcmV0dXJuIHkwO1xuICAgIH0sXG4gICAgZXhwYW5kOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLCBtID0gZGF0YVswXS5sZW5ndGgsIGsgPSAxIC8gbiwgaSwgaiwgbywgeTAgPSBbXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgZm9yIChpID0gMCwgbyA9IDA7IGkgPCBuOyBpKyspIG8gKz0gZGF0YVtpXVtqXVsxXTtcbiAgICAgICAgaWYgKG8pIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIGRhdGFbaV1bal1bMV0gLz0gbzsgZWxzZSBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBkYXRhW2ldW2pdWzFdID0gaztcbiAgICAgIH1cbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHkwW2pdID0gMDtcbiAgICAgIHJldHVybiB5MDtcbiAgICB9LFxuICAgIHplcm86IGQzX2xheW91dF9zdGFja09mZnNldFplcm9cbiAgfSk7XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdChkYXRhKSB7XG4gICAgcmV0dXJuIGQzLnJhbmdlKGRhdGEubGVuZ3RoKTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tPZmZzZXRaZXJvKGRhdGEpIHtcbiAgICB2YXIgaiA9IC0xLCBtID0gZGF0YVswXS5sZW5ndGgsIHkwID0gW107XG4gICAgd2hpbGUgKCsraiA8IG0pIHkwW2pdID0gMDtcbiAgICByZXR1cm4geTA7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrTWF4SW5kZXgoYXJyYXkpIHtcbiAgICB2YXIgaSA9IDEsIGogPSAwLCB2ID0gYXJyYXlbMF1bMV0sIGssIG4gPSBhcnJheS5sZW5ndGg7XG4gICAgZm9yICg7aSA8IG47ICsraSkge1xuICAgICAgaWYgKChrID0gYXJyYXlbaV1bMV0pID4gdikge1xuICAgICAgICBqID0gaTtcbiAgICAgICAgdiA9IGs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBqO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja1JlZHVjZVN1bShkKSB7XG4gICAgcmV0dXJuIGQucmVkdWNlKGQzX2xheW91dF9zdGFja1N1bSwgMCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrU3VtKHAsIGQpIHtcbiAgICByZXR1cm4gcCArIGRbMV07XG4gIH1cbiAgZDMubGF5b3V0Lmhpc3RvZ3JhbSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmcmVxdWVuY3kgPSB0cnVlLCB2YWx1ZXIgPSBOdW1iZXIsIHJhbmdlciA9IGQzX2xheW91dF9oaXN0b2dyYW1SYW5nZSwgYmlubmVyID0gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpblN0dXJnZXM7XG4gICAgZnVuY3Rpb24gaGlzdG9ncmFtKGRhdGEsIGkpIHtcbiAgICAgIHZhciBiaW5zID0gW10sIHZhbHVlcyA9IGRhdGEubWFwKHZhbHVlciwgdGhpcyksIHJhbmdlID0gcmFuZ2VyLmNhbGwodGhpcywgdmFsdWVzLCBpKSwgdGhyZXNob2xkcyA9IGJpbm5lci5jYWxsKHRoaXMsIHJhbmdlLCB2YWx1ZXMsIGkpLCBiaW4sIGkgPSAtMSwgbiA9IHZhbHVlcy5sZW5ndGgsIG0gPSB0aHJlc2hvbGRzLmxlbmd0aCAtIDEsIGsgPSBmcmVxdWVuY3kgPyAxIDogMSAvIG4sIHg7XG4gICAgICB3aGlsZSAoKytpIDwgbSkge1xuICAgICAgICBiaW4gPSBiaW5zW2ldID0gW107XG4gICAgICAgIGJpbi5keCA9IHRocmVzaG9sZHNbaSArIDFdIC0gKGJpbi54ID0gdGhyZXNob2xkc1tpXSk7XG4gICAgICAgIGJpbi55ID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChtID4gMCkge1xuICAgICAgICBpID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgeCA9IHZhbHVlc1tpXTtcbiAgICAgICAgICBpZiAoeCA+PSByYW5nZVswXSAmJiB4IDw9IHJhbmdlWzFdKSB7XG4gICAgICAgICAgICBiaW4gPSBiaW5zW2QzLmJpc2VjdCh0aHJlc2hvbGRzLCB4LCAxLCBtKSAtIDFdO1xuICAgICAgICAgICAgYmluLnkgKz0gaztcbiAgICAgICAgICAgIGJpbi5wdXNoKGRhdGFbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJpbnM7XG4gICAgfVxuICAgIGhpc3RvZ3JhbS52YWx1ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZhbHVlcjtcbiAgICAgIHZhbHVlciA9IHg7XG4gICAgICByZXR1cm4gaGlzdG9ncmFtO1xuICAgIH07XG4gICAgaGlzdG9ncmFtLnJhbmdlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2VyO1xuICAgICAgcmFuZ2VyID0gZDNfZnVuY3Rvcih4KTtcbiAgICAgIHJldHVybiBoaXN0b2dyYW07XG4gICAgfTtcbiAgICBoaXN0b2dyYW0uYmlucyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGJpbm5lcjtcbiAgICAgIGJpbm5lciA9IHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIGQzX2xheW91dF9oaXN0b2dyYW1CaW5GaXhlZChyYW5nZSwgeCk7XG4gICAgICB9IDogZDNfZnVuY3Rvcih4KTtcbiAgICAgIHJldHVybiBoaXN0b2dyYW07XG4gICAgfTtcbiAgICBoaXN0b2dyYW0uZnJlcXVlbmN5ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZnJlcXVlbmN5O1xuICAgICAgZnJlcXVlbmN5ID0gISF4O1xuICAgICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgICB9O1xuICAgIHJldHVybiBoaXN0b2dyYW07XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaXN0b2dyYW1CaW5TdHVyZ2VzKHJhbmdlLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpbkZpeGVkKHJhbmdlLCBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWVzLmxlbmd0aCkgLyBNYXRoLkxOMiArIDEpKTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQocmFuZ2UsIG4pIHtcbiAgICB2YXIgeCA9IC0xLCBiID0gK3JhbmdlWzBdLCBtID0gKHJhbmdlWzFdIC0gYikgLyBuLCBmID0gW107XG4gICAgd2hpbGUgKCsreCA8PSBuKSBmW3hdID0gbSAqIHggKyBiO1xuICAgIHJldHVybiBmO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaXN0b2dyYW1SYW5nZSh2YWx1ZXMpIHtcbiAgICByZXR1cm4gWyBkMy5taW4odmFsdWVzKSwgZDMubWF4KHZhbHVlcykgXTtcbiAgfVxuICBkMy5sYXlvdXQucGFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCkuc29ydChkM19sYXlvdXRfcGFja1NvcnQpLCBwYWRkaW5nID0gMCwgc2l6ZSA9IFsgMSwgMSBdLCByYWRpdXM7XG4gICAgZnVuY3Rpb24gcGFjayhkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSwgcm9vdCA9IG5vZGVzWzBdLCB3ID0gc2l6ZVswXSwgaCA9IHNpemVbMV0sIHIgPSByYWRpdXMgPT0gbnVsbCA/IE1hdGguc3FydCA6IHR5cGVvZiByYWRpdXMgPT09IFwiZnVuY3Rpb25cIiA/IHJhZGl1cyA6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmFkaXVzO1xuICAgICAgfTtcbiAgICAgIHJvb3QueCA9IHJvb3QueSA9IDA7XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihkKSB7XG4gICAgICAgIGQuciA9ICtyKGQudmFsdWUpO1xuICAgICAgfSk7XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBkM19sYXlvdXRfcGFja1NpYmxpbmdzKTtcbiAgICAgIGlmIChwYWRkaW5nKSB7XG4gICAgICAgIHZhciBkciA9IHBhZGRpbmcgKiAocmFkaXVzID8gMSA6IE1hdGgubWF4KDIgKiByb290LnIgLyB3LCAyICogcm9vdC5yIC8gaCkpIC8gMjtcbiAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIGQuciArPSBkcjtcbiAgICAgICAgfSk7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGQzX2xheW91dF9wYWNrU2libGluZ3MpO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgZC5yIC09IGRyO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKHJvb3QsIHcgLyAyLCBoIC8gMiwgcmFkaXVzID8gMSA6IDEgLyBNYXRoLm1heCgyICogcm9vdC5yIC8gdywgMiAqIHJvb3QuciAvIGgpKTtcbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgcGFjay5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSBfO1xuICAgICAgcmV0dXJuIHBhY2s7XG4gICAgfTtcbiAgICBwYWNrLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhZGl1cztcbiAgICAgIHJhZGl1cyA9IF8gPT0gbnVsbCB8fCB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6ICtfO1xuICAgICAgcmV0dXJuIHBhY2s7XG4gICAgfTtcbiAgICBwYWNrLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRkaW5nO1xuICAgICAgcGFkZGluZyA9ICtfO1xuICAgICAgcmV0dXJuIHBhY2s7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZChwYWNrLCBoaWVyYXJjaHkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1NvcnQoYSwgYikge1xuICAgIHJldHVybiBhLnZhbHVlIC0gYi52YWx1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja0luc2VydChhLCBiKSB7XG4gICAgdmFyIGMgPSBhLl9wYWNrX25leHQ7XG4gICAgYS5fcGFja19uZXh0ID0gYjtcbiAgICBiLl9wYWNrX3ByZXYgPSBhO1xuICAgIGIuX3BhY2tfbmV4dCA9IGM7XG4gICAgYy5fcGFja19wcmV2ID0gYjtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1NwbGljZShhLCBiKSB7XG4gICAgYS5fcGFja19uZXh0ID0gYjtcbiAgICBiLl9wYWNrX3ByZXYgPSBhO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrSW50ZXJzZWN0cyhhLCBiKSB7XG4gICAgdmFyIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueSwgZHIgPSBhLnIgKyBiLnI7XG4gICAgcmV0dXJuIC45OTkgKiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tTaWJsaW5ncyhub2RlKSB7XG4gICAgaWYgKCEobm9kZXMgPSBub2RlLmNoaWxkcmVuKSB8fCAhKG4gPSBub2Rlcy5sZW5ndGgpKSByZXR1cm47XG4gICAgdmFyIG5vZGVzLCB4TWluID0gSW5maW5pdHksIHhNYXggPSAtSW5maW5pdHksIHlNaW4gPSBJbmZpbml0eSwgeU1heCA9IC1JbmZpbml0eSwgYSwgYiwgYywgaSwgaiwgaywgbjtcbiAgICBmdW5jdGlvbiBib3VuZChub2RlKSB7XG4gICAgICB4TWluID0gTWF0aC5taW4obm9kZS54IC0gbm9kZS5yLCB4TWluKTtcbiAgICAgIHhNYXggPSBNYXRoLm1heChub2RlLnggKyBub2RlLnIsIHhNYXgpO1xuICAgICAgeU1pbiA9IE1hdGgubWluKG5vZGUueSAtIG5vZGUuciwgeU1pbik7XG4gICAgICB5TWF4ID0gTWF0aC5tYXgobm9kZS55ICsgbm9kZS5yLCB5TWF4KTtcbiAgICB9XG4gICAgbm9kZXMuZm9yRWFjaChkM19sYXlvdXRfcGFja0xpbmspO1xuICAgIGEgPSBub2Rlc1swXTtcbiAgICBhLnggPSAtYS5yO1xuICAgIGEueSA9IDA7XG4gICAgYm91bmQoYSk7XG4gICAgaWYgKG4gPiAxKSB7XG4gICAgICBiID0gbm9kZXNbMV07XG4gICAgICBiLnggPSBiLnI7XG4gICAgICBiLnkgPSAwO1xuICAgICAgYm91bmQoYik7XG4gICAgICBpZiAobiA+IDIpIHtcbiAgICAgICAgYyA9IG5vZGVzWzJdO1xuICAgICAgICBkM19sYXlvdXRfcGFja1BsYWNlKGEsIGIsIGMpO1xuICAgICAgICBib3VuZChjKTtcbiAgICAgICAgZDNfbGF5b3V0X3BhY2tJbnNlcnQoYSwgYyk7XG4gICAgICAgIGEuX3BhY2tfcHJldiA9IGM7XG4gICAgICAgIGQzX2xheW91dF9wYWNrSW5zZXJ0KGMsIGIpO1xuICAgICAgICBiID0gYS5fcGFja19uZXh0O1xuICAgICAgICBmb3IgKGkgPSAzOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgZDNfbGF5b3V0X3BhY2tQbGFjZShhLCBiLCBjID0gbm9kZXNbaV0pO1xuICAgICAgICAgIHZhciBpc2VjdCA9IDAsIHMxID0gMSwgczIgPSAxO1xuICAgICAgICAgIGZvciAoaiA9IGIuX3BhY2tfbmV4dDsgaiAhPT0gYjsgaiA9IGouX3BhY2tfbmV4dCwgczErKykge1xuICAgICAgICAgICAgaWYgKGQzX2xheW91dF9wYWNrSW50ZXJzZWN0cyhqLCBjKSkge1xuICAgICAgICAgICAgICBpc2VjdCA9IDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNlY3QgPT0gMSkge1xuICAgICAgICAgICAgZm9yIChrID0gYS5fcGFja19wcmV2OyBrICE9PSBqLl9wYWNrX3ByZXY7IGsgPSBrLl9wYWNrX3ByZXYsIHMyKyspIHtcbiAgICAgICAgICAgICAgaWYgKGQzX2xheW91dF9wYWNrSW50ZXJzZWN0cyhrLCBjKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc2VjdCkge1xuICAgICAgICAgICAgaWYgKHMxIDwgczIgfHwgczEgPT0gczIgJiYgYi5yIDwgYS5yKSBkM19sYXlvdXRfcGFja1NwbGljZShhLCBiID0gaik7IGVsc2UgZDNfbGF5b3V0X3BhY2tTcGxpY2UoYSA9IGssIGIpO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkM19sYXlvdXRfcGFja0luc2VydChhLCBjKTtcbiAgICAgICAgICAgIGIgPSBjO1xuICAgICAgICAgICAgYm91bmQoYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjeCA9ICh4TWluICsgeE1heCkgLyAyLCBjeSA9ICh5TWluICsgeU1heCkgLyAyLCBjciA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgYyA9IG5vZGVzW2ldO1xuICAgICAgYy54IC09IGN4O1xuICAgICAgYy55IC09IGN5O1xuICAgICAgY3IgPSBNYXRoLm1heChjciwgYy5yICsgTWF0aC5zcXJ0KGMueCAqIGMueCArIGMueSAqIGMueSkpO1xuICAgIH1cbiAgICBub2RlLnIgPSBjcjtcbiAgICBub2Rlcy5mb3JFYWNoKGQzX2xheW91dF9wYWNrVW5saW5rKTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja0xpbmsobm9kZSkge1xuICAgIG5vZGUuX3BhY2tfbmV4dCA9IG5vZGUuX3BhY2tfcHJldiA9IG5vZGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tVbmxpbmsobm9kZSkge1xuICAgIGRlbGV0ZSBub2RlLl9wYWNrX25leHQ7XG4gICAgZGVsZXRlIG5vZGUuX3BhY2tfcHJldjtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1RyYW5zZm9ybShub2RlLCB4LCB5LCBrKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBub2RlLnggPSB4ICs9IGsgKiBub2RlLng7XG4gICAgbm9kZS55ID0geSArPSBrICogbm9kZS55O1xuICAgIG5vZGUuciAqPSBrO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19sYXlvdXRfcGFja1RyYW5zZm9ybShjaGlsZHJlbltpXSwgeCwgeSwgayk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrUGxhY2UoYSwgYiwgYykge1xuICAgIHZhciBkYiA9IGEuciArIGMuciwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuICAgIGlmIChkYiAmJiAoZHggfHwgZHkpKSB7XG4gICAgICB2YXIgZGEgPSBiLnIgKyBjLnIsIGRjID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICBkYSAqPSBkYTtcbiAgICAgIGRiICo9IGRiO1xuICAgICAgdmFyIHggPSAuNSArIChkYiAtIGRhKSAvICgyICogZGMpLCB5ID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIDIgKiBkYSAqIChkYiArIGRjKSAtIChkYiAtPSBkYykgKiBkYiAtIGRhICogZGEpKSAvICgyICogZGMpO1xuICAgICAgYy54ID0gYS54ICsgeCAqIGR4ICsgeSAqIGR5O1xuICAgICAgYy55ID0gYS55ICsgeCAqIGR5IC0geSAqIGR4O1xuICAgIH0gZWxzZSB7XG4gICAgICBjLnggPSBhLnggKyBkYjtcbiAgICAgIGMueSA9IGEueTtcbiAgICB9XG4gIH1cbiAgZDMubGF5b3V0LnRyZWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLnNvcnQobnVsbCkudmFsdWUobnVsbCksIHNlcGFyYXRpb24gPSBkM19sYXlvdXRfdHJlZVNlcGFyYXRpb24sIHNpemUgPSBbIDEsIDEgXSwgbm9kZVNpemUgPSBudWxsO1xuICAgIGZ1bmN0aW9uIHRyZWUoZCwgaSkge1xuICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSksIHJvb3QwID0gbm9kZXNbMF0sIHJvb3QxID0gd3JhcFRyZWUocm9vdDApO1xuICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdDEsIGZpcnN0V2FsayksIHJvb3QxLnBhcmVudC5tID0gLXJvb3QxLno7XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdDEsIHNlY29uZFdhbGspO1xuICAgICAgaWYgKG5vZGVTaXplKSBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdDAsIHNpemVOb2RlKTsgZWxzZSB7XG4gICAgICAgIHZhciBsZWZ0ID0gcm9vdDAsIHJpZ2h0ID0gcm9vdDAsIGJvdHRvbSA9IHJvb3QwO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdDAsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICBpZiAobm9kZS54IDwgbGVmdC54KSBsZWZ0ID0gbm9kZTtcbiAgICAgICAgICBpZiAobm9kZS54ID4gcmlnaHQueCkgcmlnaHQgPSBub2RlO1xuICAgICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHR4ID0gc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyIC0gbGVmdC54LCBreCA9IHNpemVbMF0gLyAocmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMiArIHR4KSwga3kgPSBzaXplWzFdIC8gKGJvdHRvbS5kZXB0aCB8fCAxKTtcbiAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QmVmb3JlKHJvb3QwLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgbm9kZS54ID0gKG5vZGUueCArIHR4KSAqIGt4O1xuICAgICAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBreTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyYXBUcmVlKHJvb3QwKSB7XG4gICAgICB2YXIgcm9vdDEgPSB7XG4gICAgICAgIEE6IG51bGwsXG4gICAgICAgIGNoaWxkcmVuOiBbIHJvb3QwIF1cbiAgICAgIH0sIHF1ZXVlID0gWyByb290MSBdLCBub2RlMTtcbiAgICAgIHdoaWxlICgobm9kZTEgPSBxdWV1ZS5wb3AoKSkgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBjaGlsZHJlbiA9IG5vZGUxLmNoaWxkcmVuLCBjaGlsZCwgaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBxdWV1ZS5wdXNoKChjaGlsZHJlbltpXSA9IGNoaWxkID0ge1xuICAgICAgICAgICAgXzogY2hpbGRyZW5baV0sXG4gICAgICAgICAgICBwYXJlbnQ6IG5vZGUxLFxuICAgICAgICAgICAgY2hpbGRyZW46IChjaGlsZCA9IGNoaWxkcmVuW2ldLmNoaWxkcmVuKSAmJiBjaGlsZC5zbGljZSgpIHx8IFtdLFxuICAgICAgICAgICAgQTogbnVsbCxcbiAgICAgICAgICAgIGE6IG51bGwsXG4gICAgICAgICAgICB6OiAwLFxuICAgICAgICAgICAgbTogMCxcbiAgICAgICAgICAgIGM6IDAsXG4gICAgICAgICAgICBzOiAwLFxuICAgICAgICAgICAgdDogbnVsbCxcbiAgICAgICAgICAgIGk6IGlcbiAgICAgICAgICB9KS5hID0gY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcm9vdDEuY2hpbGRyZW5bMF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpcnN0V2Fsayh2KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLCBzaWJsaW5ncyA9IHYucGFyZW50LmNoaWxkcmVuLCB3ID0gdi5pID8gc2libGluZ3Nbdi5pIC0gMV0gOiBudWxsO1xuICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICBkM19sYXlvdXRfdHJlZVNoaWZ0KHYpO1xuICAgICAgICB2YXIgbWlkcG9pbnQgPSAoY2hpbGRyZW5bMF0ueiArIGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnopIC8gMjtcbiAgICAgICAgaWYgKHcpIHtcbiAgICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICAgICAgICB2Lm0gPSB2LnogLSBtaWRwb2ludDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2LnogPSBtaWRwb2ludDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh3KSB7XG4gICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgfVxuICAgICAgdi5wYXJlbnQuQSA9IGFwcG9ydGlvbih2LCB3LCB2LnBhcmVudC5BIHx8IHNpYmxpbmdzWzBdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2Vjb25kV2Fsayh2KSB7XG4gICAgICB2Ll8ueCA9IHYueiArIHYucGFyZW50Lm07XG4gICAgICB2Lm0gKz0gdi5wYXJlbnQubTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXBwb3J0aW9uKHYsIHcsIGFuY2VzdG9yKSB7XG4gICAgICBpZiAodykge1xuICAgICAgICB2YXIgdmlwID0gdiwgdm9wID0gdiwgdmltID0gdywgdm9tID0gdmlwLnBhcmVudC5jaGlsZHJlblswXSwgc2lwID0gdmlwLm0sIHNvcCA9IHZvcC5tLCBzaW0gPSB2aW0ubSwgc29tID0gdm9tLm0sIHNoaWZ0O1xuICAgICAgICB3aGlsZSAodmltID0gZDNfbGF5b3V0X3RyZWVSaWdodCh2aW0pLCB2aXAgPSBkM19sYXlvdXRfdHJlZUxlZnQodmlwKSwgdmltICYmIHZpcCkge1xuICAgICAgICAgIHZvbSA9IGQzX2xheW91dF90cmVlTGVmdCh2b20pO1xuICAgICAgICAgIHZvcCA9IGQzX2xheW91dF90cmVlUmlnaHQodm9wKTtcbiAgICAgICAgICB2b3AuYSA9IHY7XG4gICAgICAgICAgc2hpZnQgPSB2aW0ueiArIHNpbSAtIHZpcC56IC0gc2lwICsgc2VwYXJhdGlvbih2aW0uXywgdmlwLl8pO1xuICAgICAgICAgIGlmIChzaGlmdCA+IDApIHtcbiAgICAgICAgICAgIGQzX2xheW91dF90cmVlTW92ZShkM19sYXlvdXRfdHJlZUFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLCB2LCBzaGlmdCk7XG4gICAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG4gICAgICAgICAgICBzb3AgKz0gc2hpZnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpbSArPSB2aW0ubTtcbiAgICAgICAgICBzaXAgKz0gdmlwLm07XG4gICAgICAgICAgc29tICs9IHZvbS5tO1xuICAgICAgICAgIHNvcCArPSB2b3AubTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmltICYmICFkM19sYXlvdXRfdHJlZVJpZ2h0KHZvcCkpIHtcbiAgICAgICAgICB2b3AudCA9IHZpbTtcbiAgICAgICAgICB2b3AubSArPSBzaW0gLSBzb3A7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpcCAmJiAhZDNfbGF5b3V0X3RyZWVMZWZ0KHZvbSkpIHtcbiAgICAgICAgICB2b20udCA9IHZpcDtcbiAgICAgICAgICB2b20ubSArPSBzaXAgLSBzb207XG4gICAgICAgICAgYW5jZXN0b3IgPSB2O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYW5jZXN0b3I7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNpemVOb2RlKG5vZGUpIHtcbiAgICAgIG5vZGUueCAqPSBzaXplWzBdO1xuICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIHNpemVbMV07XG4gICAgfVxuICAgIHRyZWUuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNlcGFyYXRpb247XG4gICAgICBzZXBhcmF0aW9uID0geDtcbiAgICAgIHJldHVybiB0cmVlO1xuICAgIH07XG4gICAgdHJlZS5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBudWxsIDogc2l6ZTtcbiAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSA9PSBudWxsID8gc2l6ZU5vZGUgOiBudWxsO1xuICAgICAgcmV0dXJuIHRyZWU7XG4gICAgfTtcbiAgICB0cmVlLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBzaXplIDogbnVsbDtcbiAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSA9PSBudWxsID8gbnVsbCA6IHNpemVOb2RlO1xuICAgICAgcmV0dXJuIHRyZWU7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZCh0cmVlLCBoaWVyYXJjaHkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZVNlcGFyYXRpb24oYSwgYikge1xuICAgIHJldHVybiBhLnBhcmVudCA9PSBiLnBhcmVudCA/IDEgOiAyO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlTGVmdCh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgICByZXR1cm4gY2hpbGRyZW4ubGVuZ3RoID8gY2hpbGRyZW5bMF0gOiB2LnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVSaWdodCh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbiwgbjtcbiAgICByZXR1cm4gKG4gPSBjaGlsZHJlbi5sZW5ndGgpID8gY2hpbGRyZW5bbiAtIDFdIDogdi50O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlTW92ZSh3bSwgd3AsIHNoaWZ0KSB7XG4gICAgdmFyIGNoYW5nZSA9IHNoaWZ0IC8gKHdwLmkgLSB3bS5pKTtcbiAgICB3cC5jIC09IGNoYW5nZTtcbiAgICB3cC5zICs9IHNoaWZ0O1xuICAgIHdtLmMgKz0gY2hhbmdlO1xuICAgIHdwLnogKz0gc2hpZnQ7XG4gICAgd3AubSArPSBzaGlmdDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZVNoaWZ0KHYpIHtcbiAgICB2YXIgc2hpZnQgPSAwLCBjaGFuZ2UgPSAwLCBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sIGkgPSBjaGlsZHJlbi5sZW5ndGgsIHc7XG4gICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICB3ID0gY2hpbGRyZW5baV07XG4gICAgICB3LnogKz0gc2hpZnQ7XG4gICAgICB3Lm0gKz0gc2hpZnQ7XG4gICAgICBzaGlmdCArPSB3LnMgKyAoY2hhbmdlICs9IHcuYyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlQW5jZXN0b3IodmltLCB2LCBhbmNlc3Rvcikge1xuICAgIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3RvcjtcbiAgfVxuICBkMy5sYXlvdXQuY2x1c3RlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCkuc29ydChudWxsKS52YWx1ZShudWxsKSwgc2VwYXJhdGlvbiA9IGQzX2xheW91dF90cmVlU2VwYXJhdGlvbiwgc2l6ZSA9IFsgMSwgMSBdLCBub2RlU2l6ZSA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIGNsdXN0ZXIoZCwgaSkge1xuICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSksIHJvb3QgPSBub2Rlc1swXSwgcHJldmlvdXNOb2RlLCB4ID0gMDtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIG5vZGUueCA9IGQzX2xheW91dF9jbHVzdGVyWChjaGlsZHJlbik7XG4gICAgICAgICAgbm9kZS55ID0gZDNfbGF5b3V0X2NsdXN0ZXJZKGNoaWxkcmVuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnggPSBwcmV2aW91c05vZGUgPyB4ICs9IHNlcGFyYXRpb24obm9kZSwgcHJldmlvdXNOb2RlKSA6IDA7XG4gICAgICAgICAgbm9kZS55ID0gMDtcbiAgICAgICAgICBwcmV2aW91c05vZGUgPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBsZWZ0ID0gZDNfbGF5b3V0X2NsdXN0ZXJMZWZ0KHJvb3QpLCByaWdodCA9IGQzX2xheW91dF9jbHVzdGVyUmlnaHQocm9vdCksIHgwID0gbGVmdC54IC0gc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLCB4MSA9IHJpZ2h0LnggKyBzZXBhcmF0aW9uKHJpZ2h0LCBsZWZ0KSAvIDI7XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBub2RlU2l6ZSA/IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgbm9kZS54ID0gKG5vZGUueCAtIHJvb3QueCkgKiBzaXplWzBdO1xuICAgICAgICBub2RlLnkgPSAocm9vdC55IC0gbm9kZS55KSAqIHNpemVbMV07XG4gICAgICB9IDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54IC0geDApIC8gKHgxIC0geDApICogc2l6ZVswXTtcbiAgICAgICAgbm9kZS55ID0gKDEgLSAocm9vdC55ID8gbm9kZS55IC8gcm9vdC55IDogMSkpICogc2l6ZVsxXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICBjbHVzdGVyLnNlcGFyYXRpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzZXBhcmF0aW9uO1xuICAgICAgc2VwYXJhdGlvbiA9IHg7XG4gICAgICByZXR1cm4gY2x1c3RlcjtcbiAgICB9O1xuICAgIGNsdXN0ZXIuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG5vZGVTaXplID8gbnVsbCA6IHNpemU7XG4gICAgICBub2RlU2l6ZSA9IChzaXplID0geCkgPT0gbnVsbDtcbiAgICAgIHJldHVybiBjbHVzdGVyO1xuICAgIH07XG4gICAgY2x1c3Rlci5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG5vZGVTaXplID8gc2l6ZSA6IG51bGw7XG4gICAgICBub2RlU2l6ZSA9IChzaXplID0geCkgIT0gbnVsbDtcbiAgICAgIHJldHVybiBjbHVzdGVyO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQoY2x1c3RlciwgaGllcmFyY2h5KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2NsdXN0ZXJZKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIDEgKyBkMy5tYXgoY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQueTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlclgoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gY2hpbGRyZW4ucmVkdWNlKGZ1bmN0aW9uKHgsIGNoaWxkKSB7XG4gICAgICByZXR1cm4geCArIGNoaWxkLng7XG4gICAgfSwgMCkgLyBjaGlsZHJlbi5sZW5ndGg7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2NsdXN0ZXJMZWZ0KG5vZGUpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIHJldHVybiBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPyBkM19sYXlvdXRfY2x1c3RlckxlZnQoY2hpbGRyZW5bMF0pIDogbm9kZTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlclJpZ2h0KG5vZGUpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLCBuO1xuICAgIHJldHVybiBjaGlsZHJlbiAmJiAobiA9IGNoaWxkcmVuLmxlbmd0aCkgPyBkM19sYXlvdXRfY2x1c3RlclJpZ2h0KGNoaWxkcmVuW24gLSAxXSkgOiBub2RlO1xuICB9XG4gIGQzLmxheW91dC50cmVlbWFwID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKSwgcm91bmQgPSBNYXRoLnJvdW5kLCBzaXplID0gWyAxLCAxIF0sIHBhZGRpbmcgPSBudWxsLCBwYWQgPSBkM19sYXlvdXRfdHJlZW1hcFBhZE51bGwsIHN0aWNreSA9IGZhbHNlLCBzdGlja2llcywgbW9kZSA9IFwic3F1YXJpZnlcIiwgcmF0aW8gPSAuNSAqICgxICsgTWF0aC5zcXJ0KDUpKTtcbiAgICBmdW5jdGlvbiBzY2FsZShjaGlsZHJlbiwgaykge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IGNoaWxkcmVuLmxlbmd0aCwgY2hpbGQsIGFyZWE7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBhcmVhID0gKGNoaWxkID0gY2hpbGRyZW5baV0pLnZhbHVlICogKGsgPCAwID8gMCA6IGspO1xuICAgICAgICBjaGlsZC5hcmVhID0gaXNOYU4oYXJlYSkgfHwgYXJlYSA8PSAwID8gMCA6IGFyZWE7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNxdWFyaWZ5KG5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHZhciByZWN0ID0gcGFkKG5vZGUpLCByb3cgPSBbXSwgcmVtYWluaW5nID0gY2hpbGRyZW4uc2xpY2UoKSwgY2hpbGQsIGJlc3QgPSBJbmZpbml0eSwgc2NvcmUsIHUgPSBtb2RlID09PSBcInNsaWNlXCIgPyByZWN0LmR4IDogbW9kZSA9PT0gXCJkaWNlXCIgPyByZWN0LmR5IDogbW9kZSA9PT0gXCJzbGljZS1kaWNlXCIgPyBub2RlLmRlcHRoICYgMSA/IHJlY3QuZHkgOiByZWN0LmR4IDogTWF0aC5taW4ocmVjdC5keCwgcmVjdC5keSksIG47XG4gICAgICAgIHNjYWxlKHJlbWFpbmluZywgcmVjdC5keCAqIHJlY3QuZHkgLyBub2RlLnZhbHVlKTtcbiAgICAgICAgcm93LmFyZWEgPSAwO1xuICAgICAgICB3aGlsZSAoKG4gPSByZW1haW5pbmcubGVuZ3RoKSA+IDApIHtcbiAgICAgICAgICByb3cucHVzaChjaGlsZCA9IHJlbWFpbmluZ1tuIC0gMV0pO1xuICAgICAgICAgIHJvdy5hcmVhICs9IGNoaWxkLmFyZWE7XG4gICAgICAgICAgaWYgKG1vZGUgIT09IFwic3F1YXJpZnlcIiB8fCAoc2NvcmUgPSB3b3JzdChyb3csIHUpKSA8PSBiZXN0KSB7XG4gICAgICAgICAgICByZW1haW5pbmcucG9wKCk7XG4gICAgICAgICAgICBiZXN0ID0gc2NvcmU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvdy5hcmVhIC09IHJvdy5wb3AoKS5hcmVhO1xuICAgICAgICAgICAgcG9zaXRpb24ocm93LCB1LCByZWN0LCBmYWxzZSk7XG4gICAgICAgICAgICB1ID0gTWF0aC5taW4ocmVjdC5keCwgcmVjdC5keSk7XG4gICAgICAgICAgICByb3cubGVuZ3RoID0gcm93LmFyZWEgPSAwO1xuICAgICAgICAgICAgYmVzdCA9IEluZmluaXR5O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocm93Lmxlbmd0aCkge1xuICAgICAgICAgIHBvc2l0aW9uKHJvdywgdSwgcmVjdCwgdHJ1ZSk7XG4gICAgICAgICAgcm93Lmxlbmd0aCA9IHJvdy5hcmVhID0gMDtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKHNxdWFyaWZ5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RpY2tpZnkobm9kZSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlY3QgPSBwYWQobm9kZSksIHJlbWFpbmluZyA9IGNoaWxkcmVuLnNsaWNlKCksIGNoaWxkLCByb3cgPSBbXTtcbiAgICAgICAgc2NhbGUocmVtYWluaW5nLCByZWN0LmR4ICogcmVjdC5keSAvIG5vZGUudmFsdWUpO1xuICAgICAgICByb3cuYXJlYSA9IDA7XG4gICAgICAgIHdoaWxlIChjaGlsZCA9IHJlbWFpbmluZy5wb3AoKSkge1xuICAgICAgICAgIHJvdy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICByb3cuYXJlYSArPSBjaGlsZC5hcmVhO1xuICAgICAgICAgIGlmIChjaGlsZC56ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uKHJvdywgY2hpbGQueiA/IHJlY3QuZHggOiByZWN0LmR5LCByZWN0LCAhcmVtYWluaW5nLmxlbmd0aCk7XG4gICAgICAgICAgICByb3cubGVuZ3RoID0gcm93LmFyZWEgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKHN0aWNraWZ5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gd29yc3Qocm93LCB1KSB7XG4gICAgICB2YXIgcyA9IHJvdy5hcmVhLCByLCBybWF4ID0gMCwgcm1pbiA9IEluZmluaXR5LCBpID0gLTEsIG4gPSByb3cubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKCEociA9IHJvd1tpXS5hcmVhKSkgY29udGludWU7XG4gICAgICAgIGlmIChyIDwgcm1pbikgcm1pbiA9IHI7XG4gICAgICAgIGlmIChyID4gcm1heCkgcm1heCA9IHI7XG4gICAgICB9XG4gICAgICBzICo9IHM7XG4gICAgICB1ICo9IHU7XG4gICAgICByZXR1cm4gcyA/IE1hdGgubWF4KHUgKiBybWF4ICogcmF0aW8gLyBzLCBzIC8gKHUgKiBybWluICogcmF0aW8pKSA6IEluZmluaXR5O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb3NpdGlvbihyb3csIHUsIHJlY3QsIGZsdXNoKSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcm93Lmxlbmd0aCwgeCA9IHJlY3QueCwgeSA9IHJlY3QueSwgdiA9IHUgPyByb3VuZChyb3cuYXJlYSAvIHUpIDogMCwgbztcbiAgICAgIGlmICh1ID09IHJlY3QuZHgpIHtcbiAgICAgICAgaWYgKGZsdXNoIHx8IHYgPiByZWN0LmR5KSB2ID0gcmVjdC5keTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBvID0gcm93W2ldO1xuICAgICAgICAgIG8ueCA9IHg7XG4gICAgICAgICAgby55ID0geTtcbiAgICAgICAgICBvLmR5ID0gdjtcbiAgICAgICAgICB4ICs9IG8uZHggPSBNYXRoLm1pbihyZWN0LnggKyByZWN0LmR4IC0geCwgdiA/IHJvdW5kKG8uYXJlYSAvIHYpIDogMCk7XG4gICAgICAgIH1cbiAgICAgICAgby56ID0gdHJ1ZTtcbiAgICAgICAgby5keCArPSByZWN0LnggKyByZWN0LmR4IC0geDtcbiAgICAgICAgcmVjdC55ICs9IHY7XG4gICAgICAgIHJlY3QuZHkgLT0gdjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmbHVzaCB8fCB2ID4gcmVjdC5keCkgdiA9IHJlY3QuZHg7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgbyA9IHJvd1tpXTtcbiAgICAgICAgICBvLnggPSB4O1xuICAgICAgICAgIG8ueSA9IHk7XG4gICAgICAgICAgby5keCA9IHY7XG4gICAgICAgICAgeSArPSBvLmR5ID0gTWF0aC5taW4ocmVjdC55ICsgcmVjdC5keSAtIHksIHYgPyByb3VuZChvLmFyZWEgLyB2KSA6IDApO1xuICAgICAgICB9XG4gICAgICAgIG8ueiA9IGZhbHNlO1xuICAgICAgICBvLmR5ICs9IHJlY3QueSArIHJlY3QuZHkgLSB5O1xuICAgICAgICByZWN0LnggKz0gdjtcbiAgICAgICAgcmVjdC5keCAtPSB2O1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmVlbWFwKGQpIHtcbiAgICAgIHZhciBub2RlcyA9IHN0aWNraWVzIHx8IGhpZXJhcmNoeShkKSwgcm9vdCA9IG5vZGVzWzBdO1xuICAgICAgcm9vdC54ID0gcm9vdC55ID0gMDtcbiAgICAgIGlmIChyb290LnZhbHVlKSByb290LmR4ID0gc2l6ZVswXSwgcm9vdC5keSA9IHNpemVbMV07IGVsc2Ugcm9vdC5keCA9IHJvb3QuZHkgPSAwO1xuICAgICAgaWYgKHN0aWNraWVzKSBoaWVyYXJjaHkucmV2YWx1ZShyb290KTtcbiAgICAgIHNjYWxlKFsgcm9vdCBdLCByb290LmR4ICogcm9vdC5keSAvIHJvb3QudmFsdWUpO1xuICAgICAgKHN0aWNraWVzID8gc3RpY2tpZnkgOiBzcXVhcmlmeSkocm9vdCk7XG4gICAgICBpZiAoc3RpY2t5KSBzdGlja2llcyA9IG5vZGVzO1xuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICB0cmVlbWFwLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuICAgICAgc2l6ZSA9IHg7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHRyZWVtYXAucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBhZGRpbmc7XG4gICAgICBmdW5jdGlvbiBwYWRGdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciBwID0geC5jYWxsKHRyZWVtYXAsIG5vZGUsIG5vZGUuZGVwdGgpO1xuICAgICAgICByZXR1cm4gcCA9PSBudWxsID8gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsKG5vZGUpIDogZDNfbGF5b3V0X3RyZWVtYXBQYWQobm9kZSwgdHlwZW9mIHAgPT09IFwibnVtYmVyXCIgPyBbIHAsIHAsIHAsIHAgXSA6IHApO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcGFkQ29uc3RhbnQobm9kZSkge1xuICAgICAgICByZXR1cm4gZDNfbGF5b3V0X3RyZWVtYXBQYWQobm9kZSwgeCk7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZTtcbiAgICAgIHBhZCA9IChwYWRkaW5nID0geCkgPT0gbnVsbCA/IGQzX2xheW91dF90cmVlbWFwUGFkTnVsbCA6ICh0eXBlID0gdHlwZW9mIHgpID09PSBcImZ1bmN0aW9uXCIgPyBwYWRGdW5jdGlvbiA6IHR5cGUgPT09IFwibnVtYmVyXCIgPyAoeCA9IFsgeCwgeCwgeCwgeCBdLCBcbiAgICAgIHBhZENvbnN0YW50KSA6IHBhZENvbnN0YW50O1xuICAgICAgcmV0dXJuIHRyZWVtYXA7XG4gICAgfTtcbiAgICB0cmVlbWFwLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcm91bmQgIT0gTnVtYmVyO1xuICAgICAgcm91bmQgPSB4ID8gTWF0aC5yb3VuZCA6IE51bWJlcjtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgdHJlZW1hcC5zdGlja3kgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGlja3k7XG4gICAgICBzdGlja3kgPSB4O1xuICAgICAgc3RpY2tpZXMgPSBudWxsO1xuICAgICAgcmV0dXJuIHRyZWVtYXA7XG4gICAgfTtcbiAgICB0cmVlbWFwLnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmF0aW87XG4gICAgICByYXRpbyA9IHg7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHRyZWVtYXAubW9kZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1vZGU7XG4gICAgICBtb2RlID0geCArIFwiXCI7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHRyZWVtYXAsIGhpZXJhcmNoeSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlbWFwUGFkTnVsbChub2RlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IG5vZGUueCxcbiAgICAgIHk6IG5vZGUueSxcbiAgICAgIGR4OiBub2RlLmR4LFxuICAgICAgZHk6IG5vZGUuZHlcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlbWFwUGFkKG5vZGUsIHBhZGRpbmcpIHtcbiAgICB2YXIgeCA9IG5vZGUueCArIHBhZGRpbmdbM10sIHkgPSBub2RlLnkgKyBwYWRkaW5nWzBdLCBkeCA9IG5vZGUuZHggLSBwYWRkaW5nWzFdIC0gcGFkZGluZ1szXSwgZHkgPSBub2RlLmR5IC0gcGFkZGluZ1swXSAtIHBhZGRpbmdbMl07XG4gICAgaWYgKGR4IDwgMCkge1xuICAgICAgeCArPSBkeCAvIDI7XG4gICAgICBkeCA9IDA7XG4gICAgfVxuICAgIGlmIChkeSA8IDApIHtcbiAgICAgIHkgKz0gZHkgLyAyO1xuICAgICAgZHkgPSAwO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgeDogeCxcbiAgICAgIHk6IHksXG4gICAgICBkeDogZHgsXG4gICAgICBkeTogZHlcbiAgICB9O1xuICB9XG4gIGQzLnJhbmRvbSA9IHtcbiAgICBub3JtYWw6IGZ1bmN0aW9uKMK1LCDPgykge1xuICAgICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKG4gPCAyKSDPgyA9IDE7XG4gICAgICBpZiAobiA8IDEpIMK1ID0gMDtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHgsIHksIHI7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICB4ID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xuICAgICAgICAgIHkgPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG4gICAgICAgICAgciA9IHggKiB4ICsgeSAqIHk7XG4gICAgICAgIH0gd2hpbGUgKCFyIHx8IHIgPiAxKTtcbiAgICAgICAgcmV0dXJuIMK1ICsgz4MgKiB4ICogTWF0aC5zcXJ0KC0yICogTWF0aC5sb2cocikgLyByKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBsb2dOb3JtYWw6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJhbmRvbSA9IGQzLnJhbmRvbS5ub3JtYWwuYXBwbHkoZDMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmV4cChyYW5kb20oKSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgYmF0ZXM6IGZ1bmN0aW9uKG0pIHtcbiAgICAgIHZhciByYW5kb20gPSBkMy5yYW5kb20uaXJ3aW5IYWxsKG0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmFuZG9tKCkgLyBtO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGlyd2luSGFsbDogZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBzID0gMCwgaiA9IDA7IGogPCBtOyBqKyspIHMgKz0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgZDMuc2NhbGUgPSB7fTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSB7XG4gICAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLCBzdG9wID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gc3RhcnQgPCBzdG9wID8gWyBzdGFydCwgc3RvcCBdIDogWyBzdG9wLCBzdGFydCBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlUmFuZ2Uoc2NhbGUpIHtcbiAgICByZXR1cm4gc2NhbGUucmFuZ2VFeHRlbnQgPyBzY2FsZS5yYW5nZUV4dGVudCgpIDogZDNfc2NhbGVFeHRlbnQoc2NhbGUucmFuZ2UoKSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfYmlsaW5lYXIoZG9tYWluLCByYW5nZSwgdW5pbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpIHtcbiAgICB2YXIgdSA9IHVuaW50ZXJwb2xhdGUoZG9tYWluWzBdLCBkb21haW5bMV0pLCBpID0gaW50ZXJwb2xhdGUocmFuZ2VbMF0sIHJhbmdlWzFdKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGkodSh4KSk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9uaWNlKGRvbWFpbiwgbmljZSkge1xuICAgIHZhciBpMCA9IDAsIGkxID0gZG9tYWluLmxlbmd0aCAtIDEsIHgwID0gZG9tYWluW2kwXSwgeDEgPSBkb21haW5baTFdLCBkeDtcbiAgICBpZiAoeDEgPCB4MCkge1xuICAgICAgZHggPSBpMCwgaTAgPSBpMSwgaTEgPSBkeDtcbiAgICAgIGR4ID0geDAsIHgwID0geDEsIHgxID0gZHg7XG4gICAgfVxuICAgIGRvbWFpbltpMF0gPSBuaWNlLmZsb29yKHgwKTtcbiAgICBkb21haW5baTFdID0gbmljZS5jZWlsKHgxKTtcbiAgICByZXR1cm4gZG9tYWluO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX25pY2VTdGVwKHN0ZXApIHtcbiAgICByZXR1cm4gc3RlcCA/IHtcbiAgICAgIGZsb29yOiBmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHggLyBzdGVwKSAqIHN0ZXA7XG4gICAgICB9LFxuICAgICAgY2VpbDogZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHggLyBzdGVwKSAqIHN0ZXA7XG4gICAgICB9XG4gICAgfSA6IGQzX3NjYWxlX25pY2VJZGVudGl0eTtcbiAgfVxuICB2YXIgZDNfc2NhbGVfbmljZUlkZW50aXR5ID0ge1xuICAgIGZsb29yOiBkM19pZGVudGl0eSxcbiAgICBjZWlsOiBkM19pZGVudGl0eVxuICB9O1xuICBmdW5jdGlvbiBkM19zY2FsZV9wb2x5bGluZWFyKGRvbWFpbiwgcmFuZ2UsIHVuaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKSB7XG4gICAgdmFyIHUgPSBbXSwgaSA9IFtdLCBqID0gMCwgayA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxO1xuICAgIGlmIChkb21haW5ba10gPCBkb21haW5bMF0pIHtcbiAgICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcbiAgICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHdoaWxlICgrK2ogPD0gaykge1xuICAgICAgdS5wdXNoKHVuaW50ZXJwb2xhdGUoZG9tYWluW2ogLSAxXSwgZG9tYWluW2pdKSk7XG4gICAgICBpLnB1c2goaW50ZXJwb2xhdGUocmFuZ2VbaiAtIDFdLCByYW5nZVtqXSkpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgdmFyIGogPSBkMy5iaXNlY3QoZG9tYWluLCB4LCAxLCBrKSAtIDE7XG4gICAgICByZXR1cm4gaVtqXSh1W2pdKHgpKTtcbiAgICB9O1xuICB9XG4gIGQzLnNjYWxlLmxpbmVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9saW5lYXIoWyAwLCAxIF0sIFsgMCwgMSBdLCBkM19pbnRlcnBvbGF0ZSwgZmFsc2UpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXIoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUsIGNsYW1wKSB7XG4gICAgdmFyIG91dHB1dCwgaW5wdXQ7XG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIHZhciBsaW5lYXIgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/IGQzX3NjYWxlX3BvbHlsaW5lYXIgOiBkM19zY2FsZV9iaWxpbmVhciwgdW5pbnRlcnBvbGF0ZSA9IGNsYW1wID8gZDNfdW5pbnRlcnBvbGF0ZUNsYW1wIDogZDNfdW5pbnRlcnBvbGF0ZU51bWJlcjtcbiAgICAgIG91dHB1dCA9IGxpbmVhcihkb21haW4sIHJhbmdlLCB1bmludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSk7XG4gICAgICBpbnB1dCA9IGxpbmVhcihyYW5nZSwgZG9tYWluLCB1bmludGVycG9sYXRlLCBkM19pbnRlcnBvbGF0ZSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBvdXRwdXQoeCk7XG4gICAgfVxuICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHJldHVybiBpbnB1dCh5KTtcbiAgICB9O1xuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcbiAgICAgIGRvbWFpbiA9IHgubWFwKE51bWJlcik7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0geDtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHNjYWxlLnJhbmdlKHgpLmludGVycG9sYXRlKGQzX2ludGVycG9sYXRlUm91bmQpO1xuICAgIH07XG4gICAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGFtcDtcbiAgICAgIGNsYW1wID0geDtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGludGVycG9sYXRlO1xuICAgICAgaW50ZXJwb2xhdGUgPSB4O1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSk7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obSwgZm9ybWF0KSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCk7XG4gICAgfTtcbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24obSkge1xuICAgICAgZDNfc2NhbGVfbGluZWFyTmljZShkb21haW4sIG0pO1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXIoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUsIGNsYW1wKTtcbiAgICB9O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyUmViaW5kKHNjYWxlLCBsaW5lYXIpIHtcbiAgICByZXR1cm4gZDMucmViaW5kKHNjYWxlLCBsaW5lYXIsIFwicmFuZ2VcIiwgXCJyYW5nZVJvdW5kXCIsIFwiaW50ZXJwb2xhdGVcIiwgXCJjbGFtcFwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJOaWNlKGRvbWFpbiwgbSkge1xuICAgIGQzX3NjYWxlX25pY2UoZG9tYWluLCBkM19zY2FsZV9uaWNlU3RlcChkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKVsyXSkpO1xuICAgIGQzX3NjYWxlX25pY2UoZG9tYWluLCBkM19zY2FsZV9uaWNlU3RlcChkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKVsyXSkpO1xuICAgIHJldHVybiBkb21haW47XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlKGRvbWFpbiwgbSkge1xuICAgIGlmIChtID09IG51bGwpIG0gPSAxMDtcbiAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSwgc3BhbiA9IGV4dGVudFsxXSAtIGV4dGVudFswXSwgc3RlcCA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHNwYW4gLyBtKSAvIE1hdGguTE4xMCkpLCBlcnIgPSBtIC8gc3BhbiAqIHN0ZXA7XG4gICAgaWYgKGVyciA8PSAuMTUpIHN0ZXAgKj0gMTA7IGVsc2UgaWYgKGVyciA8PSAuMzUpIHN0ZXAgKj0gNTsgZWxzZSBpZiAoZXJyIDw9IC43NSkgc3RlcCAqPSAyO1xuICAgIGV4dGVudFswXSA9IE1hdGguY2VpbChleHRlbnRbMF0gLyBzdGVwKSAqIHN0ZXA7XG4gICAgZXh0ZW50WzFdID0gTWF0aC5mbG9vcihleHRlbnRbMV0gLyBzdGVwKSAqIHN0ZXAgKyBzdGVwICogLjU7XG4gICAgZXh0ZW50WzJdID0gc3RlcDtcbiAgICByZXR1cm4gZXh0ZW50O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSkge1xuICAgIHJldHVybiBkMy5yYW5nZS5hcHBseShkMywgZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlKGRvbWFpbiwgbSkpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQoZG9tYWluLCBtLCBmb3JtYXQpIHtcbiAgICB2YXIgcmFuZ2UgPSBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKTtcbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICB2YXIgbWF0Y2ggPSBkM19mb3JtYXRfcmUuZXhlYyhmb3JtYXQpO1xuICAgICAgbWF0Y2guc2hpZnQoKTtcbiAgICAgIGlmIChtYXRjaFs4XSA9PT0gXCJzXCIpIHtcbiAgICAgICAgdmFyIHByZWZpeCA9IGQzLmZvcm1hdFByZWZpeChNYXRoLm1heChhYnMocmFuZ2VbMF0pLCBhYnMocmFuZ2VbMV0pKSk7XG4gICAgICAgIGlmICghbWF0Y2hbN10pIG1hdGNoWzddID0gXCIuXCIgKyBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24ocHJlZml4LnNjYWxlKHJhbmdlWzJdKSk7XG4gICAgICAgIG1hdGNoWzhdID0gXCJmXCI7XG4gICAgICAgIGZvcm1hdCA9IGQzLmZvcm1hdChtYXRjaC5qb2luKFwiXCIpKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0KHByZWZpeC5zY2FsZShkKSkgKyBwcmVmaXguc3ltYm9sO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKCFtYXRjaFs3XSkgbWF0Y2hbN10gPSBcIi5cIiArIGQzX3NjYWxlX2xpbmVhckZvcm1hdFByZWNpc2lvbihtYXRjaFs4XSwgcmFuZ2UpO1xuICAgICAgZm9ybWF0ID0gbWF0Y2guam9pbihcIlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybWF0ID0gXCIsLlwiICsgZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uKHJhbmdlWzJdKSArIFwiZlwiO1xuICAgIH1cbiAgICByZXR1cm4gZDMuZm9ybWF0KGZvcm1hdCk7XG4gIH1cbiAgdmFyIGQzX3NjYWxlX2xpbmVhckZvcm1hdFNpZ25pZmljYW50ID0ge1xuICAgIHM6IDEsXG4gICAgZzogMSxcbiAgICBwOiAxLFxuICAgIHI6IDEsXG4gICAgZTogMVxuICB9O1xuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24odmFsdWUpIHtcbiAgICByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjEwICsgLjAxKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJGb3JtYXRQcmVjaXNpb24odHlwZSwgcmFuZ2UpIHtcbiAgICB2YXIgcCA9IGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbihyYW5nZVsyXSk7XG4gICAgcmV0dXJuIHR5cGUgaW4gZDNfc2NhbGVfbGluZWFyRm9ybWF0U2lnbmlmaWNhbnQgPyBNYXRoLmFicyhwIC0gZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uKE1hdGgubWF4KGFicyhyYW5nZVswXSksIGFicyhyYW5nZVsxXSkpKSkgKyArKHR5cGUgIT09IFwiZVwiKSA6IHAgLSAodHlwZSA9PT0gXCIlXCIpICogMjtcbiAgfVxuICBkMy5zY2FsZS5sb2cgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc2NhbGVfbG9nKGQzLnNjYWxlLmxpbmVhcigpLmRvbWFpbihbIDAsIDEgXSksIDEwLCB0cnVlLCBbIDEsIDEwIF0pO1xuICB9O1xuICBmdW5jdGlvbiBkM19zY2FsZV9sb2cobGluZWFyLCBiYXNlLCBwb3NpdGl2ZSwgZG9tYWluKSB7XG4gICAgZnVuY3Rpb24gbG9nKHgpIHtcbiAgICAgIHJldHVybiAocG9zaXRpdmUgPyBNYXRoLmxvZyh4IDwgMCA/IDAgOiB4KSA6IC1NYXRoLmxvZyh4ID4gMCA/IDAgOiAteCkpIC8gTWF0aC5sb2coYmFzZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvdyh4KSB7XG4gICAgICByZXR1cm4gcG9zaXRpdmUgPyBNYXRoLnBvdyhiYXNlLCB4KSA6IC1NYXRoLnBvdyhiYXNlLCAteCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBsaW5lYXIobG9nKHgpKTtcbiAgICB9XG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHBvdyhsaW5lYXIuaW52ZXJ0KHgpKTtcbiAgICB9O1xuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcbiAgICAgIHBvc2l0aXZlID0geFswXSA+PSAwO1xuICAgICAgbGluZWFyLmRvbWFpbigoZG9tYWluID0geC5tYXAoTnVtYmVyKSkubWFwKGxvZykpO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUuYmFzZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGJhc2U7XG4gICAgICBiYXNlID0gK187XG4gICAgICBsaW5lYXIuZG9tYWluKGRvbWFpbi5tYXAobG9nKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbmljZWQgPSBkM19zY2FsZV9uaWNlKGRvbWFpbi5tYXAobG9nKSwgcG9zaXRpdmUgPyBNYXRoIDogZDNfc2NhbGVfbG9nTmljZU5lZ2F0aXZlKTtcbiAgICAgIGxpbmVhci5kb21haW4obmljZWQpO1xuICAgICAgZG9tYWluID0gbmljZWQubWFwKHBvdyk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KGRvbWFpbiksIHRpY2tzID0gW10sIHUgPSBleHRlbnRbMF0sIHYgPSBleHRlbnRbMV0sIGkgPSBNYXRoLmZsb29yKGxvZyh1KSksIGogPSBNYXRoLmNlaWwobG9nKHYpKSwgbiA9IGJhc2UgJSAxID8gMiA6IGJhc2U7XG4gICAgICBpZiAoaXNGaW5pdGUoaiAtIGkpKSB7XG4gICAgICAgIGlmIChwb3NpdGl2ZSkge1xuICAgICAgICAgIGZvciAoO2kgPCBqOyBpKyspIGZvciAodmFyIGsgPSAxOyBrIDwgbjsgaysrKSB0aWNrcy5wdXNoKHBvdyhpKSAqIGspO1xuICAgICAgICAgIHRpY2tzLnB1c2gocG93KGkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aWNrcy5wdXNoKHBvdyhpKSk7XG4gICAgICAgICAgZm9yICg7aSsrIDwgajsgKSBmb3IgKHZhciBrID0gbiAtIDE7IGsgPiAwOyBrLS0pIHRpY2tzLnB1c2gocG93KGkpICogayk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgdGlja3NbaV0gPCB1OyBpKyspIHt9XG4gICAgICAgIGZvciAoaiA9IHRpY2tzLmxlbmd0aDsgdGlja3NbaiAtIDFdID4gdjsgai0tKSB7fVxuICAgICAgICB0aWNrcyA9IHRpY2tzLnNsaWNlKGksIGopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH07XG4gICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKG4sIGZvcm1hdCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZDNfc2NhbGVfbG9nRm9ybWF0O1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBmb3JtYXQgPSBkM19zY2FsZV9sb2dGb3JtYXQ7IGVsc2UgaWYgKHR5cGVvZiBmb3JtYXQgIT09IFwiZnVuY3Rpb25cIikgZm9ybWF0ID0gZDMuZm9ybWF0KGZvcm1hdCk7XG4gICAgICB2YXIgayA9IE1hdGgubWF4KDEsIGJhc2UgKiBuIC8gc2NhbGUudGlja3MoKS5sZW5ndGgpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIGkgPSBkIC8gcG93KE1hdGgucm91bmQobG9nKGQpKSk7XG4gICAgICAgIGlmIChpICogYmFzZSA8IGJhc2UgLSAuNSkgaSAqPSBiYXNlO1xuICAgICAgICByZXR1cm4gaSA8PSBrID8gZm9ybWF0KGQpIDogXCJcIjtcbiAgICAgIH07XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbG9nKGxpbmVhci5jb3B5KCksIGJhc2UsIHBvc2l0aXZlLCBkb21haW4pO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclJlYmluZChzY2FsZSwgbGluZWFyKTtcbiAgfVxuICB2YXIgZDNfc2NhbGVfbG9nRm9ybWF0ID0gZDMuZm9ybWF0KFwiLjBlXCIpLCBkM19zY2FsZV9sb2dOaWNlTmVnYXRpdmUgPSB7XG4gICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiAtTWF0aC5jZWlsKC14KTtcbiAgICB9LFxuICAgIGNlaWw6IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiAtTWF0aC5mbG9vcigteCk7XG4gICAgfVxuICB9O1xuICBkMy5zY2FsZS5wb3cgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc2NhbGVfcG93KGQzLnNjYWxlLmxpbmVhcigpLCAxLCBbIDAsIDEgXSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX3BvdyhsaW5lYXIsIGV4cG9uZW50LCBkb21haW4pIHtcbiAgICB2YXIgcG93cCA9IGQzX3NjYWxlX3Bvd1BvdyhleHBvbmVudCksIHBvd2IgPSBkM19zY2FsZV9wb3dQb3coMSAvIGV4cG9uZW50KTtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICByZXR1cm4gbGluZWFyKHBvd3AoeCkpO1xuICAgIH1cbiAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gcG93YihsaW5lYXIuaW52ZXJ0KHgpKTtcbiAgICB9O1xuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcbiAgICAgIGxpbmVhci5kb21haW4oKGRvbWFpbiA9IHgubWFwKE51bWJlcikpLm1hcChwb3dwKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKG0pIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrcyhkb21haW4sIG0pO1xuICAgIH07XG4gICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKG0sIGZvcm1hdCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQoZG9tYWluLCBtLCBmb3JtYXQpO1xuICAgIH07XG4gICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKG0pIHtcbiAgICAgIHJldHVybiBzY2FsZS5kb21haW4oZDNfc2NhbGVfbGluZWFyTmljZShkb21haW4sIG0pKTtcbiAgICB9O1xuICAgIHNjYWxlLmV4cG9uZW50ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZXhwb25lbnQ7XG4gICAgICBwb3dwID0gZDNfc2NhbGVfcG93UG93KGV4cG9uZW50ID0geCk7XG4gICAgICBwb3diID0gZDNfc2NhbGVfcG93UG93KDEgLyBleHBvbmVudCk7XG4gICAgICBsaW5lYXIuZG9tYWluKGRvbWFpbi5tYXAocG93cCkpO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX3BvdyhsaW5lYXIuY29weSgpLCBleHBvbmVudCwgZG9tYWluKTtcbiAgICB9O1xuICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJSZWJpbmQoc2NhbGUsIGxpbmVhcik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfcG93UG93KGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHggPCAwID8gLU1hdGgucG93KC14LCBlKSA6IE1hdGgucG93KHgsIGUpO1xuICAgIH07XG4gIH1cbiAgZDMuc2NhbGUuc3FydCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5wb3coKS5leHBvbmVudCguNSk7XG4gIH07XG4gIGQzLnNjYWxlLm9yZGluYWwgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc2NhbGVfb3JkaW5hbChbXSwge1xuICAgICAgdDogXCJyYW5nZVwiLFxuICAgICAgYTogWyBbXSBdXG4gICAgfSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX29yZGluYWwoZG9tYWluLCByYW5nZXIpIHtcbiAgICB2YXIgaW5kZXgsIHJhbmdlLCByYW5nZUJhbmQ7XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIHJhbmdlWygoaW5kZXguZ2V0KHgpIHx8IChyYW5nZXIudCA9PT0gXCJyYW5nZVwiID8gaW5kZXguc2V0KHgsIGRvbWFpbi5wdXNoKHgpKSA6IE5hTikpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdGVwcyhzdGFydCwgc3RlcCkge1xuICAgICAgcmV0dXJuIGQzLnJhbmdlKGRvbWFpbi5sZW5ndGgpLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICAgIHJldHVybiBzdGFydCArIHN0ZXAgKiBpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcbiAgICAgIGRvbWFpbiA9IFtdO1xuICAgICAgaW5kZXggPSBuZXcgZDNfTWFwKCk7XG4gICAgICB2YXIgaSA9IC0xLCBuID0geC5sZW5ndGgsIHhpO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKHhpID0geFtpXSkpIGluZGV4LnNldCh4aSwgZG9tYWluLnB1c2goeGkpKTtcbiAgICAgIHJldHVybiBzY2FsZVtyYW5nZXIudF0uYXBwbHkoc2NhbGUsIHJhbmdlci5hKTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2U7XG4gICAgICByYW5nZSA9IHg7XG4gICAgICByYW5nZUJhbmQgPSAwO1xuICAgICAgcmFuZ2VyID0ge1xuICAgICAgICB0OiBcInJhbmdlXCIsXG4gICAgICAgIGE6IGFyZ3VtZW50c1xuICAgICAgfTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlUG9pbnRzID0gZnVuY3Rpb24oeCwgcGFkZGluZykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwYWRkaW5nID0gMDtcbiAgICAgIHZhciBzdGFydCA9IHhbMF0sIHN0b3AgPSB4WzFdLCBzdGVwID0gZG9tYWluLmxlbmd0aCA8IDIgPyAoc3RhcnQgPSAoc3RhcnQgKyBzdG9wKSAvIDIsIFxuICAgICAgMCkgOiAoc3RvcCAtIHN0YXJ0KSAvIChkb21haW4ubGVuZ3RoIC0gMSArIHBhZGRpbmcpO1xuICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIHN0ZXAgKiBwYWRkaW5nIC8gMiwgc3RlcCk7XG4gICAgICByYW5nZUJhbmQgPSAwO1xuICAgICAgcmFuZ2VyID0ge1xuICAgICAgICB0OiBcInJhbmdlUG9pbnRzXCIsXG4gICAgICAgIGE6IGFyZ3VtZW50c1xuICAgICAgfTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlUm91bmRQb2ludHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHBhZGRpbmcgPSAwO1xuICAgICAgdmFyIHN0YXJ0ID0geFswXSwgc3RvcCA9IHhbMV0sIHN0ZXAgPSBkb21haW4ubGVuZ3RoIDwgMiA/IChzdGFydCA9IHN0b3AgPSBNYXRoLnJvdW5kKChzdGFydCArIHN0b3ApIC8gMiksIFxuICAgICAgMCkgOiAoc3RvcCAtIHN0YXJ0KSAvIChkb21haW4ubGVuZ3RoIC0gMSArIHBhZGRpbmcpIHwgMDtcbiAgICAgIHJhbmdlID0gc3RlcHMoc3RhcnQgKyBNYXRoLnJvdW5kKHN0ZXAgKiBwYWRkaW5nIC8gMiArIChzdG9wIC0gc3RhcnQgLSAoZG9tYWluLmxlbmd0aCAtIDEgKyBwYWRkaW5nKSAqIHN0ZXApIC8gMiksIHN0ZXApO1xuICAgICAgcmFuZ2VCYW5kID0gMDtcbiAgICAgIHJhbmdlciA9IHtcbiAgICAgICAgdDogXCJyYW5nZVJvdW5kUG9pbnRzXCIsXG4gICAgICAgIGE6IGFyZ3VtZW50c1xuICAgICAgfTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlQmFuZHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nLCBvdXRlclBhZGRpbmcpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIG91dGVyUGFkZGluZyA9IHBhZGRpbmc7XG4gICAgICB2YXIgcmV2ZXJzZSA9IHhbMV0gPCB4WzBdLCBzdGFydCA9IHhbcmV2ZXJzZSAtIDBdLCBzdG9wID0geFsxIC0gcmV2ZXJzZV0sIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIChkb21haW4ubGVuZ3RoIC0gcGFkZGluZyArIDIgKiBvdXRlclBhZGRpbmcpO1xuICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIHN0ZXAgKiBvdXRlclBhZGRpbmcsIHN0ZXApO1xuICAgICAgaWYgKHJldmVyc2UpIHJhbmdlLnJldmVyc2UoKTtcbiAgICAgIHJhbmdlQmFuZCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmcpO1xuICAgICAgcmFuZ2VyID0ge1xuICAgICAgICB0OiBcInJhbmdlQmFuZHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VSb3VuZEJhbmRzID0gZnVuY3Rpb24oeCwgcGFkZGluZywgb3V0ZXJQYWRkaW5nKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHBhZGRpbmcgPSAwO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBvdXRlclBhZGRpbmcgPSBwYWRkaW5nO1xuICAgICAgdmFyIHJldmVyc2UgPSB4WzFdIDwgeFswXSwgc3RhcnQgPSB4W3JldmVyc2UgLSAwXSwgc3RvcCA9IHhbMSAtIHJldmVyc2VdLCBzdGVwID0gTWF0aC5mbG9vcigoc3RvcCAtIHN0YXJ0KSAvIChkb21haW4ubGVuZ3RoIC0gcGFkZGluZyArIDIgKiBvdXRlclBhZGRpbmcpKTtcbiAgICAgIHJhbmdlID0gc3RlcHMoc3RhcnQgKyBNYXRoLnJvdW5kKChzdG9wIC0gc3RhcnQgLSAoZG9tYWluLmxlbmd0aCAtIHBhZGRpbmcpICogc3RlcCkgLyAyKSwgc3RlcCk7XG4gICAgICBpZiAocmV2ZXJzZSkgcmFuZ2UucmV2ZXJzZSgpO1xuICAgICAgcmFuZ2VCYW5kID0gTWF0aC5yb3VuZChzdGVwICogKDEgLSBwYWRkaW5nKSk7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VSb3VuZEJhbmRzXCIsXG4gICAgICAgIGE6IGFyZ3VtZW50c1xuICAgICAgfTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlQmFuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmdlQmFuZDtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlRXh0ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVFeHRlbnQocmFuZ2VyLmFbMF0pO1xuICAgIH07XG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX29yZGluYWwoZG9tYWluLCByYW5nZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIHNjYWxlLmRvbWFpbihkb21haW4pO1xuICB9XG4gIGQzLnNjYWxlLmNhdGVnb3J5MTAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGQzX2NhdGVnb3J5MTApO1xuICB9O1xuICBkMy5zY2FsZS5jYXRlZ29yeTIwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZShkM19jYXRlZ29yeTIwKTtcbiAgfTtcbiAgZDMuc2NhbGUuY2F0ZWdvcnkyMGIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGQzX2NhdGVnb3J5MjBiKTtcbiAgfTtcbiAgZDMuc2NhbGUuY2F0ZWdvcnkyMGMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGQzX2NhdGVnb3J5MjBjKTtcbiAgfTtcbiAgdmFyIGQzX2NhdGVnb3J5MTAgPSBbIDIwNjIyNjAsIDE2NzQ0MjA2LCAyOTI0NTg4LCAxNDAzNDcyOCwgOTcyNTg4NSwgOTE5NzEzMSwgMTQ5MDczMzAsIDgzNTU3MTEsIDEyMzY5MTg2LCAxNTU2MTc1IF0ubWFwKGQzX3JnYlN0cmluZyk7XG4gIHZhciBkM19jYXRlZ29yeTIwID0gWyAyMDYyMjYwLCAxMTQ1NDQ0MCwgMTY3NDQyMDYsIDE2NzU5NjcyLCAyOTI0NTg4LCAxMDAxODY5OCwgMTQwMzQ3MjgsIDE2NzUwNzQyLCA5NzI1ODg1LCAxMjk1NTg2MSwgOTE5NzEzMSwgMTI4ODUxNDAsIDE0OTA3MzMwLCAxNjIzNDE5NCwgODM1NTcxMSwgMTMwOTI4MDcsIDEyMzY5MTg2LCAxNDQwODU4OSwgMTU1NjE3NSwgMTA0MTA3MjUgXS5tYXAoZDNfcmdiU3RyaW5nKTtcbiAgdmFyIGQzX2NhdGVnb3J5MjBiID0gWyAzNzUwNzc3LCA1Mzk1NjE5LCA3MDQwNzE5LCAxMDI2NDI4NiwgNjUxOTA5NywgOTIxNjU5NCwgMTE5MTUxMTUsIDEzNTU2NjM2LCA5MjAyOTkzLCAxMjQyNjgwOSwgMTUxODY1MTQsIDE1MTkwOTMyLCA4NjY2MTY5LCAxMTM1NjQ5MCwgMTQwNDk2NDMsIDE1MTc3MzcyLCA4MDc3NjgzLCAxMDgzNDMyNCwgMTM1Mjg1MDksIDE0NTg5NjU0IF0ubWFwKGQzX3JnYlN0cmluZyk7XG4gIHZhciBkM19jYXRlZ29yeTIwYyA9IFsgMzI0NDczMywgNzA1NzExMCwgMTA0MDY2MjUsIDEzMDMyNDMxLCAxNTA5NTA1MywgMTY2MTY3NjQsIDE2NjI1MjU5LCAxNjYzNDAxOCwgMzI1MzA3NiwgNzY1MjQ3MCwgMTA2MDcwMDMsIDEzMTAxNTA0LCA3Njk1MjgxLCAxMDM5NDMxMiwgMTIzNjkzNzIsIDE0MzQyODkxLCA2NTEzNTA3LCA5ODY4OTUwLCAxMjQzNDg3NywgMTQyNzcwODEgXS5tYXAoZDNfcmdiU3RyaW5nKTtcbiAgZDMuc2NhbGUucXVhbnRpbGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc2NhbGVfcXVhbnRpbGUoW10sIFtdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfcXVhbnRpbGUoZG9tYWluLCByYW5nZSkge1xuICAgIHZhciB0aHJlc2hvbGRzO1xuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICB2YXIgayA9IDAsIHEgPSByYW5nZS5sZW5ndGg7XG4gICAgICB0aHJlc2hvbGRzID0gW107XG4gICAgICB3aGlsZSAoKytrIDwgcSkgdGhyZXNob2xkc1trIC0gMV0gPSBkMy5xdWFudGlsZShkb21haW4sIGsgLyBxKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgaWYgKCFpc05hTih4ID0gK3gpKSByZXR1cm4gcmFuZ2VbZDMuYmlzZWN0KHRocmVzaG9sZHMsIHgpXTtcbiAgICB9XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0geC5tYXAoZDNfbnVtYmVyKS5maWx0ZXIoZDNfbnVtZXJpYykuc29ydChkM19hc2NlbmRpbmcpO1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2U7XG4gICAgICByYW5nZSA9IHg7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUucXVhbnRpbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhyZXNob2xkcztcbiAgICB9O1xuICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgICAgcmV0dXJuIHkgPCAwID8gWyBOYU4sIE5hTiBdIDogWyB5ID4gMCA/IHRocmVzaG9sZHNbeSAtIDFdIDogZG9tYWluWzBdLCB5IDwgdGhyZXNob2xkcy5sZW5ndGggPyB0aHJlc2hvbGRzW3ldIDogZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSBdO1xuICAgIH07XG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX3F1YW50aWxlKGRvbWFpbiwgcmFuZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfVxuICBkMy5zY2FsZS5xdWFudGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9xdWFudGl6ZSgwLCAxLCBbIDAsIDEgXSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX3F1YW50aXplKHgwLCB4MSwgcmFuZ2UpIHtcbiAgICB2YXIga3gsIGk7XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIHJhbmdlW01hdGgubWF4KDAsIE1hdGgubWluKGksIE1hdGguZmxvb3Ioa3ggKiAoeCAtIHgwKSkpKV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICBreCA9IHJhbmdlLmxlbmd0aCAvICh4MSAtIHgwKTtcbiAgICAgIGkgPSByYW5nZS5sZW5ndGggLSAxO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIHgwLCB4MSBdO1xuICAgICAgeDAgPSAreFswXTtcbiAgICAgIHgxID0gK3hbeC5sZW5ndGggLSAxXTtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhbmdlO1xuICAgICAgcmFuZ2UgPSB4O1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgICAgeSA9IHkgPCAwID8gTmFOIDogeSAvIGt4ICsgeDA7XG4gICAgICByZXR1cm4gWyB5LCB5ICsgMSAvIGt4IF07XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfcXVhbnRpemUoeDAsIHgxLCByYW5nZSk7XG4gICAgfTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9XG4gIGQzLnNjYWxlLnRocmVzaG9sZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV90aHJlc2hvbGQoWyAuNSBdLCBbIDAsIDEgXSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX3RocmVzaG9sZChkb21haW4sIHJhbmdlKSB7XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgaWYgKHggPD0geCkgcmV0dXJuIHJhbmdlW2QzLmJpc2VjdChkb21haW4sIHgpXTtcbiAgICB9XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0gXztcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2U7XG4gICAgICByYW5nZSA9IF87XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgICB5ID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICAgIHJldHVybiBbIGRvbWFpblt5IC0gMV0sIGRvbWFpblt5XSBdO1xuICAgIH07XG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX3RocmVzaG9sZChkb21haW4sIHJhbmdlKTtcbiAgICB9O1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuICBkMy5zY2FsZS5pZGVudGl0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9pZGVudGl0eShbIDAsIDEgXSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2lkZW50aXR5KGRvbWFpbikge1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICAgIHJldHVybiAreDtcbiAgICB9XG4gICAgaWRlbnRpdHkuaW52ZXJ0ID0gaWRlbnRpdHk7XG4gICAgaWRlbnRpdHkuZG9tYWluID0gaWRlbnRpdHkucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG4gICAgICBkb21haW4gPSB4Lm1hcChpZGVudGl0eSk7XG4gICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgfTtcbiAgICBpZGVudGl0eS50aWNrcyA9IGZ1bmN0aW9uKG0pIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrcyhkb21haW4sIG0pO1xuICAgIH07XG4gICAgaWRlbnRpdHkudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKG0sIGZvcm1hdCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQoZG9tYWluLCBtLCBmb3JtYXQpO1xuICAgIH07XG4gICAgaWRlbnRpdHkuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2lkZW50aXR5KGRvbWFpbik7XG4gICAgfTtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgZDMuc3ZnID0ge307XG4gIGZ1bmN0aW9uIGQzX3plcm8oKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgZDMuc3ZnLmFyYyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbm5lclJhZGl1cyA9IGQzX3N2Z19hcmNJbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMgPSBkM19zdmdfYXJjT3V0ZXJSYWRpdXMsIGNvcm5lclJhZGl1cyA9IGQzX3plcm8sIHBhZFJhZGl1cyA9IGQzX3N2Z19hcmNBdXRvLCBzdGFydEFuZ2xlID0gZDNfc3ZnX2FyY1N0YXJ0QW5nbGUsIGVuZEFuZ2xlID0gZDNfc3ZnX2FyY0VuZEFuZ2xlLCBwYWRBbmdsZSA9IGQzX3N2Z19hcmNQYWRBbmdsZTtcbiAgICBmdW5jdGlvbiBhcmMoKSB7XG4gICAgICB2YXIgcjAgPSBNYXRoLm1heCgwLCAraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksIHIxID0gTWF0aC5tYXgoMCwgK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLCBhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGbPgCwgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZs+ALCBkYSA9IE1hdGguYWJzKGExIC0gYTApLCBjdyA9IGEwID4gYTEgPyAwIDogMTtcbiAgICAgIGlmIChyMSA8IHIwKSByYyA9IHIxLCByMSA9IHIwLCByMCA9IHJjO1xuICAgICAgaWYgKGRhID49IM+EzrUpIHJldHVybiBjaXJjbGVTZWdtZW50KHIxLCBjdykgKyAocjAgPyBjaXJjbGVTZWdtZW50KHIwLCAxIC0gY3cpIDogXCJcIikgKyBcIlpcIjtcbiAgICAgIHZhciByYywgY3IsIHJwLCBhcCwgcDAgPSAwLCBwMSA9IDAsIHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgcGF0aCA9IFtdO1xuICAgICAgaWYgKGFwID0gKCtwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDApIC8gMikge1xuICAgICAgICBycCA9IHBhZFJhZGl1cyA9PT0gZDNfc3ZnX2FyY0F1dG8gPyBNYXRoLnNxcnQocjAgKiByMCArIHIxICogcjEpIDogK3BhZFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoIWN3KSBwMSAqPSAtMTtcbiAgICAgICAgaWYgKHIxKSBwMSA9IGQzX2FzaW4ocnAgLyByMSAqIE1hdGguc2luKGFwKSk7XG4gICAgICAgIGlmIChyMCkgcDAgPSBkM19hc2luKHJwIC8gcjAgKiBNYXRoLnNpbihhcCkpO1xuICAgICAgfVxuICAgICAgaWYgKHIxKSB7XG4gICAgICAgIHgwID0gcjEgKiBNYXRoLmNvcyhhMCArIHAxKTtcbiAgICAgICAgeTAgPSByMSAqIE1hdGguc2luKGEwICsgcDEpO1xuICAgICAgICB4MSA9IHIxICogTWF0aC5jb3MoYTEgLSBwMSk7XG4gICAgICAgIHkxID0gcjEgKiBNYXRoLnNpbihhMSAtIHAxKTtcbiAgICAgICAgdmFyIGwxID0gTWF0aC5hYnMoYTEgLSBhMCAtIDIgKiBwMSkgPD0gz4AgPyAwIDogMTtcbiAgICAgICAgaWYgKHAxICYmIGQzX3N2Z19hcmNTd2VlcCh4MCwgeTAsIHgxLCB5MSkgPT09IGN3IF4gbDEpIHtcbiAgICAgICAgICB2YXIgaDEgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgICAgIHgwID0gcjEgKiBNYXRoLmNvcyhoMSk7XG4gICAgICAgICAgeTAgPSByMSAqIE1hdGguc2luKGgxKTtcbiAgICAgICAgICB4MSA9IHkxID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDAgPSB5MCA9IDA7XG4gICAgICB9XG4gICAgICBpZiAocjApIHtcbiAgICAgICAgeDIgPSByMCAqIE1hdGguY29zKGExIC0gcDApO1xuICAgICAgICB5MiA9IHIwICogTWF0aC5zaW4oYTEgLSBwMCk7XG4gICAgICAgIHgzID0gcjAgKiBNYXRoLmNvcyhhMCArIHAwKTtcbiAgICAgICAgeTMgPSByMCAqIE1hdGguc2luKGEwICsgcDApO1xuICAgICAgICB2YXIgbDAgPSBNYXRoLmFicyhhMCAtIGExICsgMiAqIHAwKSA8PSDPgCA/IDAgOiAxO1xuICAgICAgICBpZiAocDAgJiYgZDNfc3ZnX2FyY1N3ZWVwKHgyLCB5MiwgeDMsIHkzKSA9PT0gMSAtIGN3IF4gbDApIHtcbiAgICAgICAgICB2YXIgaDAgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgICAgIHgyID0gcjAgKiBNYXRoLmNvcyhoMCk7XG4gICAgICAgICAgeTIgPSByMCAqIE1hdGguc2luKGgwKTtcbiAgICAgICAgICB4MyA9IHkzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDIgPSB5MiA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoZGEgPiDOtSAmJiAocmMgPSBNYXRoLm1pbihNYXRoLmFicyhyMSAtIHIwKSAvIDIsICtjb3JuZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSkpID4gLjAwMSkge1xuICAgICAgICBjciA9IHIwIDwgcjEgXiBjdyA/IDAgOiAxO1xuICAgICAgICB2YXIgcmMxID0gcmMsIHJjMCA9IHJjO1xuICAgICAgICBpZiAoZGEgPCDPgCkge1xuICAgICAgICAgIHZhciBvYyA9IHgzID09IG51bGwgPyBbIHgyLCB5MiBdIDogeDEgPT0gbnVsbCA/IFsgeDAsIHkwIF0gOiBkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QoWyB4MCwgeTAgXSwgWyB4MywgeTMgXSwgWyB4MSwgeTEgXSwgWyB4MiwgeTIgXSksIGF4ID0geDAgLSBvY1swXSwgYXkgPSB5MCAtIG9jWzFdLCBieCA9IHgxIC0gb2NbMF0sIGJ5ID0geTEgLSBvY1sxXSwga2MgPSAxIC8gTWF0aC5zaW4oTWF0aC5hY29zKChheCAqIGJ4ICsgYXkgKiBieSkgLyAoTWF0aC5zcXJ0KGF4ICogYXggKyBheSAqIGF5KSAqIE1hdGguc3FydChieCAqIGJ4ICsgYnkgKiBieSkpKSAvIDIpLCBsYyA9IE1hdGguc3FydChvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XG4gICAgICAgICAgcmMwID0gTWF0aC5taW4ocmMsIChyMCAtIGxjKSAvIChrYyAtIDEpKTtcbiAgICAgICAgICByYzEgPSBNYXRoLm1pbihyYywgKHIxIC0gbGMpIC8gKGtjICsgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh4MSAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIHQzMCA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyh4MyA9PSBudWxsID8gWyB4MiwgeTIgXSA6IFsgeDMsIHkzIF0sIFsgeDAsIHkwIF0sIHIxLCByYzEsIGN3KSwgdDEyID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKFsgeDEsIHkxIF0sIFsgeDIsIHkyIF0sIHIxLCByYzEsIGN3KTtcbiAgICAgICAgICBpZiAocmMgPT09IHJjMSkge1xuICAgICAgICAgICAgcGF0aC5wdXNoKFwiTVwiLCB0MzBbMF0sIFwiQVwiLCByYzEsIFwiLFwiLCByYzEsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLCB0MzBbMV0sIFwiQVwiLCByMSwgXCIsXCIsIHIxLCBcIiAwIFwiLCAxIC0gY3cgXiBkM19zdmdfYXJjU3dlZXAodDMwWzFdWzBdLCB0MzBbMV1bMV0sIHQxMlsxXVswXSwgdDEyWzFdWzFdKSwgXCIsXCIsIGN3LCBcIiBcIiwgdDEyWzFdLCBcIkFcIiwgcmMxLCBcIixcIiwgcmMxLCBcIiAwIDAsXCIsIGNyLCBcIiBcIiwgdDEyWzBdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGF0aC5wdXNoKFwiTVwiLCB0MzBbMF0sIFwiQVwiLCByYzEsIFwiLFwiLCByYzEsIFwiIDAgMSxcIiwgY3IsIFwiIFwiLCB0MTJbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHgwLCBcIixcIiwgeTApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh4MyAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIHQwMyA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhbIHgwLCB5MCBdLCBbIHgzLCB5MyBdLCByMCwgLXJjMCwgY3cpLCB0MjEgPSBkM19zdmdfYXJjQ29ybmVyVGFuZ2VudHMoWyB4MiwgeTIgXSwgeDEgPT0gbnVsbCA/IFsgeDAsIHkwIF0gOiBbIHgxLCB5MSBdLCByMCwgLXJjMCwgY3cpO1xuICAgICAgICAgIGlmIChyYyA9PT0gcmMwKSB7XG4gICAgICAgICAgICBwYXRoLnB1c2goXCJMXCIsIHQyMVswXSwgXCJBXCIsIHJjMCwgXCIsXCIsIHJjMCwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQyMVsxXSwgXCJBXCIsIHIwLCBcIixcIiwgcjAsIFwiIDAgXCIsIGN3IF4gZDNfc3ZnX2FyY1N3ZWVwKHQyMVsxXVswXSwgdDIxWzFdWzFdLCB0MDNbMV1bMF0sIHQwM1sxXVsxXSksIFwiLFwiLCAxIC0gY3csIFwiIFwiLCB0MDNbMV0sIFwiQVwiLCByYzAsIFwiLFwiLCByYzAsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLCB0MDNbMF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoLnB1c2goXCJMXCIsIHQyMVswXSwgXCJBXCIsIHJjMCwgXCIsXCIsIHJjMCwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQwM1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGgucHVzaChcIkxcIiwgeDIsIFwiLFwiLCB5Mik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdGgucHVzaChcIk1cIiwgeDAsIFwiLFwiLCB5MCk7XG4gICAgICAgIGlmICh4MSAhPSBudWxsKSBwYXRoLnB1c2goXCJBXCIsIHIxLCBcIixcIiwgcjEsIFwiIDAgXCIsIGwxLCBcIixcIiwgY3csIFwiIFwiLCB4MSwgXCIsXCIsIHkxKTtcbiAgICAgICAgcGF0aC5wdXNoKFwiTFwiLCB4MiwgXCIsXCIsIHkyKTtcbiAgICAgICAgaWYgKHgzICE9IG51bGwpIHBhdGgucHVzaChcIkFcIiwgcjAsIFwiLFwiLCByMCwgXCIgMCBcIiwgbDAsIFwiLFwiLCAxIC0gY3csIFwiIFwiLCB4MywgXCIsXCIsIHkzKTtcbiAgICAgIH1cbiAgICAgIHBhdGgucHVzaChcIlpcIik7XG4gICAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaXJjbGVTZWdtZW50KHIxLCBjdykge1xuICAgICAgcmV0dXJuIFwiTTAsXCIgKyByMSArIFwiQVwiICsgcjEgKyBcIixcIiArIHIxICsgXCIgMCAxLFwiICsgY3cgKyBcIiAwLFwiICsgLXIxICsgXCJBXCIgKyByMSArIFwiLFwiICsgcjEgKyBcIiAwIDEsXCIgKyBjdyArIFwiIDAsXCIgKyByMTtcbiAgICB9XG4gICAgYXJjLmlubmVyUmFkaXVzID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW5uZXJSYWRpdXM7XG4gICAgICBpbm5lclJhZGl1cyA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gYXJjO1xuICAgIH07XG4gICAgYXJjLm91dGVyUmFkaXVzID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3V0ZXJSYWRpdXM7XG4gICAgICBvdXRlclJhZGl1cyA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gYXJjO1xuICAgIH07XG4gICAgYXJjLmNvcm5lclJhZGl1cyA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNvcm5lclJhZGl1cztcbiAgICAgIGNvcm5lclJhZGl1cyA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gYXJjO1xuICAgIH07XG4gICAgYXJjLnBhZFJhZGl1cyA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBhZFJhZGl1cztcbiAgICAgIHBhZFJhZGl1cyA9IHYgPT0gZDNfc3ZnX2FyY0F1dG8gPyBkM19zdmdfYXJjQXV0byA6IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gYXJjO1xuICAgIH07XG4gICAgYXJjLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGFydEFuZ2xlO1xuICAgICAgc3RhcnRBbmdsZSA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gYXJjO1xuICAgIH07XG4gICAgYXJjLmVuZEFuZ2xlID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZW5kQW5nbGU7XG4gICAgICBlbmRBbmdsZSA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gYXJjO1xuICAgIH07XG4gICAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkQW5nbGU7XG4gICAgICBwYWRBbmdsZSA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gYXJjO1xuICAgIH07XG4gICAgYXJjLmNlbnRyb2lkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBoYWxmz4A7XG4gICAgICByZXR1cm4gWyBNYXRoLmNvcyhhKSAqIHIsIE1hdGguc2luKGEpICogciBdO1xuICAgIH07XG4gICAgcmV0dXJuIGFyYztcbiAgfTtcbiAgdmFyIGQzX3N2Z19hcmNBdXRvID0gXCJhdXRvXCI7XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNJbm5lclJhZGl1cyhkKSB7XG4gICAgcmV0dXJuIGQuaW5uZXJSYWRpdXM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2FyY091dGVyUmFkaXVzKGQpIHtcbiAgICByZXR1cm4gZC5vdXRlclJhZGl1cztcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfYXJjU3RhcnRBbmdsZShkKSB7XG4gICAgcmV0dXJuIGQuc3RhcnRBbmdsZTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfYXJjRW5kQW5nbGUoZCkge1xuICAgIHJldHVybiBkLmVuZEFuZ2xlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNQYWRBbmdsZShkKSB7XG4gICAgcmV0dXJuIGQgJiYgZC5wYWRBbmdsZTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfYXJjU3dlZXAoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICByZXR1cm4gKHgwIC0geDEpICogeTAgLSAoeTAgLSB5MSkgKiB4MCA+IDAgPyAwIDogMTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfYXJjQ29ybmVyVGFuZ2VudHMocDAsIHAxLCByMSwgcmMsIGN3KSB7XG4gICAgdmFyIHgwMSA9IHAwWzBdIC0gcDFbMF0sIHkwMSA9IHAwWzFdIC0gcDFbMV0sIGxvID0gKGN3ID8gcmMgOiAtcmMpIC8gTWF0aC5zcXJ0KHgwMSAqIHgwMSArIHkwMSAqIHkwMSksIG94ID0gbG8gKiB5MDEsIG95ID0gLWxvICogeDAxLCB4MSA9IHAwWzBdICsgb3gsIHkxID0gcDBbMV0gKyBveSwgeDIgPSBwMVswXSArIG94LCB5MiA9IHAxWzFdICsgb3ksIHgzID0gKHgxICsgeDIpIC8gMiwgeTMgPSAoeTEgKyB5MikgLyAyLCBkeCA9IHgyIC0geDEsIGR5ID0geTIgLSB5MSwgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSwgciA9IHIxIC0gcmMsIEQgPSB4MSAqIHkyIC0geDIgKiB5MSwgZCA9IChkeSA8IDAgPyAtMSA6IDEpICogTWF0aC5zcXJ0KE1hdGgubWF4KDAsIHIgKiByICogZDIgLSBEICogRCkpLCBjeDAgPSAoRCAqIGR5IC0gZHggKiBkKSAvIGQyLCBjeTAgPSAoLUQgKiBkeCAtIGR5ICogZCkgLyBkMiwgY3gxID0gKEQgKiBkeSArIGR4ICogZCkgLyBkMiwgY3kxID0gKC1EICogZHggKyBkeSAqIGQpIC8gZDIsIGR4MCA9IGN4MCAtIHgzLCBkeTAgPSBjeTAgLSB5MywgZHgxID0gY3gxIC0geDMsIGR5MSA9IGN5MSAtIHkzO1xuICAgIGlmIChkeDAgKiBkeDAgKyBkeTAgKiBkeTAgPiBkeDEgKiBkeDEgKyBkeTEgKiBkeTEpIGN4MCA9IGN4MSwgY3kwID0gY3kxO1xuICAgIHJldHVybiBbIFsgY3gwIC0gb3gsIGN5MCAtIG95IF0sIFsgY3gwICogcjEgLyByLCBjeTAgKiByMSAvIHIgXSBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lKHByb2plY3Rpb24pIHtcbiAgICB2YXIgeCA9IGQzX2dlb21fcG9pbnRYLCB5ID0gZDNfZ2VvbV9wb2ludFksIGRlZmluZWQgPSBkM190cnVlLCBpbnRlcnBvbGF0ZSA9IGQzX3N2Z19saW5lTGluZWFyLCBpbnRlcnBvbGF0ZUtleSA9IGludGVycG9sYXRlLmtleSwgdGVuc2lvbiA9IC43O1xuICAgIGZ1bmN0aW9uIGxpbmUoZGF0YSkge1xuICAgICAgdmFyIHNlZ21lbnRzID0gW10sIHBvaW50cyA9IFtdLCBpID0gLTEsIG4gPSBkYXRhLmxlbmd0aCwgZCwgZnggPSBkM19mdW5jdG9yKHgpLCBmeSA9IGQzX2Z1bmN0b3IoeSk7XG4gICAgICBmdW5jdGlvbiBzZWdtZW50KCkge1xuICAgICAgICBzZWdtZW50cy5wdXNoKFwiTVwiLCBpbnRlcnBvbGF0ZShwcm9qZWN0aW9uKHBvaW50cyksIHRlbnNpb24pKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChkZWZpbmVkLmNhbGwodGhpcywgZCA9IGRhdGFbaV0sIGkpKSB7XG4gICAgICAgICAgcG9pbnRzLnB1c2goWyArZnguY2FsbCh0aGlzLCBkLCBpKSwgK2Z5LmNhbGwodGhpcywgZCwgaSkgXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgIHNlZ21lbnQoKTtcbiAgICAgICAgICBwb2ludHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBvaW50cy5sZW5ndGgpIHNlZ21lbnQoKTtcbiAgICAgIHJldHVybiBzZWdtZW50cy5sZW5ndGggPyBzZWdtZW50cy5qb2luKFwiXCIpIDogbnVsbDtcbiAgICB9XG4gICAgbGluZS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDtcbiAgICAgIHggPSBfO1xuICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfTtcbiAgICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5O1xuICAgICAgeSA9IF87XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuICAgIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRlZmluZWQ7XG4gICAgICBkZWZpbmVkID0gXztcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gICAgbGluZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGludGVycG9sYXRlS2V5O1xuICAgICAgaWYgKHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIpIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUgPSBfOyBlbHNlIGludGVycG9sYXRlS2V5ID0gKGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVJbnRlcnBvbGF0b3JzLmdldChfKSB8fCBkM19zdmdfbGluZUxpbmVhcikua2V5O1xuICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfTtcbiAgICBsaW5lLnRlbnNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0ZW5zaW9uO1xuICAgICAgdGVuc2lvbiA9IF87XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuICAgIHJldHVybiBsaW5lO1xuICB9XG4gIGQzLnN2Zy5saW5lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3N2Z19saW5lKGQzX2lkZW50aXR5KTtcbiAgfTtcbiAgdmFyIGQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycyA9IGQzLm1hcCh7XG4gICAgbGluZWFyOiBkM19zdmdfbGluZUxpbmVhcixcbiAgICBcImxpbmVhci1jbG9zZWRcIjogZDNfc3ZnX2xpbmVMaW5lYXJDbG9zZWQsXG4gICAgc3RlcDogZDNfc3ZnX2xpbmVTdGVwLFxuICAgIFwic3RlcC1iZWZvcmVcIjogZDNfc3ZnX2xpbmVTdGVwQmVmb3JlLFxuICAgIFwic3RlcC1hZnRlclwiOiBkM19zdmdfbGluZVN0ZXBBZnRlcixcbiAgICBiYXNpczogZDNfc3ZnX2xpbmVCYXNpcyxcbiAgICBcImJhc2lzLW9wZW5cIjogZDNfc3ZnX2xpbmVCYXNpc09wZW4sXG4gICAgXCJiYXNpcy1jbG9zZWRcIjogZDNfc3ZnX2xpbmVCYXNpc0Nsb3NlZCxcbiAgICBidW5kbGU6IGQzX3N2Z19saW5lQnVuZGxlLFxuICAgIGNhcmRpbmFsOiBkM19zdmdfbGluZUNhcmRpbmFsLFxuICAgIFwiY2FyZGluYWwtb3BlblwiOiBkM19zdmdfbGluZUNhcmRpbmFsT3BlbixcbiAgICBcImNhcmRpbmFsLWNsb3NlZFwiOiBkM19zdmdfbGluZUNhcmRpbmFsQ2xvc2VkLFxuICAgIG1vbm90b25lOiBkM19zdmdfbGluZU1vbm90b25lXG4gIH0pO1xuICBkM19zdmdfbGluZUludGVycG9sYXRvcnMuZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdmFsdWUua2V5ID0ga2V5O1xuICAgIHZhbHVlLmNsb3NlZCA9IC8tY2xvc2VkJC8udGVzdChrZXkpO1xuICB9KTtcbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKSB7XG4gICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPiAxID8gcG9pbnRzLmpvaW4oXCJMXCIpIDogcG9pbnRzICsgXCJaXCI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVMaW5lYXJDbG9zZWQocG9pbnRzKSB7XG4gICAgcmV0dXJuIHBvaW50cy5qb2luKFwiTFwiKSArIFwiWlwiO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lU3RlcChwb2ludHMpIHtcbiAgICB2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoLCBwID0gcG9pbnRzWzBdLCBwYXRoID0gWyBwWzBdLCBcIixcIiwgcFsxXSBdO1xuICAgIHdoaWxlICgrK2kgPCBuKSBwYXRoLnB1c2goXCJIXCIsIChwWzBdICsgKHAgPSBwb2ludHNbaV0pWzBdKSAvIDIsIFwiVlwiLCBwWzFdKTtcbiAgICBpZiAobiA+IDEpIHBhdGgucHVzaChcIkhcIiwgcFswXSk7XG4gICAgcmV0dXJuIHBhdGguam9pbihcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZVN0ZXBCZWZvcmUocG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aCwgcCA9IHBvaW50c1swXSwgcGF0aCA9IFsgcFswXSwgXCIsXCIsIHBbMV0gXTtcbiAgICB3aGlsZSAoKytpIDwgbikgcGF0aC5wdXNoKFwiVlwiLCAocCA9IHBvaW50c1tpXSlbMV0sIFwiSFwiLCBwWzBdKTtcbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lU3RlcEFmdGVyKHBvaW50cykge1xuICAgIHZhciBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGgsIHAgPSBwb2ludHNbMF0sIHBhdGggPSBbIHBbMF0sIFwiLFwiLCBwWzFdIF07XG4gICAgd2hpbGUgKCsraSA8IG4pIHBhdGgucHVzaChcIkhcIiwgKHAgPSBwb2ludHNbaV0pWzBdLCBcIlZcIiwgcFsxXSk7XG4gICAgcmV0dXJuIHBhdGguam9pbihcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsT3Blbihwb2ludHMsIHRlbnNpb24pIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDQgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzFdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cy5zbGljZSgxLCAtMSksIGQzX3N2Z19saW5lQ2FyZGluYWxUYW5nZW50cyhwb2ludHMsIHRlbnNpb24pKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsQ2xvc2VkKHBvaW50cywgdGVuc2lvbikge1xuICAgIHJldHVybiBwb2ludHMubGVuZ3RoIDwgMyA/IGQzX3N2Z19saW5lTGluZWFyQ2xvc2VkKHBvaW50cykgOiBwb2ludHNbMF0gKyBkM19zdmdfbGluZUhlcm1pdGUoKHBvaW50cy5wdXNoKHBvaW50c1swXSksIFxuICAgIHBvaW50cyksIGQzX3N2Z19saW5lQ2FyZGluYWxUYW5nZW50cyhbIHBvaW50c1twb2ludHMubGVuZ3RoIC0gMl0gXS5jb25jYXQocG9pbnRzLCBbIHBvaW50c1sxXSBdKSwgdGVuc2lvbikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWwocG9pbnRzLCB0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPCAzID8gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKSA6IHBvaW50c1swXSArIGQzX3N2Z19saW5lSGVybWl0ZShwb2ludHMsIGQzX3N2Z19saW5lQ2FyZGluYWxUYW5nZW50cyhwb2ludHMsIHRlbnNpb24pKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUhlcm1pdGUocG9pbnRzLCB0YW5nZW50cykge1xuICAgIGlmICh0YW5nZW50cy5sZW5ndGggPCAxIHx8IHBvaW50cy5sZW5ndGggIT0gdGFuZ2VudHMubGVuZ3RoICYmIHBvaW50cy5sZW5ndGggIT0gdGFuZ2VudHMubGVuZ3RoICsgMikge1xuICAgICAgcmV0dXJuIGQzX3N2Z19saW5lTGluZWFyKHBvaW50cyk7XG4gICAgfVxuICAgIHZhciBxdWFkID0gcG9pbnRzLmxlbmd0aCAhPSB0YW5nZW50cy5sZW5ndGgsIHBhdGggPSBcIlwiLCBwMCA9IHBvaW50c1swXSwgcCA9IHBvaW50c1sxXSwgdDAgPSB0YW5nZW50c1swXSwgdCA9IHQwLCBwaSA9IDE7XG4gICAgaWYgKHF1YWQpIHtcbiAgICAgIHBhdGggKz0gXCJRXCIgKyAocFswXSAtIHQwWzBdICogMiAvIDMpICsgXCIsXCIgKyAocFsxXSAtIHQwWzFdICogMiAvIDMpICsgXCIsXCIgKyBwWzBdICsgXCIsXCIgKyBwWzFdO1xuICAgICAgcDAgPSBwb2ludHNbMV07XG4gICAgICBwaSA9IDI7XG4gICAgfVxuICAgIGlmICh0YW5nZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICB0ID0gdGFuZ2VudHNbMV07XG4gICAgICBwID0gcG9pbnRzW3BpXTtcbiAgICAgIHBpKys7XG4gICAgICBwYXRoICs9IFwiQ1wiICsgKHAwWzBdICsgdDBbMF0pICsgXCIsXCIgKyAocDBbMV0gKyB0MFsxXSkgKyBcIixcIiArIChwWzBdIC0gdFswXSkgKyBcIixcIiArIChwWzFdIC0gdFsxXSkgKyBcIixcIiArIHBbMF0gKyBcIixcIiArIHBbMV07XG4gICAgICBmb3IgKHZhciBpID0gMjsgaSA8IHRhbmdlbnRzLmxlbmd0aDsgaSsrLCBwaSsrKSB7XG4gICAgICAgIHAgPSBwb2ludHNbcGldO1xuICAgICAgICB0ID0gdGFuZ2VudHNbaV07XG4gICAgICAgIHBhdGggKz0gXCJTXCIgKyAocFswXSAtIHRbMF0pICsgXCIsXCIgKyAocFsxXSAtIHRbMV0pICsgXCIsXCIgKyBwWzBdICsgXCIsXCIgKyBwWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocXVhZCkge1xuICAgICAgdmFyIGxwID0gcG9pbnRzW3BpXTtcbiAgICAgIHBhdGggKz0gXCJRXCIgKyAocFswXSArIHRbMF0gKiAyIC8gMykgKyBcIixcIiArIChwWzFdICsgdFsxXSAqIDIgLyAzKSArIFwiLFwiICsgbHBbMF0gKyBcIixcIiArIGxwWzFdO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsVGFuZ2VudHMocG9pbnRzLCB0ZW5zaW9uKSB7XG4gICAgdmFyIHRhbmdlbnRzID0gW10sIGEgPSAoMSAtIHRlbnNpb24pIC8gMiwgcDAsIHAxID0gcG9pbnRzWzBdLCBwMiA9IHBvaW50c1sxXSwgaSA9IDEsIG4gPSBwb2ludHMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBwMCA9IHAxO1xuICAgICAgcDEgPSBwMjtcbiAgICAgIHAyID0gcG9pbnRzW2ldO1xuICAgICAgdGFuZ2VudHMucHVzaChbIGEgKiAocDJbMF0gLSBwMFswXSksIGEgKiAocDJbMV0gLSBwMFsxXSkgXSk7XG4gICAgfVxuICAgIHJldHVybiB0YW5nZW50cztcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzKHBvaW50cykge1xuICAgIGlmIChwb2ludHMubGVuZ3RoIDwgMykgcmV0dXJuIGQzX3N2Z19saW5lTGluZWFyKHBvaW50cyk7XG4gICAgdmFyIGkgPSAxLCBuID0gcG9pbnRzLmxlbmd0aCwgcGkgPSBwb2ludHNbMF0sIHgwID0gcGlbMF0sIHkwID0gcGlbMV0sIHB4ID0gWyB4MCwgeDAsIHgwLCAocGkgPSBwb2ludHNbMV0pWzBdIF0sIHB5ID0gWyB5MCwgeTAsIHkwLCBwaVsxXSBdLCBwYXRoID0gWyB4MCwgXCIsXCIsIHkwLCBcIkxcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweCksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHB5KSBdO1xuICAgIHBvaW50cy5wdXNoKHBvaW50c1tuIC0gMV0pO1xuICAgIHdoaWxlICgrK2kgPD0gbikge1xuICAgICAgcGkgPSBwb2ludHNbaV07XG4gICAgICBweC5zaGlmdCgpO1xuICAgICAgcHgucHVzaChwaVswXSk7XG4gICAgICBweS5zaGlmdCgpO1xuICAgICAgcHkucHVzaChwaVsxXSk7XG4gICAgICBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHB4LCBweSk7XG4gICAgfVxuICAgIHBvaW50cy5wb3AoKTtcbiAgICBwYXRoLnB1c2goXCJMXCIsIHBpKTtcbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXNPcGVuKHBvaW50cykge1xuICAgIGlmIChwb2ludHMubGVuZ3RoIDwgNCkgcmV0dXJuIGQzX3N2Z19saW5lTGluZWFyKHBvaW50cyk7XG4gICAgdmFyIHBhdGggPSBbXSwgaSA9IC0xLCBuID0gcG9pbnRzLmxlbmd0aCwgcGksIHB4ID0gWyAwIF0sIHB5ID0gWyAwIF07XG4gICAgd2hpbGUgKCsraSA8IDMpIHtcbiAgICAgIHBpID0gcG9pbnRzW2ldO1xuICAgICAgcHgucHVzaChwaVswXSk7XG4gICAgICBweS5wdXNoKHBpWzFdKTtcbiAgICB9XG4gICAgcGF0aC5wdXNoKGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHgpICsgXCIsXCIgKyBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHB5KSk7XG4gICAgLS1pO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBwaSA9IHBvaW50c1tpXTtcbiAgICAgIHB4LnNoaWZ0KCk7XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnNoaWZ0KCk7XG4gICAgICBweS5wdXNoKHBpWzFdKTtcbiAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGguam9pbihcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzQ2xvc2VkKHBvaW50cykge1xuICAgIHZhciBwYXRoLCBpID0gLTEsIG4gPSBwb2ludHMubGVuZ3RoLCBtID0gbiArIDQsIHBpLCBweCA9IFtdLCBweSA9IFtdO1xuICAgIHdoaWxlICgrK2kgPCA0KSB7XG4gICAgICBwaSA9IHBvaW50c1tpICUgbl07XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnB1c2gocGlbMV0pO1xuICAgIH1cbiAgICBwYXRoID0gWyBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHkpIF07XG4gICAgLS1pO1xuICAgIHdoaWxlICgrK2kgPCBtKSB7XG4gICAgICBwaSA9IHBvaW50c1tpICUgbl07XG4gICAgICBweC5zaGlmdCgpO1xuICAgICAgcHgucHVzaChwaVswXSk7XG4gICAgICBweS5zaGlmdCgpO1xuICAgICAgcHkucHVzaChwaVsxXSk7XG4gICAgICBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHB4LCBweSk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCdW5kbGUocG9pbnRzLCB0ZW5zaW9uKSB7XG4gICAgdmFyIG4gPSBwb2ludHMubGVuZ3RoIC0gMTtcbiAgICBpZiAobikge1xuICAgICAgdmFyIHgwID0gcG9pbnRzWzBdWzBdLCB5MCA9IHBvaW50c1swXVsxXSwgZHggPSBwb2ludHNbbl1bMF0gLSB4MCwgZHkgPSBwb2ludHNbbl1bMV0gLSB5MCwgaSA9IC0xLCBwLCB0O1xuICAgICAgd2hpbGUgKCsraSA8PSBuKSB7XG4gICAgICAgIHAgPSBwb2ludHNbaV07XG4gICAgICAgIHQgPSBpIC8gbjtcbiAgICAgICAgcFswXSA9IHRlbnNpb24gKiBwWzBdICsgKDEgLSB0ZW5zaW9uKSAqICh4MCArIHQgKiBkeCk7XG4gICAgICAgIHBbMV0gPSB0ZW5zaW9uICogcFsxXSArICgxIC0gdGVuc2lvbikgKiAoeTAgKyB0ICogZHkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfc3ZnX2xpbmVCYXNpcyhwb2ludHMpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lRG90NChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xuICB9XG4gIHZhciBkM19zdmdfbGluZUJhc2lzQmV6aWVyMSA9IFsgMCwgMiAvIDMsIDEgLyAzLCAwIF0sIGQzX3N2Z19saW5lQmFzaXNCZXppZXIyID0gWyAwLCAxIC8gMywgMiAvIDMsIDAgXSwgZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMgPSBbIDAsIDEgLyA2LCAyIC8gMywgMSAvIDYgXTtcbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCB4LCB5KSB7XG4gICAgcGF0aC5wdXNoKFwiQ1wiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjEsIHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIxLCB5KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMiwgeCksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjIsIHkpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgeSkpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lU2xvcGUocDAsIHAxKSB7XG4gICAgcmV0dXJuIChwMVsxXSAtIHAwWzFdKSAvIChwMVswXSAtIHAwWzBdKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUZpbml0ZURpZmZlcmVuY2VzKHBvaW50cykge1xuICAgIHZhciBpID0gMCwgaiA9IHBvaW50cy5sZW5ndGggLSAxLCBtID0gW10sIHAwID0gcG9pbnRzWzBdLCBwMSA9IHBvaW50c1sxXSwgZCA9IG1bMF0gPSBkM19zdmdfbGluZVNsb3BlKHAwLCBwMSk7XG4gICAgd2hpbGUgKCsraSA8IGopIHtcbiAgICAgIG1baV0gPSAoZCArIChkID0gZDNfc3ZnX2xpbmVTbG9wZShwMCA9IHAxLCBwMSA9IHBvaW50c1tpICsgMV0pKSkgLyAyO1xuICAgIH1cbiAgICBtW2ldID0gZDtcbiAgICByZXR1cm4gbTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZU1vbm90b25lVGFuZ2VudHMocG9pbnRzKSB7XG4gICAgdmFyIHRhbmdlbnRzID0gW10sIGQsIGEsIGIsIHMsIG0gPSBkM19zdmdfbGluZUZpbml0ZURpZmZlcmVuY2VzKHBvaW50cyksIGkgPSAtMSwgaiA9IHBvaW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgICBkID0gZDNfc3ZnX2xpbmVTbG9wZShwb2ludHNbaV0sIHBvaW50c1tpICsgMV0pO1xuICAgICAgaWYgKGFicyhkKSA8IM61KSB7XG4gICAgICAgIG1baV0gPSBtW2kgKyAxXSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhID0gbVtpXSAvIGQ7XG4gICAgICAgIGIgPSBtW2kgKyAxXSAvIGQ7XG4gICAgICAgIHMgPSBhICogYSArIGIgKiBiO1xuICAgICAgICBpZiAocyA+IDkpIHtcbiAgICAgICAgICBzID0gZCAqIDMgLyBNYXRoLnNxcnQocyk7XG4gICAgICAgICAgbVtpXSA9IHMgKiBhO1xuICAgICAgICAgIG1baSArIDFdID0gcyAqIGI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaSA9IC0xO1xuICAgIHdoaWxlICgrK2kgPD0gaikge1xuICAgICAgcyA9IChwb2ludHNbTWF0aC5taW4oaiwgaSArIDEpXVswXSAtIHBvaW50c1tNYXRoLm1heCgwLCBpIC0gMSldWzBdKSAvICg2ICogKDEgKyBtW2ldICogbVtpXSkpO1xuICAgICAgdGFuZ2VudHMucHVzaChbIHMgfHwgMCwgbVtpXSAqIHMgfHwgMCBdKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhbmdlbnRzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lTW9ub3RvbmUocG9pbnRzKSB7XG4gICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPCAzID8gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKSA6IHBvaW50c1swXSArIGQzX3N2Z19saW5lSGVybWl0ZShwb2ludHMsIGQzX3N2Z19saW5lTW9ub3RvbmVUYW5nZW50cyhwb2ludHMpKTtcbiAgfVxuICBkMy5zdmcubGluZS5yYWRpYWwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGluZSA9IGQzX3N2Z19saW5lKGQzX3N2Z19saW5lUmFkaWFsKTtcbiAgICBsaW5lLnJhZGl1cyA9IGxpbmUueCwgZGVsZXRlIGxpbmUueDtcbiAgICBsaW5lLmFuZ2xlID0gbGluZS55LCBkZWxldGUgbGluZS55O1xuICAgIHJldHVybiBsaW5lO1xuICB9O1xuICBmdW5jdGlvbiBkM19zdmdfbGluZVJhZGlhbChwb2ludHMpIHtcbiAgICB2YXIgcG9pbnQsIGkgPSAtMSwgbiA9IHBvaW50cy5sZW5ndGgsIHIsIGE7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgciA9IHBvaW50WzBdO1xuICAgICAgYSA9IHBvaW50WzFdIC0gaGFsZs+AO1xuICAgICAgcG9pbnRbMF0gPSByICogTWF0aC5jb3MoYSk7XG4gICAgICBwb2ludFsxXSA9IHIgKiBNYXRoLnNpbihhKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50cztcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfYXJlYShwcm9qZWN0aW9uKSB7XG4gICAgdmFyIHgwID0gZDNfZ2VvbV9wb2ludFgsIHgxID0gZDNfZ2VvbV9wb2ludFgsIHkwID0gMCwgeTEgPSBkM19nZW9tX3BvaW50WSwgZGVmaW5lZCA9IGQzX3RydWUsIGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVMaW5lYXIsIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUua2V5LCBpbnRlcnBvbGF0ZVJldmVyc2UgPSBpbnRlcnBvbGF0ZSwgTCA9IFwiTFwiLCB0ZW5zaW9uID0gLjc7XG4gICAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG4gICAgICB2YXIgc2VnbWVudHMgPSBbXSwgcG9pbnRzMCA9IFtdLCBwb2ludHMxID0gW10sIGkgPSAtMSwgbiA9IGRhdGEubGVuZ3RoLCBkLCBmeDAgPSBkM19mdW5jdG9yKHgwKSwgZnkwID0gZDNfZnVuY3Rvcih5MCksIGZ4MSA9IHgwID09PSB4MSA/IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geDtcbiAgICAgIH0gOiBkM19mdW5jdG9yKHgxKSwgZnkxID0geTAgPT09IHkxID8gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgICAgfSA6IGQzX2Z1bmN0b3IoeTEpLCB4LCB5O1xuICAgICAgZnVuY3Rpb24gc2VnbWVudCgpIHtcbiAgICAgICAgc2VnbWVudHMucHVzaChcIk1cIiwgaW50ZXJwb2xhdGUocHJvamVjdGlvbihwb2ludHMxKSwgdGVuc2lvbiksIEwsIGludGVycG9sYXRlUmV2ZXJzZShwcm9qZWN0aW9uKHBvaW50czAucmV2ZXJzZSgpKSwgdGVuc2lvbiksIFwiWlwiKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChkZWZpbmVkLmNhbGwodGhpcywgZCA9IGRhdGFbaV0sIGkpKSB7XG4gICAgICAgICAgcG9pbnRzMC5wdXNoKFsgeCA9ICtmeDAuY2FsbCh0aGlzLCBkLCBpKSwgeSA9ICtmeTAuY2FsbCh0aGlzLCBkLCBpKSBdKTtcbiAgICAgICAgICBwb2ludHMxLnB1c2goWyArZngxLmNhbGwodGhpcywgZCwgaSksICtmeTEuY2FsbCh0aGlzLCBkLCBpKSBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludHMwLmxlbmd0aCkge1xuICAgICAgICAgIHNlZ21lbnQoKTtcbiAgICAgICAgICBwb2ludHMwID0gW107XG4gICAgICAgICAgcG9pbnRzMSA9IFtdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocG9pbnRzMC5sZW5ndGgpIHNlZ21lbnQoKTtcbiAgICAgIHJldHVybiBzZWdtZW50cy5sZW5ndGggPyBzZWdtZW50cy5qb2luKFwiXCIpIDogbnVsbDtcbiAgICB9XG4gICAgYXJlYS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDE7XG4gICAgICB4MCA9IHgxID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS54MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgwO1xuICAgICAgeDAgPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDE7XG4gICAgICB4MSA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuICAgICAgeTAgPSB5MSA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5MDtcbiAgICAgIHkwID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuICAgICAgeTEgPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkZWZpbmVkO1xuICAgICAgZGVmaW5lZCA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBpbnRlcnBvbGF0ZUtleTtcbiAgICAgIGlmICh0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiKSBpbnRlcnBvbGF0ZUtleSA9IGludGVycG9sYXRlID0gXzsgZWxzZSBpbnRlcnBvbGF0ZUtleSA9IChpbnRlcnBvbGF0ZSA9IGQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycy5nZXQoXykgfHwgZDNfc3ZnX2xpbmVMaW5lYXIpLmtleTtcbiAgICAgIGludGVycG9sYXRlUmV2ZXJzZSA9IGludGVycG9sYXRlLnJldmVyc2UgfHwgaW50ZXJwb2xhdGU7XG4gICAgICBMID0gaW50ZXJwb2xhdGUuY2xvc2VkID8gXCJNXCIgOiBcIkxcIjtcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS50ZW5zaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGVuc2lvbjtcbiAgICAgIHRlbnNpb24gPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICByZXR1cm4gYXJlYTtcbiAgfVxuICBkM19zdmdfbGluZVN0ZXBCZWZvcmUucmV2ZXJzZSA9IGQzX3N2Z19saW5lU3RlcEFmdGVyO1xuICBkM19zdmdfbGluZVN0ZXBBZnRlci5yZXZlcnNlID0gZDNfc3ZnX2xpbmVTdGVwQmVmb3JlO1xuICBkMy5zdmcuYXJlYSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zdmdfYXJlYShkM19pZGVudGl0eSk7XG4gIH07XG4gIGQzLnN2Zy5hcmVhLnJhZGlhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmVhID0gZDNfc3ZnX2FyZWEoZDNfc3ZnX2xpbmVSYWRpYWwpO1xuICAgIGFyZWEucmFkaXVzID0gYXJlYS54LCBkZWxldGUgYXJlYS54O1xuICAgIGFyZWEuaW5uZXJSYWRpdXMgPSBhcmVhLngwLCBkZWxldGUgYXJlYS54MDtcbiAgICBhcmVhLm91dGVyUmFkaXVzID0gYXJlYS54MSwgZGVsZXRlIGFyZWEueDE7XG4gICAgYXJlYS5hbmdsZSA9IGFyZWEueSwgZGVsZXRlIGFyZWEueTtcbiAgICBhcmVhLnN0YXJ0QW5nbGUgPSBhcmVhLnkwLCBkZWxldGUgYXJlYS55MDtcbiAgICBhcmVhLmVuZEFuZ2xlID0gYXJlYS55MSwgZGVsZXRlIGFyZWEueTE7XG4gICAgcmV0dXJuIGFyZWE7XG4gIH07XG4gIGQzLnN2Zy5jaG9yZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzb3VyY2UgPSBkM19zb3VyY2UsIHRhcmdldCA9IGQzX3RhcmdldCwgcmFkaXVzID0gZDNfc3ZnX2Nob3JkUmFkaXVzLCBzdGFydEFuZ2xlID0gZDNfc3ZnX2FyY1N0YXJ0QW5nbGUsIGVuZEFuZ2xlID0gZDNfc3ZnX2FyY0VuZEFuZ2xlO1xuICAgIGZ1bmN0aW9uIGNob3JkKGQsIGkpIHtcbiAgICAgIHZhciBzID0gc3ViZ3JvdXAodGhpcywgc291cmNlLCBkLCBpKSwgdCA9IHN1Ymdyb3VwKHRoaXMsIHRhcmdldCwgZCwgaSk7XG4gICAgICByZXR1cm4gXCJNXCIgKyBzLnAwICsgYXJjKHMuciwgcy5wMSwgcy5hMSAtIHMuYTApICsgKGVxdWFscyhzLCB0KSA/IGN1cnZlKHMuciwgcy5wMSwgcy5yLCBzLnAwKSA6IGN1cnZlKHMuciwgcy5wMSwgdC5yLCB0LnAwKSArIGFyYyh0LnIsIHQucDEsIHQuYTEgLSB0LmEwKSArIGN1cnZlKHQuciwgdC5wMSwgcy5yLCBzLnAwKSkgKyBcIlpcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3ViZ3JvdXAoc2VsZiwgZiwgZCwgaSkge1xuICAgICAgdmFyIHN1Ymdyb3VwID0gZi5jYWxsKHNlbGYsIGQsIGkpLCByID0gcmFkaXVzLmNhbGwoc2VsZiwgc3ViZ3JvdXAsIGkpLCBhMCA9IHN0YXJ0QW5nbGUuY2FsbChzZWxmLCBzdWJncm91cCwgaSkgLSBoYWxmz4AsIGExID0gZW5kQW5nbGUuY2FsbChzZWxmLCBzdWJncm91cCwgaSkgLSBoYWxmz4A7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByOiByLFxuICAgICAgICBhMDogYTAsXG4gICAgICAgIGExOiBhMSxcbiAgICAgICAgcDA6IFsgciAqIE1hdGguY29zKGEwKSwgciAqIE1hdGguc2luKGEwKSBdLFxuICAgICAgICBwMTogWyByICogTWF0aC5jb3MoYTEpLCByICogTWF0aC5zaW4oYTEpIF1cbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gICAgICByZXR1cm4gYS5hMCA9PSBiLmEwICYmIGEuYTEgPT0gYi5hMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXJjKHIsIHAsIGEpIHtcbiAgICAgIHJldHVybiBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiAwIFwiICsgKyhhID4gz4ApICsgXCIsMSBcIiArIHA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGN1cnZlKHIwLCBwMCwgcjEsIHAxKSB7XG4gICAgICByZXR1cm4gXCJRIDAsMCBcIiArIHAxO1xuICAgIH1cbiAgICBjaG9yZC5yYWRpdXMgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYWRpdXM7XG4gICAgICByYWRpdXMgPSBkM19mdW5jdG9yKHYpO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQuc291cmNlID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc291cmNlO1xuICAgICAgc291cmNlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnRhcmdldCA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRhcmdldDtcbiAgICAgIHRhcmdldCA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5zdGFydEFuZ2xlID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc3RhcnRBbmdsZTtcbiAgICAgIHN0YXJ0QW5nbGUgPSBkM19mdW5jdG9yKHYpO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQuZW5kQW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlbmRBbmdsZTtcbiAgICAgIGVuZEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIHJldHVybiBjaG9yZDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc3ZnX2Nob3JkUmFkaXVzKGQpIHtcbiAgICByZXR1cm4gZC5yYWRpdXM7XG4gIH1cbiAgZDMuc3ZnLmRpYWdvbmFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNvdXJjZSA9IGQzX3NvdXJjZSwgdGFyZ2V0ID0gZDNfdGFyZ2V0LCBwcm9qZWN0aW9uID0gZDNfc3ZnX2RpYWdvbmFsUHJvamVjdGlvbjtcbiAgICBmdW5jdGlvbiBkaWFnb25hbChkLCBpKSB7XG4gICAgICB2YXIgcDAgPSBzb3VyY2UuY2FsbCh0aGlzLCBkLCBpKSwgcDMgPSB0YXJnZXQuY2FsbCh0aGlzLCBkLCBpKSwgbSA9IChwMC55ICsgcDMueSkgLyAyLCBwID0gWyBwMCwge1xuICAgICAgICB4OiBwMC54LFxuICAgICAgICB5OiBtXG4gICAgICB9LCB7XG4gICAgICAgIHg6IHAzLngsXG4gICAgICAgIHk6IG1cbiAgICAgIH0sIHAzIF07XG4gICAgICBwID0gcC5tYXAocHJvamVjdGlvbik7XG4gICAgICByZXR1cm4gXCJNXCIgKyBwWzBdICsgXCJDXCIgKyBwWzFdICsgXCIgXCIgKyBwWzJdICsgXCIgXCIgKyBwWzNdO1xuICAgIH1cbiAgICBkaWFnb25hbC5zb3VyY2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3VyY2U7XG4gICAgICBzb3VyY2UgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGRpYWdvbmFsO1xuICAgIH07XG4gICAgZGlhZ29uYWwudGFyZ2V0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xuICAgICAgdGFyZ2V0ID0gZDNfZnVuY3Rvcih4KTtcbiAgICAgIHJldHVybiBkaWFnb25hbDtcbiAgICB9O1xuICAgIGRpYWdvbmFsLnByb2plY3Rpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcm9qZWN0aW9uO1xuICAgICAgcHJvamVjdGlvbiA9IHg7XG4gICAgICByZXR1cm4gZGlhZ29uYWw7XG4gICAgfTtcbiAgICByZXR1cm4gZGlhZ29uYWw7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3N2Z19kaWFnb25hbFByb2plY3Rpb24oZCkge1xuICAgIHJldHVybiBbIGQueCwgZC55IF07XG4gIH1cbiAgZDMuc3ZnLmRpYWdvbmFsLnJhZGlhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkaWFnb25hbCA9IGQzLnN2Zy5kaWFnb25hbCgpLCBwcm9qZWN0aW9uID0gZDNfc3ZnX2RpYWdvbmFsUHJvamVjdGlvbiwgcHJvamVjdGlvbl8gPSBkaWFnb25hbC5wcm9qZWN0aW9uO1xuICAgIGRpYWdvbmFsLnByb2plY3Rpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHByb2plY3Rpb25fKGQzX3N2Z19kaWFnb25hbFJhZGlhbFByb2plY3Rpb24ocHJvamVjdGlvbiA9IHgpKSA6IHByb2plY3Rpb247XG4gICAgfTtcbiAgICByZXR1cm4gZGlhZ29uYWw7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3N2Z19kaWFnb25hbFJhZGlhbFByb2plY3Rpb24ocHJvamVjdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkID0gcHJvamVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCByID0gZFswXSwgYSA9IGRbMV0gLSBoYWxmz4A7XG4gICAgICByZXR1cm4gWyByICogTWF0aC5jb3MoYSksIHIgKiBNYXRoLnNpbihhKSBdO1xuICAgIH07XG4gIH1cbiAgZDMuc3ZnLnN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0eXBlID0gZDNfc3ZnX3N5bWJvbFR5cGUsIHNpemUgPSBkM19zdmdfc3ltYm9sU2l6ZTtcbiAgICBmdW5jdGlvbiBzeW1ib2woZCwgaSkge1xuICAgICAgcmV0dXJuIChkM19zdmdfc3ltYm9scy5nZXQodHlwZS5jYWxsKHRoaXMsIGQsIGkpKSB8fCBkM19zdmdfc3ltYm9sQ2lyY2xlKShzaXplLmNhbGwodGhpcywgZCwgaSkpO1xuICAgIH1cbiAgICBzeW1ib2wudHlwZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHR5cGU7XG4gICAgICB0eXBlID0gZDNfZnVuY3Rvcih4KTtcbiAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgfTtcbiAgICBzeW1ib2wuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0gZDNfZnVuY3Rvcih4KTtcbiAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgfTtcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9O1xuICBmdW5jdGlvbiBkM19zdmdfc3ltYm9sU2l6ZSgpIHtcbiAgICByZXR1cm4gNjQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX3N5bWJvbFR5cGUoKSB7XG4gICAgcmV0dXJuIFwiY2lyY2xlXCI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX3N5bWJvbENpcmNsZShzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIM+AKTtcbiAgICByZXR1cm4gXCJNMCxcIiArIHIgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiAwIDEsMSAwLFwiICsgLXIgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiAwIDEsMSAwLFwiICsgciArIFwiWlwiO1xuICB9XG4gIHZhciBkM19zdmdfc3ltYm9scyA9IGQzLm1hcCh7XG4gICAgY2lyY2xlOiBkM19zdmdfc3ltYm9sQ2lyY2xlLFxuICAgIGNyb3NzOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gNSkgLyAyO1xuICAgICAgcmV0dXJuIFwiTVwiICsgLTMgKiByICsgXCIsXCIgKyAtciArIFwiSFwiICsgLXIgKyBcIlZcIiArIC0zICogciArIFwiSFwiICsgciArIFwiVlwiICsgLXIgKyBcIkhcIiArIDMgKiByICsgXCJWXCIgKyByICsgXCJIXCIgKyByICsgXCJWXCIgKyAzICogciArIFwiSFwiICsgLXIgKyBcIlZcIiArIHIgKyBcIkhcIiArIC0zICogciArIFwiWlwiO1xuICAgIH0sXG4gICAgZGlhbW9uZDogZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgdmFyIHJ5ID0gTWF0aC5zcXJ0KHNpemUgLyAoMiAqIGQzX3N2Z19zeW1ib2xUYW4zMCkpLCByeCA9IHJ5ICogZDNfc3ZnX3N5bWJvbFRhbjMwO1xuICAgICAgcmV0dXJuIFwiTTAsXCIgKyAtcnkgKyBcIkxcIiArIHJ4ICsgXCIsMFwiICsgXCIgMCxcIiArIHJ5ICsgXCIgXCIgKyAtcnggKyBcIiwwXCIgKyBcIlpcIjtcbiAgICB9LFxuICAgIHNxdWFyZTogZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSkgLyAyO1xuICAgICAgcmV0dXJuIFwiTVwiICsgLXIgKyBcIixcIiArIC1yICsgXCJMXCIgKyByICsgXCIsXCIgKyAtciArIFwiIFwiICsgciArIFwiLFwiICsgciArIFwiIFwiICsgLXIgKyBcIixcIiArIHIgKyBcIlpcIjtcbiAgICB9LFxuICAgIFwidHJpYW5nbGUtZG93blwiOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgcnggPSBNYXRoLnNxcnQoc2l6ZSAvIGQzX3N2Z19zeW1ib2xTcXJ0MyksIHJ5ID0gcnggKiBkM19zdmdfc3ltYm9sU3FydDMgLyAyO1xuICAgICAgcmV0dXJuIFwiTTAsXCIgKyByeSArIFwiTFwiICsgcnggKyBcIixcIiArIC1yeSArIFwiIFwiICsgLXJ4ICsgXCIsXCIgKyAtcnkgKyBcIlpcIjtcbiAgICB9LFxuICAgIFwidHJpYW5nbGUtdXBcIjogZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgdmFyIHJ4ID0gTWF0aC5zcXJ0KHNpemUgLyBkM19zdmdfc3ltYm9sU3FydDMpLCByeSA9IHJ4ICogZDNfc3ZnX3N5bWJvbFNxcnQzIC8gMjtcbiAgICAgIHJldHVybiBcIk0wLFwiICsgLXJ5ICsgXCJMXCIgKyByeCArIFwiLFwiICsgcnkgKyBcIiBcIiArIC1yeCArIFwiLFwiICsgcnkgKyBcIlpcIjtcbiAgICB9XG4gIH0pO1xuICBkMy5zdmcuc3ltYm9sVHlwZXMgPSBkM19zdmdfc3ltYm9scy5rZXlzKCk7XG4gIHZhciBkM19zdmdfc3ltYm9sU3FydDMgPSBNYXRoLnNxcnQoMyksIGQzX3N2Z19zeW1ib2xUYW4zMCA9IE1hdGgudGFuKDMwICogZDNfcmFkaWFucyk7XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS50cmFuc2l0aW9uID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpZCA9IGQzX3RyYW5zaXRpb25Jbmhlcml0SWQgfHwgKytkM190cmFuc2l0aW9uSWQsIG5zID0gZDNfdHJhbnNpdGlvbk5hbWVzcGFjZShuYW1lKSwgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBub2RlLCB0cmFuc2l0aW9uID0gZDNfdHJhbnNpdGlvbkluaGVyaXQgfHwge1xuICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICAgIGVhc2U6IGQzX2Vhc2VfY3ViaWNJbk91dCxcbiAgICAgIGRlbGF5OiAwLFxuICAgICAgZHVyYXRpb246IDI1MFxuICAgIH07XG4gICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGQzX3RyYW5zaXRpb25Ob2RlKG5vZGUsIGksIG5zLCBpZCwgdHJhbnNpdGlvbik7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uKHN1Ymdyb3VwcywgbnMsIGlkKTtcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKG5hbWUgPT0gbnVsbCA/IGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHQgOiBkM19zZWxlY3Rpb25faW50ZXJydXB0TlMoZDNfdHJhbnNpdGlvbk5hbWVzcGFjZShuYW1lKSkpO1xuICB9O1xuICB2YXIgZDNfc2VsZWN0aW9uX2ludGVycnVwdCA9IGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhkM190cmFuc2l0aW9uTmFtZXNwYWNlKCkpO1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25faW50ZXJydXB0TlMobnMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbG9jaywgYWN0aXZlSWQsIGFjdGl2ZTtcbiAgICAgIGlmICgobG9jayA9IHRoaXNbbnNdKSAmJiAoYWN0aXZlID0gbG9ja1thY3RpdmVJZCA9IGxvY2suYWN0aXZlXSkpIHtcbiAgICAgICAgYWN0aXZlLnRpbWVyLmMgPSBudWxsO1xuICAgICAgICBhY3RpdmUudGltZXIudCA9IE5hTjtcbiAgICAgICAgaWYgKC0tbG9jay5jb3VudCkgZGVsZXRlIGxvY2tbYWN0aXZlSWRdOyBlbHNlIGRlbGV0ZSB0aGlzW25zXTtcbiAgICAgICAgbG9jay5hY3RpdmUgKz0gLjU7XG4gICAgICAgIGFjdGl2ZS5ldmVudCAmJiBhY3RpdmUuZXZlbnQuaW50ZXJydXB0LmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgYWN0aXZlLmluZGV4KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb24oZ3JvdXBzLCBucywgaWQpIHtcbiAgICBkM19zdWJjbGFzcyhncm91cHMsIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUpO1xuICAgIGdyb3Vwcy5uYW1lc3BhY2UgPSBucztcbiAgICBncm91cHMuaWQgPSBpZDtcbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9XG4gIHZhciBkM190cmFuc2l0aW9uUHJvdG90eXBlID0gW10sIGQzX3RyYW5zaXRpb25JZCA9IDAsIGQzX3RyYW5zaXRpb25Jbmhlcml0SWQsIGQzX3RyYW5zaXRpb25Jbmhlcml0O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmNhbGwgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuY2FsbDtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5lbXB0eSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5lbXB0eTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5ub2RlID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLm5vZGU7XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2l6ZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5zaXplO1xuICBkMy50cmFuc2l0aW9uID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBuYW1lKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvbiAmJiBzZWxlY3Rpb24udHJhbnNpdGlvbiA/IGQzX3RyYW5zaXRpb25Jbmhlcml0SWQgPyBzZWxlY3Rpb24udHJhbnNpdGlvbihuYW1lKSA6IHNlbGVjdGlvbiA6IGQzLnNlbGVjdGlvbigpLnRyYW5zaXRpb24oc2VsZWN0aW9uKTtcbiAgfTtcbiAgZDMudHJhbnNpdGlvbi5wcm90b3R5cGUgPSBkM190cmFuc2l0aW9uUHJvdG90eXBlO1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZSwgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBzdWJub2RlLCBub2RlO1xuICAgIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0b3IuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSkpIHtcbiAgICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICAgIGQzX3RyYW5zaXRpb25Ob2RlKHN1Ym5vZGUsIGksIG5zLCBpZCwgbm9kZVtuc11baWRdKTtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKHN1Ym5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQpO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZSwgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBzdWJub2Rlcywgbm9kZSwgc3Vibm9kZSwgdHJhbnNpdGlvbjtcbiAgICBzZWxlY3RvciA9IGQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbiA9IG5vZGVbbnNdW2lkXTtcbiAgICAgICAgICBzdWJub2RlcyA9IHNlbGVjdG9yLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaik7XG4gICAgICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICAgICAgZm9yICh2YXIgayA9IC0xLCBvID0gc3Vibm9kZXMubGVuZ3RoOyArK2sgPCBvOyApIHtcbiAgICAgICAgICAgIGlmIChzdWJub2RlID0gc3Vibm9kZXNba10pIGQzX3RyYW5zaXRpb25Ob2RlKHN1Ym5vZGUsIGssIG5zLCBpZCwgdHJhbnNpdGlvbik7XG4gICAgICAgICAgICBzdWJncm91cC5wdXNoKHN1Ym5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfdHJhbnNpdGlvbihzdWJncm91cHMsIG5zLCBpZCk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgZ3JvdXAsIG5vZGU7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIikgZmlsdGVyID0gZDNfc2VsZWN0aW9uX2ZpbHRlcihmaWx0ZXIpO1xuICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgZmlsdGVyLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5uYW1lc3BhY2UsIHRoaXMuaWQpO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnR3ZWVuID0gZnVuY3Rpb24obmFtZSwgdHdlZW4pIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIHRoaXMubm9kZSgpW25zXVtpZF0udHdlZW4uZ2V0KG5hbWUpO1xuICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCB0d2VlbiA9PSBudWxsID8gZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnJlbW92ZShuYW1lKTtcbiAgICB9IDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB0d2Vlbik7XG4gICAgfSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb25fdHdlZW4oZ3JvdXBzLCBuYW1lLCB2YWx1ZSwgdHdlZW4pIHtcbiAgICB2YXIgaWQgPSBncm91cHMuaWQsIG5zID0gZ3JvdXBzLm5hbWVzcGFjZTtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2goZ3JvdXBzLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKG5vZGUsIGksIGopIHtcbiAgICAgIG5vZGVbbnNdW2lkXS50d2Vlbi5zZXQobmFtZSwgdHdlZW4odmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSkpO1xuICAgIH0gOiAodmFsdWUgPSB0d2Vlbih2YWx1ZSksIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGVbbnNdW2lkXS50d2Vlbi5zZXQobmFtZSwgdmFsdWUpO1xuICAgIH0pKTtcbiAgfVxuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmF0dHIgPSBmdW5jdGlvbihuYW1lTlMsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBmb3IgKHZhbHVlIGluIG5hbWVOUykgdGhpcy5hdHRyKHZhbHVlLCBuYW1lTlNbdmFsdWVdKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgaW50ZXJwb2xhdGUgPSBuYW1lTlMgPT0gXCJ0cmFuc2Zvcm1cIiA/IGQzX2ludGVycG9sYXRlVHJhbnNmb3JtIDogZDNfaW50ZXJwb2xhdGUsIG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWVOUyk7XG4gICAgZnVuY3Rpb24gYXR0ck51bGwoKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXR0ck51bGxOUygpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJUd2VlbihiKSB7XG4gICAgICByZXR1cm4gYiA9PSBudWxsID8gYXR0ck51bGwgOiAoYiArPSBcIlwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGEgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKSwgaTtcbiAgICAgICAgcmV0dXJuIGEgIT09IGIgJiYgKGkgPSBpbnRlcnBvbGF0ZShhLCBiKSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyVHdlZW5OUyhiKSB7XG4gICAgICByZXR1cm4gYiA9PSBudWxsID8gYXR0ck51bGxOUyA6IChiICs9IFwiXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYSA9IHRoaXMuZ2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCksIGk7XG4gICAgICAgIHJldHVybiBhICE9PSBiICYmIChpID0gaW50ZXJwb2xhdGUoYSwgYiksIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwsIGkodCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZDNfdHJhbnNpdGlvbl90d2Vlbih0aGlzLCBcImF0dHIuXCIgKyBuYW1lTlMsIHZhbHVlLCBuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmF0dHJUd2VlbiA9IGZ1bmN0aW9uKG5hbWVOUywgdHdlZW4pIHtcbiAgICB2YXIgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZU5TKTtcbiAgICBmdW5jdGlvbiBhdHRyVHdlZW4oZCwgaSkge1xuICAgICAgdmFyIGYgPSB0d2Vlbi5jYWxsKHRoaXMsIGQsIGksIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpKTtcbiAgICAgIHJldHVybiBmICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgZih0KSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyVHdlZW5OUyhkLCBpKSB7XG4gICAgICB2YXIgZiA9IHR3ZWVuLmNhbGwodGhpcywgZCwgaSwgdGhpcy5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSk7XG4gICAgICByZXR1cm4gZiAmJiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCwgZih0KSk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50d2VlbihcImF0dHIuXCIgKyBuYW1lTlMsIG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2Vlbik7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc3R5bGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKG4gPCAzKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKG4gPCAyKSB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIGZvciAocHJpb3JpdHkgaW4gbmFtZSkgdGhpcy5zdHlsZShwcmlvcml0eSwgbmFtZVtwcmlvcml0eV0sIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBwcmlvcml0eSA9IFwiXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0eWxlTnVsbCgpIHtcbiAgICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0eWxlU3RyaW5nKGIpIHtcbiAgICAgIHJldHVybiBiID09IG51bGwgPyBzdHlsZU51bGwgOiAoYiArPSBcIlwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGEgPSBkM193aW5kb3codGhpcykuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpLCBpO1xuICAgICAgICByZXR1cm4gYSAhPT0gYiAmJiAoaSA9IGQzX2ludGVycG9sYXRlKGEsIGIpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uX3R3ZWVuKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSwgc3R5bGVTdHJpbmcpO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnN0eWxlVHdlZW4gPSBmdW5jdGlvbihuYW1lLCB0d2VlbiwgcHJpb3JpdHkpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHByaW9yaXR5ID0gXCJcIjtcbiAgICBmdW5jdGlvbiBzdHlsZVR3ZWVuKGQsIGkpIHtcbiAgICAgIHZhciBmID0gdHdlZW4uY2FsbCh0aGlzLCBkLCBpLCBkM193aW5kb3codGhpcykuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpKTtcbiAgICAgIHJldHVybiBmICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBmKHQpLCBwcmlvcml0eSk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50d2VlbihcInN0eWxlLlwiICsgbmFtZSwgc3R5bGVUd2Vlbik7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb25fdHdlZW4odGhpcywgXCJ0ZXh0XCIsIHZhbHVlLCBkM190cmFuc2l0aW9uX3RleHQpO1xuICB9O1xuICBmdW5jdGlvbiBkM190cmFuc2l0aW9uX3RleHQoYikge1xuICAgIGlmIChiID09IG51bGwpIGIgPSBcIlwiO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSBiO1xuICAgIH07XG4gIH1cbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbnMgPSB0aGlzLm5hbWVzcGFjZTtcbiAgICByZXR1cm4gdGhpcy5lYWNoKFwiZW5kLnRyYW5zaXRpb25cIiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcDtcbiAgICAgIGlmICh0aGlzW25zXS5jb3VudCA8IDIgJiYgKHAgPSB0aGlzLnBhcmVudE5vZGUpKSBwLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgIH0pO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmVhc2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5lYXNlO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBkMy5lYXNlLmFwcGx5KGQzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0uZWFzZSA9IHZhbHVlO1xuICAgIH0pO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmRlbGF5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIHRoaXMubm9kZSgpW25zXVtpZF0uZGVsYXk7XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gZnVuY3Rpb24obm9kZSwgaSwgaikge1xuICAgICAgbm9kZVtuc11baWRdLmRlbGF5ID0gK3ZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaik7XG4gICAgfSA6ICh2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLmRlbGF5ID0gdmFsdWU7XG4gICAgfSkpO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIHRoaXMubm9kZSgpW25zXVtpZF0uZHVyYXRpb247XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gZnVuY3Rpb24obm9kZSwgaSwgaikge1xuICAgICAgbm9kZVtuc11baWRdLmR1cmF0aW9uID0gTWF0aC5tYXgoMSwgdmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSk7XG4gICAgfSA6ICh2YWx1ZSA9IE1hdGgubWF4KDEsIHZhbHVlKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLmR1cmF0aW9uID0gdmFsdWU7XG4gICAgfSkpO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmVhY2ggPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB2YXIgaW5oZXJpdCA9IGQzX3RyYW5zaXRpb25Jbmhlcml0LCBpbmhlcml0SWQgPSBkM190cmFuc2l0aW9uSW5oZXJpdElkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZDNfdHJhbnNpdGlvbkluaGVyaXRJZCA9IGlkO1xuICAgICAgICBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG4gICAgICAgICAgZDNfdHJhbnNpdGlvbkluaGVyaXQgPSBub2RlW25zXVtpZF07XG4gICAgICAgICAgdHlwZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopO1xuICAgICAgICB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzX3RyYW5zaXRpb25Jbmhlcml0ID0gaW5oZXJpdDtcbiAgICAgICAgZDNfdHJhbnNpdGlvbkluaGVyaXRJZCA9IGluaGVyaXRJZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZDNfc2VsZWN0aW9uX2VhY2godGhpcywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbiA9IG5vZGVbbnNdW2lkXTtcbiAgICAgICAgKHRyYW5zaXRpb24uZXZlbnQgfHwgKHRyYW5zaXRpb24uZXZlbnQgPSBkMy5kaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpKSkub24odHlwZSwgbGlzdGVuZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaWQwID0gdGhpcy5pZCwgaWQxID0gKytkM190cmFuc2l0aW9uSWQsIG5zID0gdGhpcy5uYW1lc3BhY2UsIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgZ3JvdXAsIG5vZGUsIHRyYW5zaXRpb247XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSB0aGlzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICB0cmFuc2l0aW9uID0gbm9kZVtuc11baWQwXTtcbiAgICAgICAgICBkM190cmFuc2l0aW9uTm9kZShub2RlLCBpLCBucywgaWQxLCB7XG4gICAgICAgICAgICB0aW1lOiB0cmFuc2l0aW9uLnRpbWUsXG4gICAgICAgICAgICBlYXNlOiB0cmFuc2l0aW9uLmVhc2UsXG4gICAgICAgICAgICBkZWxheTogdHJhbnNpdGlvbi5kZWxheSArIHRyYW5zaXRpb24uZHVyYXRpb24sXG4gICAgICAgICAgICBkdXJhdGlvbjogdHJhbnNpdGlvbi5kdXJhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uKHN1Ymdyb3VwcywgbnMsIGlkMSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb25OYW1lc3BhY2UobmFtZSkge1xuICAgIHJldHVybiBuYW1lID09IG51bGwgPyBcIl9fdHJhbnNpdGlvbl9fXCIgOiBcIl9fdHJhbnNpdGlvbl9cIiArIG5hbWUgKyBcIl9fXCI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbk5vZGUobm9kZSwgaSwgbnMsIGlkLCBpbmhlcml0KSB7XG4gICAgdmFyIGxvY2sgPSBub2RlW25zXSB8fCAobm9kZVtuc10gPSB7XG4gICAgICBhY3RpdmU6IDAsXG4gICAgICBjb3VudDogMFxuICAgIH0pLCB0cmFuc2l0aW9uID0gbG9ja1tpZF0sIHRpbWUsIHRpbWVyLCBkdXJhdGlvbiwgZWFzZSwgdHdlZW5zO1xuICAgIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcbiAgICAgIHZhciBkZWxheSA9IHRyYW5zaXRpb24uZGVsYXk7XG4gICAgICB0aW1lci50ID0gZGVsYXkgKyB0aW1lO1xuICAgICAgaWYgKGRlbGF5IDw9IGVsYXBzZWQpIHJldHVybiBzdGFydChlbGFwc2VkIC0gZGVsYXkpO1xuICAgICAgdGltZXIuYyA9IHN0YXJ0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgICB2YXIgYWN0aXZlSWQgPSBsb2NrLmFjdGl2ZSwgYWN0aXZlID0gbG9ja1thY3RpdmVJZF07XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIGFjdGl2ZS50aW1lci5jID0gbnVsbDtcbiAgICAgICAgYWN0aXZlLnRpbWVyLnQgPSBOYU47XG4gICAgICAgIC0tbG9jay5jb3VudDtcbiAgICAgICAgZGVsZXRlIGxvY2tbYWN0aXZlSWRdO1xuICAgICAgICBhY3RpdmUuZXZlbnQgJiYgYWN0aXZlLmV2ZW50LmludGVycnVwdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGFjdGl2ZS5pbmRleCk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBjYW5jZWxJZCBpbiBsb2NrKSB7XG4gICAgICAgIGlmICgrY2FuY2VsSWQgPCBpZCkge1xuICAgICAgICAgIHZhciBjYW5jZWwgPSBsb2NrW2NhbmNlbElkXTtcbiAgICAgICAgICBjYW5jZWwudGltZXIuYyA9IG51bGw7XG4gICAgICAgICAgY2FuY2VsLnRpbWVyLnQgPSBOYU47XG4gICAgICAgICAgLS1sb2NrLmNvdW50O1xuICAgICAgICAgIGRlbGV0ZSBsb2NrW2NhbmNlbElkXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGltZXIuYyA9IHRpY2s7XG4gICAgICBkM190aW1lcihmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRpbWVyLmMgJiYgdGljayhlbGFwc2VkIHx8IDEpKSB7XG4gICAgICAgICAgdGltZXIuYyA9IG51bGw7XG4gICAgICAgICAgdGltZXIudCA9IE5hTjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0sIDAsIHRpbWUpO1xuICAgICAgbG9jay5hY3RpdmUgPSBpZDtcbiAgICAgIHRyYW5zaXRpb24uZXZlbnQgJiYgdHJhbnNpdGlvbi5ldmVudC5zdGFydC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGkpO1xuICAgICAgdHdlZW5zID0gW107XG4gICAgICB0cmFuc2l0aW9uLnR3ZWVuLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPSB2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGkpKSB7XG4gICAgICAgICAgdHdlZW5zLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGVhc2UgPSB0cmFuc2l0aW9uLmVhc2U7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb24uZHVyYXRpb247XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgICAgdmFyIHQgPSBlbGFwc2VkIC8gZHVyYXRpb24sIGUgPSBlYXNlKHQpLCBuID0gdHdlZW5zLmxlbmd0aDtcbiAgICAgIHdoaWxlIChuID4gMCkge1xuICAgICAgICB0d2VlbnNbLS1uXS5jYWxsKG5vZGUsIGUpO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMSkge1xuICAgICAgICB0cmFuc2l0aW9uLmV2ZW50ICYmIHRyYW5zaXRpb24uZXZlbnQuZW5kLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSk7XG4gICAgICAgIGlmICgtLWxvY2suY291bnQpIGRlbGV0ZSBsb2NrW2lkXTsgZWxzZSBkZWxldGUgbm9kZVtuc107XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRyYW5zaXRpb24pIHtcbiAgICAgIHRpbWUgPSBpbmhlcml0LnRpbWU7XG4gICAgICB0aW1lciA9IGQzX3RpbWVyKHNjaGVkdWxlLCAwLCB0aW1lKTtcbiAgICAgIHRyYW5zaXRpb24gPSBsb2NrW2lkXSA9IHtcbiAgICAgICAgdHdlZW46IG5ldyBkM19NYXAoKSxcbiAgICAgICAgdGltZTogdGltZSxcbiAgICAgICAgdGltZXI6IHRpbWVyLFxuICAgICAgICBkZWxheTogaW5oZXJpdC5kZWxheSxcbiAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgIGVhc2U6IGluaGVyaXQuZWFzZSxcbiAgICAgICAgaW5kZXg6IGlcbiAgICAgIH07XG4gICAgICBpbmhlcml0ID0gbnVsbDtcbiAgICAgICsrbG9jay5jb3VudDtcbiAgICB9XG4gIH1cbiAgZDMuc3ZnLmF4aXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKSwgb3JpZW50ID0gZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50LCBpbm5lclRpY2tTaXplID0gNiwgb3V0ZXJUaWNrU2l6ZSA9IDYsIHRpY2tQYWRkaW5nID0gMywgdGlja0FyZ3VtZW50c18gPSBbIDEwIF0sIHRpY2tWYWx1ZXMgPSBudWxsLCB0aWNrRm9ybWF0XztcbiAgICBmdW5jdGlvbiBheGlzKGcpIHtcbiAgICAgIGcuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGcgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgIHZhciBzY2FsZTAgPSB0aGlzLl9fY2hhcnRfXyB8fCBzY2FsZSwgc2NhbGUxID0gdGhpcy5fX2NoYXJ0X18gPSBzY2FsZS5jb3B5KCk7XG4gICAgICAgIHZhciB0aWNrcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IHNjYWxlMS50aWNrcyA/IHNjYWxlMS50aWNrcy5hcHBseShzY2FsZTEsIHRpY2tBcmd1bWVudHNfKSA6IHNjYWxlMS5kb21haW4oKSA6IHRpY2tWYWx1ZXMsIHRpY2tGb3JtYXQgPSB0aWNrRm9ybWF0XyA9PSBudWxsID8gc2NhbGUxLnRpY2tGb3JtYXQgPyBzY2FsZTEudGlja0Zvcm1hdC5hcHBseShzY2FsZTEsIHRpY2tBcmd1bWVudHNfKSA6IGQzX2lkZW50aXR5IDogdGlja0Zvcm1hdF8sIHRpY2sgPSBnLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodGlja3MsIHNjYWxlMSksIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5pbnNlcnQoXCJnXCIsIFwiLmRvbWFpblwiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLnN0eWxlKFwib3BhY2l0eVwiLCDOtSksIHRpY2tFeGl0ID0gZDMudHJhbnNpdGlvbih0aWNrLmV4aXQoKSkuc3R5bGUoXCJvcGFjaXR5XCIsIM61KS5yZW1vdmUoKSwgdGlja1VwZGF0ZSA9IGQzLnRyYW5zaXRpb24odGljay5vcmRlcigpKS5zdHlsZShcIm9wYWNpdHlcIiwgMSksIHRpY2tTcGFjaW5nID0gTWF0aC5tYXgoaW5uZXJUaWNrU2l6ZSwgMCkgKyB0aWNrUGFkZGluZywgdGlja1RyYW5zZm9ybTtcbiAgICAgICAgdmFyIHJhbmdlID0gZDNfc2NhbGVSYW5nZShzY2FsZTEpLCBwYXRoID0gZy5zZWxlY3RBbGwoXCIuZG9tYWluXCIpLmRhdGEoWyAwIF0pLCBwYXRoVXBkYXRlID0gKHBhdGguZW50ZXIoKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKSwgXG4gICAgICAgIGQzLnRyYW5zaXRpb24ocGF0aCkpO1xuICAgICAgICB0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKTtcbiAgICAgICAgdGlja0VudGVyLmFwcGVuZChcInRleHRcIik7XG4gICAgICAgIHZhciBsaW5lRW50ZXIgPSB0aWNrRW50ZXIuc2VsZWN0KFwibGluZVwiKSwgbGluZVVwZGF0ZSA9IHRpY2tVcGRhdGUuc2VsZWN0KFwibGluZVwiKSwgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKS50ZXh0KHRpY2tGb3JtYXQpLCB0ZXh0RW50ZXIgPSB0aWNrRW50ZXIuc2VsZWN0KFwidGV4dFwiKSwgdGV4dFVwZGF0ZSA9IHRpY2tVcGRhdGUuc2VsZWN0KFwidGV4dFwiKSwgc2lnbiA9IG9yaWVudCA9PT0gXCJ0b3BcIiB8fCBvcmllbnQgPT09IFwibGVmdFwiID8gLTEgOiAxLCB4MSwgeDIsIHkxLCB5MjtcbiAgICAgICAgaWYgKG9yaWVudCA9PT0gXCJib3R0b21cIiB8fCBvcmllbnQgPT09IFwidG9wXCIpIHtcbiAgICAgICAgICB0aWNrVHJhbnNmb3JtID0gZDNfc3ZnX2F4aXNYLCB4MSA9IFwieFwiLCB5MSA9IFwieVwiLCB4MiA9IFwieDJcIiwgeTIgPSBcInkyXCI7XG4gICAgICAgICAgdGV4dC5hdHRyKFwiZHlcIiwgc2lnbiA8IDAgPyBcIjBlbVwiIDogXCIuNzFlbVwiKS5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpO1xuICAgICAgICAgIHBhdGhVcGRhdGUuYXR0cihcImRcIiwgXCJNXCIgKyByYW5nZVswXSArIFwiLFwiICsgc2lnbiAqIG91dGVyVGlja1NpemUgKyBcIlYwSFwiICsgcmFuZ2VbMV0gKyBcIlZcIiArIHNpZ24gKiBvdXRlclRpY2tTaXplKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aWNrVHJhbnNmb3JtID0gZDNfc3ZnX2F4aXNZLCB4MSA9IFwieVwiLCB5MSA9IFwieFwiLCB4MiA9IFwieTJcIiwgeTIgPSBcIngyXCI7XG4gICAgICAgICAgdGV4dC5hdHRyKFwiZHlcIiwgXCIuMzJlbVwiKS5zdHlsZShcInRleHQtYW5jaG9yXCIsIHNpZ24gPCAwID8gXCJlbmRcIiA6IFwic3RhcnRcIik7XG4gICAgICAgICAgcGF0aFVwZGF0ZS5hdHRyKFwiZFwiLCBcIk1cIiArIHNpZ24gKiBvdXRlclRpY2tTaXplICsgXCIsXCIgKyByYW5nZVswXSArIFwiSDBWXCIgKyByYW5nZVsxXSArIFwiSFwiICsgc2lnbiAqIG91dGVyVGlja1NpemUpO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVFbnRlci5hdHRyKHkyLCBzaWduICogaW5uZXJUaWNrU2l6ZSk7XG4gICAgICAgIHRleHRFbnRlci5hdHRyKHkxLCBzaWduICogdGlja1NwYWNpbmcpO1xuICAgICAgICBsaW5lVXBkYXRlLmF0dHIoeDIsIDApLmF0dHIoeTIsIHNpZ24gKiBpbm5lclRpY2tTaXplKTtcbiAgICAgICAgdGV4dFVwZGF0ZS5hdHRyKHgxLCAwKS5hdHRyKHkxLCBzaWduICogdGlja1NwYWNpbmcpO1xuICAgICAgICBpZiAoc2NhbGUxLnJhbmdlQmFuZCkge1xuICAgICAgICAgIHZhciB4ID0gc2NhbGUxLCBkeCA9IHgucmFuZ2VCYW5kKCkgLyAyO1xuICAgICAgICAgIHNjYWxlMCA9IHNjYWxlMSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiB4KGQpICsgZHg7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChzY2FsZTAucmFuZ2VCYW5kKSB7XG4gICAgICAgICAgc2NhbGUwID0gc2NhbGUxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpY2tFeGl0LmNhbGwodGlja1RyYW5zZm9ybSwgc2NhbGUxLCBzY2FsZTApO1xuICAgICAgICB9XG4gICAgICAgIHRpY2tFbnRlci5jYWxsKHRpY2tUcmFuc2Zvcm0sIHNjYWxlMCwgc2NhbGUxKTtcbiAgICAgICAgdGlja1VwZGF0ZS5jYWxsKHRpY2tUcmFuc2Zvcm0sIHNjYWxlMSwgc2NhbGUxKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBheGlzLnNjYWxlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2NhbGU7XG4gICAgICBzY2FsZSA9IHg7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMub3JpZW50ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JpZW50O1xuICAgICAgb3JpZW50ID0geCBpbiBkM19zdmdfYXhpc09yaWVudHMgPyB4ICsgXCJcIiA6IGQzX3N2Z19heGlzRGVmYXVsdE9yaWVudDtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja0FyZ3VtZW50c187XG4gICAgICB0aWNrQXJndW1lbnRzXyA9IGQzX2FycmF5KGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRpY2tWYWx1ZXM7XG4gICAgICB0aWNrVmFsdWVzID0geDtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja0Zvcm1hdF87XG4gICAgICB0aWNrRm9ybWF0XyA9IHg7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMudGlja1NpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIW4pIHJldHVybiBpbm5lclRpY2tTaXplO1xuICAgICAgaW5uZXJUaWNrU2l6ZSA9ICt4O1xuICAgICAgb3V0ZXJUaWNrU2l6ZSA9ICthcmd1bWVudHNbbiAtIDFdO1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLmlubmVyVGlja1NpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBpbm5lclRpY2tTaXplO1xuICAgICAgaW5uZXJUaWNrU2l6ZSA9ICt4O1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLm91dGVyVGlja1NpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvdXRlclRpY2tTaXplO1xuICAgICAgb3V0ZXJUaWNrU2l6ZSA9ICt4O1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja1BhZGRpbmc7XG4gICAgICB0aWNrUGFkZGluZyA9ICt4O1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLnRpY2tTdWJkaXZpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoICYmIGF4aXM7XG4gICAgfTtcbiAgICByZXR1cm4gYXhpcztcbiAgfTtcbiAgdmFyIGQzX3N2Z19heGlzRGVmYXVsdE9yaWVudCA9IFwiYm90dG9tXCIsIGQzX3N2Z19heGlzT3JpZW50cyA9IHtcbiAgICB0b3A6IDEsXG4gICAgcmlnaHQ6IDEsXG4gICAgYm90dG9tOiAxLFxuICAgIGxlZnQ6IDFcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc3ZnX2F4aXNYKHNlbGVjdGlvbiwgeDAsIHgxKSB7XG4gICAgc2VsZWN0aW9uLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIHYwID0geDAoZCk7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoaXNGaW5pdGUodjApID8gdjAgOiB4MShkKSkgKyBcIiwwKVwiO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19heGlzWShzZWxlY3Rpb24sIHkwLCB5MSkge1xuICAgIHNlbGVjdGlvbi5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHZhciB2MCA9IHkwKGQpO1xuICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoaXNGaW5pdGUodjApID8gdjAgOiB5MShkKSkgKyBcIilcIjtcbiAgICB9KTtcbiAgfVxuICBkMy5zdmcuYnJ1c2ggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXZlbnQgPSBkM19ldmVudERpc3BhdGNoKGJydXNoLCBcImJydXNoc3RhcnRcIiwgXCJicnVzaFwiLCBcImJydXNoZW5kXCIpLCB4ID0gbnVsbCwgeSA9IG51bGwsIHhFeHRlbnQgPSBbIDAsIDAgXSwgeUV4dGVudCA9IFsgMCwgMCBdLCB4RXh0ZW50RG9tYWluLCB5RXh0ZW50RG9tYWluLCB4Q2xhbXAgPSB0cnVlLCB5Q2xhbXAgPSB0cnVlLCByZXNpemVzID0gZDNfc3ZnX2JydXNoUmVzaXplc1swXTtcbiAgICBmdW5jdGlvbiBicnVzaChnKSB7XG4gICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBnID0gZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIikuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpLm9uKFwibW91c2Vkb3duLmJydXNoXCIsIGJydXNoc3RhcnQpLm9uKFwidG91Y2hzdGFydC5icnVzaFwiLCBicnVzaHN0YXJ0KTtcbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSBnLnNlbGVjdEFsbChcIi5iYWNrZ3JvdW5kXCIpLmRhdGEoWyAwIF0pO1xuICAgICAgICBiYWNrZ3JvdW5kLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJiYWNrZ3JvdW5kXCIpLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKS5zdHlsZShcImN1cnNvclwiLCBcImNyb3NzaGFpclwiKTtcbiAgICAgICAgZy5zZWxlY3RBbGwoXCIuZXh0ZW50XCIpLmRhdGEoWyAwIF0pLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJleHRlbnRcIikuc3R5bGUoXCJjdXJzb3JcIiwgXCJtb3ZlXCIpO1xuICAgICAgICB2YXIgcmVzaXplID0gZy5zZWxlY3RBbGwoXCIucmVzaXplXCIpLmRhdGEocmVzaXplcywgZDNfaWRlbnRpdHkpO1xuICAgICAgICByZXNpemUuZXhpdCgpLnJlbW92ZSgpO1xuICAgICAgICByZXNpemUuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIFwicmVzaXplIFwiICsgZDtcbiAgICAgICAgfSkuc3R5bGUoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBkM19zdmdfYnJ1c2hDdXJzb3JbZF07XG4gICAgICAgIH0pLmFwcGVuZChcInJlY3RcIikuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiAvW2V3XSQvLnRlc3QoZCkgPyAtMyA6IG51bGw7XG4gICAgICAgIH0pLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gL15bbnNdLy50ZXN0KGQpID8gLTMgOiBudWxsO1xuICAgICAgICB9KS5hdHRyKFwid2lkdGhcIiwgNikuYXR0cihcImhlaWdodFwiLCA2KS5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgIHJlc2l6ZS5zdHlsZShcImRpc3BsYXlcIiwgYnJ1c2guZW1wdHkoKSA/IFwibm9uZVwiIDogbnVsbCk7XG4gICAgICAgIHZhciBnVXBkYXRlID0gZDMudHJhbnNpdGlvbihnKSwgYmFja2dyb3VuZFVwZGF0ZSA9IGQzLnRyYW5zaXRpb24oYmFja2dyb3VuZCksIHJhbmdlO1xuICAgICAgICBpZiAoeCkge1xuICAgICAgICAgIHJhbmdlID0gZDNfc2NhbGVSYW5nZSh4KTtcbiAgICAgICAgICBiYWNrZ3JvdW5kVXBkYXRlLmF0dHIoXCJ4XCIsIHJhbmdlWzBdKS5hdHRyKFwid2lkdGhcIiwgcmFuZ2VbMV0gLSByYW5nZVswXSk7XG4gICAgICAgICAgcmVkcmF3WChnVXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSkge1xuICAgICAgICAgIHJhbmdlID0gZDNfc2NhbGVSYW5nZSh5KTtcbiAgICAgICAgICBiYWNrZ3JvdW5kVXBkYXRlLmF0dHIoXCJ5XCIsIHJhbmdlWzBdKS5hdHRyKFwiaGVpZ2h0XCIsIHJhbmdlWzFdIC0gcmFuZ2VbMF0pO1xuICAgICAgICAgIHJlZHJhd1koZ1VwZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVkcmF3KGdVcGRhdGUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGJydXNoLmV2ZW50ID0gZnVuY3Rpb24oZykge1xuICAgICAgZy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZXZlbnRfID0gZXZlbnQub2YodGhpcywgYXJndW1lbnRzKSwgZXh0ZW50MSA9IHtcbiAgICAgICAgICB4OiB4RXh0ZW50LFxuICAgICAgICAgIHk6IHlFeHRlbnQsXG4gICAgICAgICAgaTogeEV4dGVudERvbWFpbixcbiAgICAgICAgICBqOiB5RXh0ZW50RG9tYWluXG4gICAgICAgIH0sIGV4dGVudDAgPSB0aGlzLl9fY2hhcnRfXyB8fCBleHRlbnQxO1xuICAgICAgICB0aGlzLl9fY2hhcnRfXyA9IGV4dGVudDE7XG4gICAgICAgIGlmIChkM190cmFuc2l0aW9uSW5oZXJpdElkKSB7XG4gICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5lYWNoKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB4RXh0ZW50RG9tYWluID0gZXh0ZW50MC5pO1xuICAgICAgICAgICAgeUV4dGVudERvbWFpbiA9IGV4dGVudDAuajtcbiAgICAgICAgICAgIHhFeHRlbnQgPSBleHRlbnQwLng7XG4gICAgICAgICAgICB5RXh0ZW50ID0gZXh0ZW50MC55O1xuICAgICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJicnVzaHN0YXJ0XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pLnR3ZWVuKFwiYnJ1c2g6YnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgeGkgPSBkM19pbnRlcnBvbGF0ZUFycmF5KHhFeHRlbnQsIGV4dGVudDEueCksIHlpID0gZDNfaW50ZXJwb2xhdGVBcnJheSh5RXh0ZW50LCBleHRlbnQxLnkpO1xuICAgICAgICAgICAgeEV4dGVudERvbWFpbiA9IHlFeHRlbnREb21haW4gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgeEV4dGVudCA9IGV4dGVudDEueCA9IHhpKHQpO1xuICAgICAgICAgICAgICB5RXh0ZW50ID0gZXh0ZW50MS55ID0geWkodCk7XG4gICAgICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJicnVzaFwiLFxuICAgICAgICAgICAgICAgIG1vZGU6IFwicmVzaXplXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLmVhY2goXCJlbmQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB4RXh0ZW50RG9tYWluID0gZXh0ZW50MS5pO1xuICAgICAgICAgICAgeUV4dGVudERvbWFpbiA9IGV4dGVudDEuajtcbiAgICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hcIixcbiAgICAgICAgICAgICAgbW9kZTogXCJyZXNpemVcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgICB0eXBlOiBcImJydXNoZW5kXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICB0eXBlOiBcImJydXNoc3RhcnRcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG4gICAgICAgICAgICBtb2RlOiBcInJlc2l6ZVwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hlbmRcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHJlZHJhdyhnKSB7XG4gICAgICBnLnNlbGVjdEFsbChcIi5yZXNpemVcIikuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHhFeHRlbnRbKy9lJC8udGVzdChkKV0gKyBcIixcIiArIHlFeHRlbnRbKy9ecy8udGVzdChkKV0gKyBcIilcIjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWRyYXdYKGcpIHtcbiAgICAgIGcuc2VsZWN0KFwiLmV4dGVudFwiKS5hdHRyKFwieFwiLCB4RXh0ZW50WzBdKTtcbiAgICAgIGcuc2VsZWN0QWxsKFwiLmV4dGVudCwubj5yZWN0LC5zPnJlY3RcIikuYXR0cihcIndpZHRoXCIsIHhFeHRlbnRbMV0gLSB4RXh0ZW50WzBdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVkcmF3WShnKSB7XG4gICAgICBnLnNlbGVjdChcIi5leHRlbnRcIikuYXR0cihcInlcIiwgeUV4dGVudFswXSk7XG4gICAgICBnLnNlbGVjdEFsbChcIi5leHRlbnQsLmU+cmVjdCwudz5yZWN0XCIpLmF0dHIoXCJoZWlnaHRcIiwgeUV4dGVudFsxXSAtIHlFeHRlbnRbMF0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBicnVzaHN0YXJ0KCkge1xuICAgICAgdmFyIHRhcmdldCA9IHRoaXMsIGV2ZW50VGFyZ2V0ID0gZDMuc2VsZWN0KGQzLmV2ZW50LnRhcmdldCksIGV2ZW50XyA9IGV2ZW50Lm9mKHRhcmdldCwgYXJndW1lbnRzKSwgZyA9IGQzLnNlbGVjdCh0YXJnZXQpLCByZXNpemluZyA9IGV2ZW50VGFyZ2V0LmRhdHVtKCksIHJlc2l6aW5nWCA9ICEvXihufHMpJC8udGVzdChyZXNpemluZykgJiYgeCwgcmVzaXppbmdZID0gIS9eKGV8dykkLy50ZXN0KHJlc2l6aW5nKSAmJiB5LCBkcmFnZ2luZyA9IGV2ZW50VGFyZ2V0LmNsYXNzZWQoXCJleHRlbnRcIiksIGRyYWdSZXN0b3JlID0gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKHRhcmdldCksIGNlbnRlciwgb3JpZ2luID0gZDMubW91c2UodGFyZ2V0KSwgb2Zmc2V0O1xuICAgICAgdmFyIHcgPSBkMy5zZWxlY3QoZDNfd2luZG93KHRhcmdldCkpLm9uKFwia2V5ZG93bi5icnVzaFwiLCBrZXlkb3duKS5vbihcImtleXVwLmJydXNoXCIsIGtleXVwKTtcbiAgICAgIGlmIChkMy5ldmVudC5jaGFuZ2VkVG91Y2hlcykge1xuICAgICAgICB3Lm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIGJydXNobW92ZSkub24oXCJ0b3VjaGVuZC5icnVzaFwiLCBicnVzaGVuZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3Lm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIGJydXNobW92ZSkub24oXCJtb3VzZXVwLmJydXNoXCIsIGJydXNoZW5kKTtcbiAgICAgIH1cbiAgICAgIGcuaW50ZXJydXB0KCkuc2VsZWN0QWxsKFwiKlwiKS5pbnRlcnJ1cHQoKTtcbiAgICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgICBvcmlnaW5bMF0gPSB4RXh0ZW50WzBdIC0gb3JpZ2luWzBdO1xuICAgICAgICBvcmlnaW5bMV0gPSB5RXh0ZW50WzBdIC0gb3JpZ2luWzFdO1xuICAgICAgfSBlbHNlIGlmIChyZXNpemluZykge1xuICAgICAgICB2YXIgZXggPSArL3ckLy50ZXN0KHJlc2l6aW5nKSwgZXkgPSArL15uLy50ZXN0KHJlc2l6aW5nKTtcbiAgICAgICAgb2Zmc2V0ID0gWyB4RXh0ZW50WzEgLSBleF0gLSBvcmlnaW5bMF0sIHlFeHRlbnRbMSAtIGV5XSAtIG9yaWdpblsxXSBdO1xuICAgICAgICBvcmlnaW5bMF0gPSB4RXh0ZW50W2V4XTtcbiAgICAgICAgb3JpZ2luWzFdID0geUV4dGVudFtleV07XG4gICAgICB9IGVsc2UgaWYgKGQzLmV2ZW50LmFsdEtleSkgY2VudGVyID0gb3JpZ2luLnNsaWNlKCk7XG4gICAgICBnLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpLnNlbGVjdEFsbChcIi5yZXNpemVcIikuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpO1xuICAgICAgZDMuc2VsZWN0KFwiYm9keVwiKS5zdHlsZShcImN1cnNvclwiLCBldmVudFRhcmdldC5zdHlsZShcImN1cnNvclwiKSk7XG4gICAgICBldmVudF8oe1xuICAgICAgICB0eXBlOiBcImJydXNoc3RhcnRcIlxuICAgICAgfSk7XG4gICAgICBicnVzaG1vdmUoKTtcbiAgICAgIGZ1bmN0aW9uIGtleWRvd24oKSB7XG4gICAgICAgIGlmIChkMy5ldmVudC5rZXlDb2RlID09IDMyKSB7XG4gICAgICAgICAgaWYgKCFkcmFnZ2luZykge1xuICAgICAgICAgICAgY2VudGVyID0gbnVsbDtcbiAgICAgICAgICAgIG9yaWdpblswXSAtPSB4RXh0ZW50WzFdO1xuICAgICAgICAgICAgb3JpZ2luWzFdIC09IHlFeHRlbnRbMV07XG4gICAgICAgICAgICBkcmFnZ2luZyA9IDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24ga2V5dXAoKSB7XG4gICAgICAgIGlmIChkMy5ldmVudC5rZXlDb2RlID09IDMyICYmIGRyYWdnaW5nID09IDIpIHtcbiAgICAgICAgICBvcmlnaW5bMF0gKz0geEV4dGVudFsxXTtcbiAgICAgICAgICBvcmlnaW5bMV0gKz0geUV4dGVudFsxXTtcbiAgICAgICAgICBkcmFnZ2luZyA9IDA7XG4gICAgICAgICAgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBicnVzaG1vdmUoKSB7XG4gICAgICAgIHZhciBwb2ludCA9IGQzLm1vdXNlKHRhcmdldCksIG1vdmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICBwb2ludFswXSArPSBvZmZzZXRbMF07XG4gICAgICAgICAgcG9pbnRbMV0gKz0gb2Zmc2V0WzFdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZHJhZ2dpbmcpIHtcbiAgICAgICAgICBpZiAoZDMuZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICBpZiAoIWNlbnRlcikgY2VudGVyID0gWyAoeEV4dGVudFswXSArIHhFeHRlbnRbMV0pIC8gMiwgKHlFeHRlbnRbMF0gKyB5RXh0ZW50WzFdKSAvIDIgXTtcbiAgICAgICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbKyhwb2ludFswXSA8IGNlbnRlclswXSldO1xuICAgICAgICAgICAgb3JpZ2luWzFdID0geUV4dGVudFsrKHBvaW50WzFdIDwgY2VudGVyWzFdKV07XG4gICAgICAgICAgfSBlbHNlIGNlbnRlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc2l6aW5nWCAmJiBtb3ZlMShwb2ludCwgeCwgMCkpIHtcbiAgICAgICAgICByZWRyYXdYKGcpO1xuICAgICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzaXppbmdZICYmIG1vdmUxKHBvaW50LCB5LCAxKSkge1xuICAgICAgICAgIHJlZHJhd1koZyk7XG4gICAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb3ZlZCkge1xuICAgICAgICAgIHJlZHJhdyhnKTtcbiAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgdHlwZTogXCJicnVzaFwiLFxuICAgICAgICAgICAgbW9kZTogZHJhZ2dpbmcgPyBcIm1vdmVcIiA6IFwicmVzaXplXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbW92ZTEocG9pbnQsIHNjYWxlLCBpKSB7XG4gICAgICAgIHZhciByYW5nZSA9IGQzX3NjYWxlUmFuZ2Uoc2NhbGUpLCByMCA9IHJhbmdlWzBdLCByMSA9IHJhbmdlWzFdLCBwb3NpdGlvbiA9IG9yaWdpbltpXSwgZXh0ZW50ID0gaSA/IHlFeHRlbnQgOiB4RXh0ZW50LCBzaXplID0gZXh0ZW50WzFdIC0gZXh0ZW50WzBdLCBtaW4sIG1heDtcbiAgICAgICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICAgICAgcjAgLT0gcG9zaXRpb247XG4gICAgICAgICAgcjEgLT0gc2l6ZSArIHBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIG1pbiA9IChpID8geUNsYW1wIDogeENsYW1wKSA/IE1hdGgubWF4KHIwLCBNYXRoLm1pbihyMSwgcG9pbnRbaV0pKSA6IHBvaW50W2ldO1xuICAgICAgICBpZiAoZHJhZ2dpbmcpIHtcbiAgICAgICAgICBtYXggPSAobWluICs9IHBvc2l0aW9uKSArIHNpemU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNlbnRlcikgcG9zaXRpb24gPSBNYXRoLm1heChyMCwgTWF0aC5taW4ocjEsIDIgKiBjZW50ZXJbaV0gLSBtaW4pKTtcbiAgICAgICAgICBpZiAocG9zaXRpb24gPCBtaW4pIHtcbiAgICAgICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgICAgIG1pbiA9IHBvc2l0aW9uO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXggPSBwb3NpdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dGVudFswXSAhPSBtaW4gfHwgZXh0ZW50WzFdICE9IG1heCkge1xuICAgICAgICAgIGlmIChpKSB5RXh0ZW50RG9tYWluID0gbnVsbDsgZWxzZSB4RXh0ZW50RG9tYWluID0gbnVsbDtcbiAgICAgICAgICBleHRlbnRbMF0gPSBtaW47XG4gICAgICAgICAgZXh0ZW50WzFdID0gbWF4O1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBicnVzaGVuZCgpIHtcbiAgICAgICAgYnJ1c2htb3ZlKCk7XG4gICAgICAgIGcuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKS5zZWxlY3RBbGwoXCIucmVzaXplXCIpLnN0eWxlKFwiZGlzcGxheVwiLCBicnVzaC5lbXB0eSgpID8gXCJub25lXCIgOiBudWxsKTtcbiAgICAgICAgZDMuc2VsZWN0KFwiYm9keVwiKS5zdHlsZShcImN1cnNvclwiLCBudWxsKTtcbiAgICAgICAgdy5vbihcIm1vdXNlbW92ZS5icnVzaFwiLCBudWxsKS5vbihcIm1vdXNldXAuYnJ1c2hcIiwgbnVsbCkub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgbnVsbCkub24oXCJ0b3VjaGVuZC5icnVzaFwiLCBudWxsKS5vbihcImtleWRvd24uYnJ1c2hcIiwgbnVsbCkub24oXCJrZXl1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgICAgZHJhZ1Jlc3RvcmUoKTtcbiAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICB0eXBlOiBcImJydXNoZW5kXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGJydXNoLnggPSBmdW5jdGlvbih6KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4O1xuICAgICAgeCA9IHo7XG4gICAgICByZXNpemVzID0gZDNfc3ZnX2JydXNoUmVzaXplc1sheCA8PCAxIHwgIXldO1xuICAgICAgcmV0dXJuIGJydXNoO1xuICAgIH07XG4gICAgYnJ1c2gueSA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHk7XG4gICAgICB5ID0gejtcbiAgICAgIHJlc2l6ZXMgPSBkM19zdmdfYnJ1c2hSZXNpemVzWyF4IDw8IDEgfCAheV07XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC5jbGFtcCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHggJiYgeSA/IFsgeENsYW1wLCB5Q2xhbXAgXSA6IHggPyB4Q2xhbXAgOiB5ID8geUNsYW1wIDogbnVsbDtcbiAgICAgIGlmICh4ICYmIHkpIHhDbGFtcCA9ICEhelswXSwgeUNsYW1wID0gISF6WzFdOyBlbHNlIGlmICh4KSB4Q2xhbXAgPSAhIXo7IGVsc2UgaWYgKHkpIHlDbGFtcCA9ICEhejtcbiAgICAgIHJldHVybiBicnVzaDtcbiAgICB9O1xuICAgIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIHZhciB4MCwgeDEsIHkwLCB5MSwgdDtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICBpZiAoeCkge1xuICAgICAgICAgIGlmICh4RXh0ZW50RG9tYWluKSB7XG4gICAgICAgICAgICB4MCA9IHhFeHRlbnREb21haW5bMF0sIHgxID0geEV4dGVudERvbWFpblsxXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeDAgPSB4RXh0ZW50WzBdLCB4MSA9IHhFeHRlbnRbMV07XG4gICAgICAgICAgICBpZiAoeC5pbnZlcnQpIHgwID0geC5pbnZlcnQoeDApLCB4MSA9IHguaW52ZXJ0KHgxKTtcbiAgICAgICAgICAgIGlmICh4MSA8IHgwKSB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkpIHtcbiAgICAgICAgICBpZiAoeUV4dGVudERvbWFpbikge1xuICAgICAgICAgICAgeTAgPSB5RXh0ZW50RG9tYWluWzBdLCB5MSA9IHlFeHRlbnREb21haW5bMV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHkwID0geUV4dGVudFswXSwgeTEgPSB5RXh0ZW50WzFdO1xuICAgICAgICAgICAgaWYgKHkuaW52ZXJ0KSB5MCA9IHkuaW52ZXJ0KHkwKSwgeTEgPSB5LmludmVydCh5MSk7XG4gICAgICAgICAgICBpZiAoeTEgPCB5MCkgdCA9IHkwLCB5MCA9IHkxLCB5MSA9IHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4ICYmIHkgPyBbIFsgeDAsIHkwIF0sIFsgeDEsIHkxIF0gXSA6IHggPyBbIHgwLCB4MSBdIDogeSAmJiBbIHkwLCB5MSBdO1xuICAgICAgfVxuICAgICAgaWYgKHgpIHtcbiAgICAgICAgeDAgPSB6WzBdLCB4MSA9IHpbMV07XG4gICAgICAgIGlmICh5KSB4MCA9IHgwWzBdLCB4MSA9IHgxWzBdO1xuICAgICAgICB4RXh0ZW50RG9tYWluID0gWyB4MCwgeDEgXTtcbiAgICAgICAgaWYgKHguaW52ZXJ0KSB4MCA9IHgoeDApLCB4MSA9IHgoeDEpO1xuICAgICAgICBpZiAoeDEgPCB4MCkgdCA9IHgwLCB4MCA9IHgxLCB4MSA9IHQ7XG4gICAgICAgIGlmICh4MCAhPSB4RXh0ZW50WzBdIHx8IHgxICE9IHhFeHRlbnRbMV0pIHhFeHRlbnQgPSBbIHgwLCB4MSBdO1xuICAgICAgfVxuICAgICAgaWYgKHkpIHtcbiAgICAgICAgeTAgPSB6WzBdLCB5MSA9IHpbMV07XG4gICAgICAgIGlmICh4KSB5MCA9IHkwWzFdLCB5MSA9IHkxWzFdO1xuICAgICAgICB5RXh0ZW50RG9tYWluID0gWyB5MCwgeTEgXTtcbiAgICAgICAgaWYgKHkuaW52ZXJ0KSB5MCA9IHkoeTApLCB5MSA9IHkoeTEpO1xuICAgICAgICBpZiAoeTEgPCB5MCkgdCA9IHkwLCB5MCA9IHkxLCB5MSA9IHQ7XG4gICAgICAgIGlmICh5MCAhPSB5RXh0ZW50WzBdIHx8IHkxICE9IHlFeHRlbnRbMV0pIHlFeHRlbnQgPSBbIHkwLCB5MSBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJydXNoO1xuICAgIH07XG4gICAgYnJ1c2guY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghYnJ1c2guZW1wdHkoKSkge1xuICAgICAgICB4RXh0ZW50ID0gWyAwLCAwIF0sIHlFeHRlbnQgPSBbIDAsIDAgXTtcbiAgICAgICAgeEV4dGVudERvbWFpbiA9IHlFeHRlbnREb21haW4gPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJydXNoO1xuICAgIH07XG4gICAgYnJ1c2guZW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhIXggJiYgeEV4dGVudFswXSA9PSB4RXh0ZW50WzFdIHx8ICEheSAmJiB5RXh0ZW50WzBdID09IHlFeHRlbnRbMV07XG4gICAgfTtcbiAgICByZXR1cm4gZDMucmViaW5kKGJydXNoLCBldmVudCwgXCJvblwiKTtcbiAgfTtcbiAgdmFyIGQzX3N2Z19icnVzaEN1cnNvciA9IHtcbiAgICBuOiBcIm5zLXJlc2l6ZVwiLFxuICAgIGU6IFwiZXctcmVzaXplXCIsXG4gICAgczogXCJucy1yZXNpemVcIixcbiAgICB3OiBcImV3LXJlc2l6ZVwiLFxuICAgIG53OiBcIm53c2UtcmVzaXplXCIsXG4gICAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgICBzZTogXCJud3NlLXJlc2l6ZVwiLFxuICAgIHN3OiBcIm5lc3ctcmVzaXplXCJcbiAgfTtcbiAgdmFyIGQzX3N2Z19icnVzaFJlc2l6ZXMgPSBbIFsgXCJuXCIsIFwiZVwiLCBcInNcIiwgXCJ3XCIsIFwibndcIiwgXCJuZVwiLCBcInNlXCIsIFwic3dcIiBdLCBbIFwiZVwiLCBcIndcIiBdLCBbIFwiblwiLCBcInNcIiBdLCBbXSBdO1xuICB2YXIgZDNfdGltZV9mb3JtYXQgPSBkM190aW1lLmZvcm1hdCA9IGQzX2xvY2FsZV9lblVTLnRpbWVGb3JtYXQ7XG4gIHZhciBkM190aW1lX2Zvcm1hdFV0YyA9IGQzX3RpbWVfZm9ybWF0LnV0YztcbiAgdmFyIGQzX3RpbWVfZm9ybWF0SXNvID0gZDNfdGltZV9mb3JtYXRVdGMoXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIik7XG4gIGQzX3RpbWVfZm9ybWF0LmlzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICYmICtuZXcgRGF0ZShcIjIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWlwiKSA/IGQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlIDogZDNfdGltZV9mb3JtYXRJc287XG4gIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xuICB9XG4gIGQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlLnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuICAgIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xuICB9O1xuICBkM190aW1lX2Zvcm1hdElzb05hdGl2ZS50b1N0cmluZyA9IGQzX3RpbWVfZm9ybWF0SXNvLnRvU3RyaW5nO1xuICBkM190aW1lLnNlY29uZCA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBuZXcgZDNfZGF0ZShNYXRoLmZsb29yKGRhdGUgLyAxZTMpICogMWUzKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG4gICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgTWF0aC5mbG9vcihvZmZzZXQpICogMWUzKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldFNlY29uZHMoKTtcbiAgfSk7XG4gIGQzX3RpbWUuc2Vjb25kcyA9IGQzX3RpbWUuc2Vjb25kLnJhbmdlO1xuICBkM190aW1lLnNlY29uZHMudXRjID0gZDNfdGltZS5zZWNvbmQudXRjLnJhbmdlO1xuICBkM190aW1lLm1pbnV0ZSA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBuZXcgZDNfZGF0ZShNYXRoLmZsb29yKGRhdGUgLyA2ZTQpICogNmU0KTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG4gICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgTWF0aC5mbG9vcihvZmZzZXQpICogNmU0KTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbiAgfSk7XG4gIGQzX3RpbWUubWludXRlcyA9IGQzX3RpbWUubWludXRlLnJhbmdlO1xuICBkM190aW1lLm1pbnV0ZXMudXRjID0gZDNfdGltZS5taW51dGUudXRjLnJhbmdlO1xuICBkM190aW1lLmhvdXIgPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgdGltZXpvbmUgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgLyA2MDtcbiAgICByZXR1cm4gbmV3IGQzX2RhdGUoKE1hdGguZmxvb3IoZGF0ZSAvIDM2ZTUgLSB0aW1lem9uZSkgKyB0aW1lem9uZSkgKiAzNmU1KTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG4gICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgTWF0aC5mbG9vcihvZmZzZXQpICogMzZlNSk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xuICB9KTtcbiAgZDNfdGltZS5ob3VycyA9IGQzX3RpbWUuaG91ci5yYW5nZTtcbiAgZDNfdGltZS5ob3Vycy51dGMgPSBkM190aW1lLmhvdXIudXRjLnJhbmdlO1xuICBkM190aW1lLm1vbnRoID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZSA9IGQzX3RpbWUuZGF5KGRhdGUpO1xuICAgIGRhdGUuc2V0RGF0ZSgxKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7XG4gICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBvZmZzZXQpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbiAgfSk7XG4gIGQzX3RpbWUubW9udGhzID0gZDNfdGltZS5tb250aC5yYW5nZTtcbiAgZDNfdGltZS5tb250aHMudXRjID0gZDNfdGltZS5tb250aC51dGMucmFuZ2U7XG4gIGZ1bmN0aW9uIGQzX3RpbWVfc2NhbGUobGluZWFyLCBtZXRob2RzLCBmb3JtYXQpIHtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICByZXR1cm4gbGluZWFyKHgpO1xuICAgIH1cbiAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gZDNfdGltZV9zY2FsZURhdGUobGluZWFyLmludmVydCh4KSk7XG4gICAgfTtcbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5lYXIuZG9tYWluKCkubWFwKGQzX3RpbWVfc2NhbGVEYXRlKTtcbiAgICAgIGxpbmVhci5kb21haW4oeCk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBmdW5jdGlvbiB0aWNrTWV0aG9kKGV4dGVudCwgY291bnQpIHtcbiAgICAgIHZhciBzcGFuID0gZXh0ZW50WzFdIC0gZXh0ZW50WzBdLCB0YXJnZXQgPSBzcGFuIC8gY291bnQsIGkgPSBkMy5iaXNlY3QoZDNfdGltZV9zY2FsZVN0ZXBzLCB0YXJnZXQpO1xuICAgICAgcmV0dXJuIGkgPT0gZDNfdGltZV9zY2FsZVN0ZXBzLmxlbmd0aCA/IFsgbWV0aG9kcy55ZWFyLCBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZXh0ZW50Lm1hcChmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkIC8gMzE1MzZlNjtcbiAgICAgIH0pLCBjb3VudClbMl0gXSA6ICFpID8gWyBkM190aW1lX3NjYWxlTWlsbGlzZWNvbmRzLCBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZXh0ZW50LCBjb3VudClbMl0gXSA6IG1ldGhvZHNbdGFyZ2V0IC8gZDNfdGltZV9zY2FsZVN0ZXBzW2kgLSAxXSA8IGQzX3RpbWVfc2NhbGVTdGVwc1tpXSAvIHRhcmdldCA/IGkgLSAxIDogaV07XG4gICAgfVxuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCwgc2tpcCkge1xuICAgICAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbigpLCBleHRlbnQgPSBkM19zY2FsZUV4dGVudChkb21haW4pLCBtZXRob2QgPSBpbnRlcnZhbCA9PSBudWxsID8gdGlja01ldGhvZChleHRlbnQsIDEwKSA6IHR5cGVvZiBpbnRlcnZhbCA9PT0gXCJudW1iZXJcIiAmJiB0aWNrTWV0aG9kKGV4dGVudCwgaW50ZXJ2YWwpO1xuICAgICAgaWYgKG1ldGhvZCkgaW50ZXJ2YWwgPSBtZXRob2RbMF0sIHNraXAgPSBtZXRob2RbMV07XG4gICAgICBmdW5jdGlvbiBza2lwcGVkKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuICFpc05hTihkYXRlKSAmJiAhaW50ZXJ2YWwucmFuZ2UoZGF0ZSwgZDNfdGltZV9zY2FsZURhdGUoK2RhdGUgKyAxKSwgc2tpcCkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNjYWxlLmRvbWFpbihkM19zY2FsZV9uaWNlKGRvbWFpbiwgc2tpcCA+IDEgPyB7XG4gICAgICAgIGZsb29yOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgd2hpbGUgKHNraXBwZWQoZGF0ZSA9IGludGVydmFsLmZsb29yKGRhdGUpKSkgZGF0ZSA9IGQzX3RpbWVfc2NhbGVEYXRlKGRhdGUgLSAxKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2VpbDogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHdoaWxlIChza2lwcGVkKGRhdGUgPSBpbnRlcnZhbC5jZWlsKGRhdGUpKSkgZGF0ZSA9IGQzX3RpbWVfc2NhbGVEYXRlKCtkYXRlICsgMSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH1cbiAgICAgIH0gOiBpbnRlcnZhbCkpO1xuICAgIH07XG4gICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCwgc2tpcCkge1xuICAgICAgdmFyIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KHNjYWxlLmRvbWFpbigpKSwgbWV0aG9kID0gaW50ZXJ2YWwgPT0gbnVsbCA/IHRpY2tNZXRob2QoZXh0ZW50LCAxMCkgOiB0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIgPyB0aWNrTWV0aG9kKGV4dGVudCwgaW50ZXJ2YWwpIDogIWludGVydmFsLnJhbmdlICYmIFsge1xuICAgICAgICByYW5nZTogaW50ZXJ2YWxcbiAgICAgIH0sIHNraXAgXTtcbiAgICAgIGlmIChtZXRob2QpIGludGVydmFsID0gbWV0aG9kWzBdLCBza2lwID0gbWV0aG9kWzFdO1xuICAgICAgcmV0dXJuIGludGVydmFsLnJhbmdlKGV4dGVudFswXSwgZDNfdGltZV9zY2FsZURhdGUoK2V4dGVudFsxXSArIDEpLCBza2lwIDwgMSA/IDEgOiBza2lwKTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfdGltZV9zY2FsZShsaW5lYXIuY29weSgpLCBtZXRob2RzLCBmb3JtYXQpO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclJlYmluZChzY2FsZSwgbGluZWFyKTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3NjYWxlRGF0ZSh0KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHQpO1xuICB9XG4gIHZhciBkM190aW1lX3NjYWxlU3RlcHMgPSBbIDFlMywgNWUzLCAxNWUzLCAzZTQsIDZlNCwgM2U1LCA5ZTUsIDE4ZTUsIDM2ZTUsIDEwOGU1LCAyMTZlNSwgNDMyZTUsIDg2NGU1LCAxNzI4ZTUsIDYwNDhlNSwgMjU5MmU2LCA3Nzc2ZTYsIDMxNTM2ZTYgXTtcbiAgdmFyIGQzX3RpbWVfc2NhbGVMb2NhbE1ldGhvZHMgPSBbIFsgZDNfdGltZS5zZWNvbmQsIDEgXSwgWyBkM190aW1lLnNlY29uZCwgNSBdLCBbIGQzX3RpbWUuc2Vjb25kLCAxNSBdLCBbIGQzX3RpbWUuc2Vjb25kLCAzMCBdLCBbIGQzX3RpbWUubWludXRlLCAxIF0sIFsgZDNfdGltZS5taW51dGUsIDUgXSwgWyBkM190aW1lLm1pbnV0ZSwgMTUgXSwgWyBkM190aW1lLm1pbnV0ZSwgMzAgXSwgWyBkM190aW1lLmhvdXIsIDEgXSwgWyBkM190aW1lLmhvdXIsIDMgXSwgWyBkM190aW1lLmhvdXIsIDYgXSwgWyBkM190aW1lLmhvdXIsIDEyIF0sIFsgZDNfdGltZS5kYXksIDEgXSwgWyBkM190aW1lLmRheSwgMiBdLCBbIGQzX3RpbWUud2VlaywgMSBdLCBbIGQzX3RpbWUubW9udGgsIDEgXSwgWyBkM190aW1lLm1vbnRoLCAzIF0sIFsgZDNfdGltZS55ZWFyLCAxIF0gXTtcbiAgdmFyIGQzX3RpbWVfc2NhbGVMb2NhbEZvcm1hdCA9IGQzX3RpbWVfZm9ybWF0Lm11bHRpKFsgWyBcIi4lTFwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gIH0gXSwgWyBcIjolU1wiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0U2Vjb25kcygpO1xuICB9IF0sIFsgXCIlSTolTVwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0TWludXRlcygpO1xuICB9IF0sIFsgXCIlSSAlcFwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0SG91cnMoKTtcbiAgfSBdLCBbIFwiJWEgJWRcIiwgZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkLmdldERheSgpICYmIGQuZ2V0RGF0ZSgpICE9IDE7XG4gIH0gXSwgWyBcIiViICVkXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXREYXRlKCkgIT0gMTtcbiAgfSBdLCBbIFwiJUJcIiwgZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkLmdldE1vbnRoKCk7XG4gIH0gXSwgWyBcIiVZXCIsIGQzX3RydWUgXSBdKTtcbiAgdmFyIGQzX3RpbWVfc2NhbGVNaWxsaXNlY29uZHMgPSB7XG4gICAgcmFuZ2U6IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgICByZXR1cm4gZDMucmFuZ2UoTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCkgKiBzdGVwLCArc3RvcCwgc3RlcCkubWFwKGQzX3RpbWVfc2NhbGVEYXRlKTtcbiAgICB9LFxuICAgIGZsb29yOiBkM19pZGVudGl0eSxcbiAgICBjZWlsOiBkM19pZGVudGl0eVxuICB9O1xuICBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLnllYXIgPSBkM190aW1lLnllYXI7XG4gIGQzX3RpbWUuc2NhbGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfdGltZV9zY2FsZShkMy5zY2FsZS5saW5lYXIoKSwgZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcywgZDNfdGltZV9zY2FsZUxvY2FsRm9ybWF0KTtcbiAgfTtcbiAgdmFyIGQzX3RpbWVfc2NhbGVVdGNNZXRob2RzID0gZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcy5tYXAoZnVuY3Rpb24obSkge1xuICAgIHJldHVybiBbIG1bMF0udXRjLCBtWzFdIF07XG4gIH0pO1xuICB2YXIgZDNfdGltZV9zY2FsZVV0Y0Zvcm1hdCA9IGQzX3RpbWVfZm9ybWF0VXRjLm11bHRpKFsgWyBcIi4lTFwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIH0gXSwgWyBcIjolU1wiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDU2Vjb25kcygpO1xuICB9IF0sIFsgXCIlSTolTVwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDTWludXRlcygpO1xuICB9IF0sIFsgXCIlSSAlcFwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDSG91cnMoKTtcbiAgfSBdLCBbIFwiJWEgJWRcIiwgZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkLmdldFVUQ0RheSgpICYmIGQuZ2V0VVRDRGF0ZSgpICE9IDE7XG4gIH0gXSwgWyBcIiViICVkXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENEYXRlKCkgIT0gMTtcbiAgfSBdLCBbIFwiJUJcIiwgZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkLmdldFVUQ01vbnRoKCk7XG4gIH0gXSwgWyBcIiVZXCIsIGQzX3RydWUgXSBdKTtcbiAgZDNfdGltZV9zY2FsZVV0Y01ldGhvZHMueWVhciA9IGQzX3RpbWUueWVhci51dGM7XG4gIGQzX3RpbWUuc2NhbGUudXRjID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3RpbWVfc2NhbGUoZDMuc2NhbGUubGluZWFyKCksIGQzX3RpbWVfc2NhbGVVdGNNZXRob2RzLCBkM190aW1lX3NjYWxlVXRjRm9ybWF0KTtcbiAgfTtcbiAgZDMudGV4dCA9IGQzX3hoclR5cGUoZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgIHJldHVybiByZXF1ZXN0LnJlc3BvbnNlVGV4dDtcbiAgfSk7XG4gIGQzLmpzb24gPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGQzX3hocih1cmwsIFwiYXBwbGljYXRpb24vanNvblwiLCBkM19qc29uLCBjYWxsYmFjayk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2pzb24ocmVxdWVzdCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgfVxuICBkMy5odG1sID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBkM194aHIodXJsLCBcInRleHQvaHRtbFwiLCBkM19odG1sLCBjYWxsYmFjayk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2h0bWwocmVxdWVzdCkge1xuICAgIHZhciByYW5nZSA9IGQzX2RvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgcmFuZ2Uuc2VsZWN0Tm9kZShkM19kb2N1bWVudC5ib2R5KTtcbiAgICByZXR1cm4gcmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgfVxuICBkMy54bWwgPSBkM194aHJUeXBlKGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiAgICByZXR1cm4gcmVxdWVzdC5yZXNwb25zZVhNTDtcbiAgfSk7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgdGhpcy5kMyA9IGQzLCBkZWZpbmUoZDMpOyBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGQzOyBlbHNlIHRoaXMuZDMgPSBkMztcbn0oKTsiLCJpbXBvcnQge2QzX2NsYXNzLCBkM19zcGxhdCwgZDNfdXBkYXRlYWJsZSwgYWNjZXNzb3IsIEQzQ29tcG9uZW50QmFzZX0gZnJvbSAnaGVscGVycydcbmltcG9ydCBkMyBmcm9tICdkMydcbmltcG9ydCAnLi9kb21haW5fZXhwYW5kZWQuY3NzJ1xuXG5pbXBvcnQge3RhYnVsYXJfdGltZXNlcmllc30gZnJvbSAnLi90YWJ1bGFyX3RpbWVzZXJpZXMvaW5kZXgnXG5cbmV4cG9ydCBsZXQgYWxsYnVja2V0cyA9IFtdXG5leHBvcnQgY29uc3QgaG91cmJ1Y2tldHMgPSBkMy5yYW5nZSgwLDI0KS5tYXAoeCA9PiBTdHJpbmcoeCkubGVuZ3RoID4gMSA/IFN0cmluZyh4KSA6IFwiMFwiICsgeClcblxudmFyIG1pbnV0ZXMgPSBbMCwyMCw0MF1cbmV4cG9ydCBjb25zdCBidWNrZXRzID0gZDMucmFuZ2UoMCwyNCkucmVkdWNlKChwLGMpID0+IHtcbiAgbWludXRlcy5tYXAoeCA9PiB7XG4gICAgcFtjICsgXCI6XCIgKyB4XSA9IDBcbiAgfSlcbiAgYWxsYnVja2V0cyA9IGFsbGJ1Y2tldHMuY29uY2F0KG1pbnV0ZXMubWFwKHogPT4gYyArIFwiOlwiICsgeikpXG4gIHJldHVybiBwXG59LHt9KVxuXG5cbmV4cG9ydCBjb25zdCBTVE9QV09SRFMgPSBbXCJ0aGF0XCIsXCJ0aGlzXCIsXCJ3aGF0XCIsXCJiZXN0XCIsXCJtb3N0XCIsXCJmcm9tXCIsXCJ5b3VyXCIsXCJoYXZlXCIsXCJmaXJzdFwiLFwid2lsbFwiLFwidGhhblwiLFwic2F5c1wiLFwibGlrZVwiLFwiaW50b1wiLFwiYWZ0ZXJcIixcIndpdGhcIl1cblxuZnVuY3Rpb24gcmF3VG9VcmwoZGF0YSkge1xuICByZXR1cm4gZGF0YS5yZWR1Y2UoKHAsYykgPT4ge1xuICAgICAgcFtjLnVybF0gPSBwW2MudXJsXSB8fCBPYmplY3QuYXNzaWduKHt9LGJ1Y2tldHMpXG4gICAgICBwW2MudXJsXVtjLmhvdXJdID0gKHBbYy51cmxdW2MuaG91cl0gfHwgMCkgKyBjLmNvdW50XG4gICAgICByZXR1cm4gcFxuICAgIH0se30pXG59XG5cbmZ1bmN0aW9uIHVybFRvRHJhdyh1cmxzKSB7XG4gIHZhciBvYmogPSB7fVxuICBPYmplY3Qua2V5cyh1cmxzKS5tYXAoayA9PiB7XG4gICAgb2JqW2tdID0gaG91cmJ1Y2tldHMubWFwKGIgPT4gdXJsc1trXVtiXSB8fCAwKVxuICB9KVxuXG4gIHJldHVybiBkMy5lbnRyaWVzKG9iailcbiAgICAubWFwKGZ1bmN0aW9uKHgpe1xuICAgICAgeC51cmwgPSB4LmtleVxuICAgICAgeC50b3RhbCA9IGQzLnN1bSh4LnZhbHVlKVxuICAgICAgcmV0dXJuIHhcbiAgICB9KSBcbn1cblxuZnVuY3Rpb24gZHJhd1RvS2V5d29yZChkcmF3LHNwbGl0KSB7XG4gIGxldCBvYmogPSBkcmF3XG4gICAgLnJlZHVjZShmdW5jdGlvbihwLGMpe1xuICAgICAgYy5rZXkudG9Mb3dlckNhc2UoKS5zcGxpdChzcGxpdClbMV0uc3BsaXQoXCIvXCIpLnJldmVyc2UoKVswXS5yZXBsYWNlKFwiX1wiLFwiLVwiKS5zcGxpdChcIi1cIikubWFwKHggPT4ge1xuICAgICAgICB2YXIgdmFsdWVzID0gU1RPUFdPUkRTXG4gICAgICAgIGlmICh4Lm1hdGNoKC9cXGQrL2cpID09IG51bGwgJiYgdmFsdWVzLmluZGV4T2YoeCkgPT0gLTEgJiYgeC5pbmRleE9mKFwiLFwiKSA9PSAtMSAmJiB4LmluZGV4T2YoXCI/XCIpID09IC0xICYmIHguaW5kZXhPZihcIi5cIikgPT0gLTEgJiYgeC5pbmRleE9mKFwiOlwiKSA9PSAtMSAmJiBwYXJzZUludCh4KSAhPSB4ICYmIHgubGVuZ3RoID4gMykge1xuICAgICAgICAgIHBbeF0gPSBwW3hdIHx8IHt9XG4gICAgICAgICAgT2JqZWN0LmtleXMoYy52YWx1ZSkubWFwKHEgPT4geyBwW3hdW3FdID0gKHBbeF1bcV0gfHwgMCkgKyAoYy52YWx1ZVtxXSB8fCAwKSB9KVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gcFxuICAgIH0se30pIFxuXG4gIHJldHVybiBkMy5lbnRyaWVzKG9iailcbiAgICAubWFwKHggPT4ge1xuICAgICAgeC52YWx1ZXMgPSBPYmplY3Qua2V5cyh4LnZhbHVlKS5tYXAoeiA9PiB4LnZhbHVlW3pdIHx8IDApXG4gICAgICB4LnRvdGFsID0gZDMuc3VtKHgudmFsdWVzKVxuICAgICAgcmV0dXJuIHhcbiAgICB9KVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb21haW5fZXhwYW5kZWQodGFyZ2V0KSB7XG4gIHJldHVybiBuZXcgRG9tYWluRXhwYW5kZWQodGFyZ2V0KVxufVxuXG5jbGFzcyBEb21haW5FeHBhbmRlZCBleHRlbmRzIEQzQ29tcG9uZW50QmFzZSB7XG4gIGNvbnN0cnVjdG9yKHRhcmdldCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXRcbiAgfVxuXG4gIHByb3BzKCkgeyByZXR1cm4gW1wicmF3XCIsXCJkYXRhXCIsXCJ1cmxzXCIsXCJkb21haW5cIl0gfVxuXG4gIGRyYXcoKSB7XG4gICAgbGV0IHRkID0gdGhpcy5fdGFyZ2V0XG5cbiAgICBkM19jbGFzcyh0ZCxcImFjdGlvbi1oZWFkZXJcIilcbiAgICAgIC50ZXh0KFwiRXhwbG9yZSBhbmQgUmVmaW5lXCIpXG5cbiAgICBsZXQgdXJsRGF0YSA9IHJhd1RvVXJsKHRoaXMucmF3KCkpXG4gICAgbGV0IHRvX2RyYXcgPSB1cmxUb0RyYXcodXJsRGF0YSlcbiAgICBsZXQga3dfdG9fZHJhdyA9IGRyYXdUb0tleXdvcmQodG9fZHJhdyx0aGlzLmRvbWFpbigpKVxuXG4gICAgdGFidWxhcl90aW1lc2VyaWVzKGQzX2NsYXNzKHRkLFwidXJsLWRlcHRoXCIpKVxuICAgICAgLmxhYmVsKFwiVVJMXCIpXG4gICAgICAuZGF0YSh0b19kcmF3KVxuICAgICAgLnNwbGl0KHRoaXMuZG9tYWluKCkpXG4gICAgICAub24oXCJzdGFnZS1maWx0ZXJcIix0aGlzLm9uKFwic3RhZ2UtZmlsdGVyXCIpKVxuICAgICAgLmRyYXcoKVxuXG4gICAgdGFidWxhcl90aW1lc2VyaWVzKGQzX2NsYXNzKHRkLFwia3ctZGVwdGhcIikpXG4gICAgICAubGFiZWwoXCJLZXl3b3Jkc1wiKVxuICAgICAgLmRhdGEoa3dfdG9fZHJhdylcbiAgICAgIC5vbihcInN0YWdlLWZpbHRlclwiLHRoaXMub24oXCJzdGFnZS1maWx0ZXJcIikpXG4gICAgICAuZHJhdygpXG4gICAgICAgIFxuICB9XG59XG4iLCJpbXBvcnQge2QzX2NsYXNzLCBkM19zcGxhdCwgZDNfdXBkYXRlYWJsZSwgYWNjZXNzb3IsIEQzQ29tcG9uZW50QmFzZX0gZnJvbSAnaGVscGVycydcbmltcG9ydCAnLi92ZXJ0aWNhbF9vcHRpb24uY3NzJ1xuXG5cbmV4cG9ydCBmdW5jdGlvbiB2ZXJ0aWNhbF9vcHRpb24odGFyZ2V0KSB7XG4gIHJldHVybiBuZXcgVmVydGljYWxPcHRpb24odGFyZ2V0KVxufVxuXG4vL1t7a2V5LCB2YWx1ZSwgc2VsZWN0ZWR9LC4uLl1cblxuY2xhc3MgVmVydGljYWxPcHRpb24gZXh0ZW5kcyBEM0NvbXBvbmVudEJhc2Uge1xuICBjb25zdHJ1Y3Rvcih0YXJnZXQpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0XG4gICAgdGhpcy5fb3B0aW9ucyA9IFtdXG4gICAgdGhpcy5fd3JhcHBlcl9jbGFzcyA9IFwidmVydGljYWwtb3B0aW9uc1wiXG4gIH1cblxuICBwcm9wcygpIHsgcmV0dXJuIFtcIm9wdGlvbnNcIixcIndyYXBwZXJfY2xhc3NcIl0gfVxuXG4gIGRyYXcoKSB7XG4gICAgdmFyIG9wdHMgPSBkM19jbGFzcyh0aGlzLl90YXJnZXQsdGhpcy53cmFwcGVyX2NsYXNzKCksXCJkaXZcIix0aGlzLm9wdGlvbnMoKSlcbiAgICAgIFxuICAgICBkM19zcGxhdChvcHRzLFwiLnNob3ctYnV0dG9uXCIsXCJhXCIsdGhpcy5vcHRpb25zKCkseCA9PiB4LmtleSlcbiAgICAgIC5jbGFzc2VkKFwic2hvdy1idXR0b25cIix0cnVlKVxuICAgICAgLmNsYXNzZWQoXCJzZWxlY3RlZFwiLHggPT4geC5zZWxlY3RlZClcbiAgICAgIC50ZXh0KHggPT4geC5rZXkpXG4gICAgICAub24oXCJjbGlja1wiLHRoaXMub24oXCJjbGlja1wiKSApIFxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuIiwidmFyIHZlcnNpb24gPSBcIjAuMC4zXCI7IGV4cG9ydCAqIGZyb20gXCIuLi9pbmRleFwiOyBleHBvcnQge3ZlcnNpb259OyJdLCJuYW1lcyI6WyJkM191cGRhdGVhYmxlIiwidGFyZ2V0Iiwic2VsZWN0b3IiLCJ0eXBlIiwiZGF0YSIsImpvaW5lciIsInVwZGF0ZWFibGUiLCJzZWxlY3RBbGwiLCJ4IiwiZW50ZXIiLCJhcHBlbmQiLCJkM19zcGxhdCIsImQzX2NsYXNzIiwiY2xzIiwiY2xhc3NlZCIsIm5vb3AiLCJhY2Nlc3NvciIsImF0dHIiLCJ2YWwiLCJ1bmRlZmluZWQiLCJEM0NvbXBvbmVudEJhc2UiLCJfdGFyZ2V0IiwiX29uIiwicHJvcHMiLCJtYXAiLCJiaW5kIiwiYWN0aW9uIiwiZm4iLCJUYWJ1bGFySGVhZGVyIiwiV0lEVEgiLCJfbGFiZWwiLCJfaGVhZGVycyIsIl94cyIsIl9hbmNob3JzIiwiZXVoIiwidGV4dCIsImxhYmVsIiwic3ZnX2xlZ2VuZCIsImhlYWRlcnMiLCJsZW5ndGgiLCJpIiwic3R5bGUiLCJTdHJpbmciLCJUYWJ1bGFyQm9keSIsInNlbGYiLCJleHBhbnNpb25fcm93IiwiZXhwYW5zaW9uIiwiaHRtbCIsInVybF9yb3ciLCJzbGljZSIsImtleSIsInVybF9uYW1lIiwib24iLCJzcGxpdCIsInVybCIsInRvdGFsIiwiZWFjaCIsImR0aGlzIiwiZDMiLCJzZWxlY3QiLCJ2YWx1ZXMiLCJ2YWx1ZSIsInRhYnVsYXJfdGltZXNlcmllcyIsIlRhYnVsYXJUaW1lc2VyaWVzIiwidGQiLCJ0aXRsZV9yb3ciLCJoZWFkZXIiLCJkcmF3IiwiYm9keSIsImQzX2FycmF5U2xpY2UiLCJkM19hcnJheSIsImxpc3QiLCJjYWxsIiwiZDNfZG9jdW1lbnQiLCJkb2N1bWVudCIsImQzX2RvY3VtZW50RWxlbWVudCIsIm5vZGUiLCJvd25lckRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiZDNfd2luZG93IiwiZGVmYXVsdFZpZXciLCJjaGlsZE5vZGVzIiwibm9kZVR5cGUiLCJlIiwiYXJyYXkiLCJBcnJheSIsIkRhdGUiLCJub3ciLCJjcmVhdGVFbGVtZW50Iiwic2V0UHJvcGVydHkiLCJlcnJvciIsImQzX2VsZW1lbnRfcHJvdG90eXBlIiwiRWxlbWVudCIsInByb3RvdHlwZSIsImQzX2VsZW1lbnRfc2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwiZDNfc3R5bGVfcHJvdG90eXBlIiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsImQzX3N0eWxlX3NldFByb3BlcnR5IiwibmFtZSIsInNwYWNlIiwibG9jYWwiLCJwcmlvcml0eSIsImFzY2VuZGluZyIsImQzX2FzY2VuZGluZyIsImEiLCJiIiwiTmFOIiwiZGVzY2VuZGluZyIsIm1pbiIsImYiLCJuIiwiYXJndW1lbnRzIiwibWF4IiwiZXh0ZW50IiwiYyIsImQzX251bWJlciIsImQzX251bWVyaWMiLCJpc05hTiIsInN1bSIsInMiLCJtZWFuIiwiaiIsInF1YW50aWxlIiwicCIsIkgiLCJoIiwiTWF0aCIsImZsb29yIiwidiIsIm1lZGlhbiIsIm51bWJlcnMiLCJwdXNoIiwic29ydCIsInZhcmlhbmNlIiwibSIsImQiLCJkZXZpYXRpb24iLCJhcHBseSIsInNxcnQiLCJkM19iaXNlY3RvciIsImNvbXBhcmUiLCJsbyIsImhpIiwibWlkIiwiZDNfYmlzZWN0IiwiYmlzZWN0TGVmdCIsImxlZnQiLCJiaXNlY3QiLCJiaXNlY3RSaWdodCIsInJpZ2h0IiwiYmlzZWN0b3IiLCJzaHVmZmxlIiwiaTAiLCJpMSIsInQiLCJyYW5kb20iLCJwZXJtdXRlIiwiaW5kZXhlcyIsInBlcm11dGVzIiwicGFpcnMiLCJwMCIsInAxIiwiemlwIiwiZDNfemlwTGVuZ3RoIiwiemlwcyIsInRyYW5zcG9zZSIsIm1hdHJpeCIsImtleXMiLCJlbnRyaWVzIiwibWVyZ2UiLCJhcnJheXMiLCJtZXJnZWQiLCJhYnMiLCJyYW5nZSIsInN0YXJ0Iiwic3RvcCIsInN0ZXAiLCJJbmZpbml0eSIsIkVycm9yIiwiayIsImQzX3JhbmdlX2ludGVnZXJTY2FsZSIsImN0b3IiLCJwcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmplY3QiLCJkM19NYXAiLCJmb3JFYWNoIiwic2V0IiwiaXNBcnJheSIsIm8iLCJfIiwiT2JqZWN0IiwiY3JlYXRlIiwiZDNfbWFwX3Byb3RvIiwiZDNfbWFwX3plcm8iLCJkM19tYXBfaGFzIiwiZDNfbWFwX2VzY2FwZSIsImQzX21hcF9yZW1vdmUiLCJkM19tYXBfa2V5cyIsImQzX21hcF91bmVzY2FwZSIsImQzX21hcF9zaXplIiwiZDNfbWFwX2VtcHR5Iiwic2l6ZSIsIm5lc3QiLCJzb3J0S2V5cyIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJtYXBUeXBlIiwiZGVwdGgiLCJrZXlWYWx1ZSIsInNldHRlciIsInZhbHVlc0J5S2V5IiwiZ2V0Iiwic29ydEtleSIsImtleU1hcCIsIm9yZGVyIiwiZDNfU2V0IiwiYWRkIiwiYmVoYXZpb3IiLCJkM19pZGVudGl0eSIsInJlYmluZCIsInNvdXJjZSIsIm1ldGhvZCIsImQzX3JlYmluZCIsImQzX3ZlbmRvclN5bWJvbCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiZDNfdmVuZG9yUHJlZml4ZXMiLCJwcmVmaXhOYW1lIiwiZDNfbm9vcCIsImRpc3BhdGNoIiwiZDNfZGlzcGF0Y2giLCJkM19kaXNwYXRjaF9ldmVudCIsImxpc3RlbmVyIiwiaW5kZXhPZiIsImhhc093blByb3BlcnR5IiwibGlzdGVuZXJzIiwibGlzdGVuZXJCeU5hbWUiLCJldmVudCIsInoiLCJsIiwiY29uY2F0IiwicmVtb3ZlIiwiZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCIsInByZXZlbnREZWZhdWx0IiwiZDNfZXZlbnRTb3VyY2UiLCJzb3VyY2VFdmVudCIsImQzX2V2ZW50RGlzcGF0Y2giLCJvZiIsInRoaXoiLCJhcmd1bWVudHoiLCJlMSIsImUwIiwicmVxdW90ZSIsInJlcGxhY2UiLCJkM19yZXF1b3RlX3JlIiwiZDNfc3ViY2xhc3MiLCJfX3Byb3RvX18iLCJwcm9wZXJ0eSIsImQzX3NlbGVjdGlvbiIsImdyb3VwcyIsImQzX3NlbGVjdGlvblByb3RvdHlwZSIsImQzX3NlbGVjdCIsInF1ZXJ5U2VsZWN0b3IiLCJkM19zZWxlY3RBbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZDNfc2VsZWN0TWF0Y2hlcyIsImQzX3NlbGVjdE1hdGNoZXIiLCJtYXRjaGVzIiwiU2l6emxlIiwibWF0Y2hlc1NlbGVjdG9yIiwic2VsZWN0aW9uIiwic3ViZ3JvdXBzIiwic3ViZ3JvdXAiLCJzdWJub2RlIiwiZ3JvdXAiLCJkM19zZWxlY3Rpb25fc2VsZWN0b3IiLCJwYXJlbnROb2RlIiwiX19kYXRhX18iLCJkM19zZWxlY3Rpb25fc2VsZWN0b3JBbGwiLCJkM19uc1ByZWZpeCIsIm5zIiwicHJlZml4IiwicXVhbGlmeSIsImdldEF0dHJpYnV0ZU5TIiwiZ2V0QXR0cmlidXRlIiwiZDNfc2VsZWN0aW9uX2F0dHIiLCJhdHRyTnVsbCIsInJlbW92ZUF0dHJpYnV0ZSIsImF0dHJOdWxsTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImF0dHJDb25zdGFudCIsImF0dHJDb25zdGFudE5TIiwiYXR0ckZ1bmN0aW9uIiwiYXR0ckZ1bmN0aW9uTlMiLCJkM19jb2xsYXBzZSIsInRyaW0iLCJkM19zZWxlY3Rpb25fY2xhc3NlcyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZDNfc2VsZWN0aW9uX2NsYXNzZWRSZSIsInRlc3QiLCJkM19zZWxlY3Rpb25fY2xhc3NlZCIsIlJlZ0V4cCIsImQzX3NlbGVjdGlvbl9jbGFzc2VkTmFtZSIsImNsYXNzZWRDb25zdGFudCIsImNsYXNzZWRGdW5jdGlvbiIsInJlIiwibGFzdEluZGV4IiwiZDNfc2VsZWN0aW9uX3N0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJzdHlsZU51bGwiLCJyZW1vdmVQcm9wZXJ0eSIsInN0eWxlQ29uc3RhbnQiLCJzdHlsZUZ1bmN0aW9uIiwiZDNfc2VsZWN0aW9uX3Byb3BlcnR5IiwicHJvcGVydHlOdWxsIiwicHJvcGVydHlDb25zdGFudCIsInByb3BlcnR5RnVuY3Rpb24iLCJ0ZXh0Q29udGVudCIsImlubmVySFRNTCIsImQzX3NlbGVjdGlvbl9jcmVhdG9yIiwiYXBwZW5kQ2hpbGQiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVOUyIsImluc2VydCIsImJlZm9yZSIsImluc2VydEJlZm9yZSIsImQzX3NlbGVjdGlvblJlbW92ZSIsInBhcmVudCIsInJlbW92ZUNoaWxkIiwiZ3JvdXBEYXRhIiwibjAiLCJ1cGRhdGVOb2RlcyIsImVudGVyTm9kZXMiLCJleGl0Tm9kZXMiLCJub2RlRGF0YSIsIm5vZGVCeUtleVZhbHVlIiwia2V5VmFsdWVzIiwiaGFzIiwiZDNfc2VsZWN0aW9uX2RhdGFOb2RlIiwidXBkYXRlIiwiZDNfc2VsZWN0aW9uX2VudGVyIiwiZXhpdCIsImRhdHVtIiwiZmlsdGVyIiwiZDNfc2VsZWN0aW9uX2ZpbHRlciIsIm5leHQiLCJuZXh0U2libGluZyIsImNvbXBhcmF0b3IiLCJkM19zZWxlY3Rpb25fc29ydENvbXBhcmF0b3IiLCJjYWxsYmFjayIsImQzX3NlbGVjdGlvbl9lYWNoIiwiYXJncyIsImVtcHR5IiwiZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlIiwidXBncm91cCIsImQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZSIsImowIiwibm9kZXMiLCJjYXB0dXJlIiwiZDNfc2VsZWN0aW9uX29uIiwid3JhcCIsImQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyIiwiZDNfc2VsZWN0aW9uX29uRmlsdGVycyIsImQzX3NlbGVjdGlvbl9vbkZpbHRlciIsIm9uUmVtb3ZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIiQiLCJvbkFkZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVBbGwiLCJtYXRjaCIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJkM19ldmVudF9kcmFnU2VsZWN0IiwiZDNfZXZlbnRfZHJhZ0lkIiwiZDNfZXZlbnRfZHJhZ1N1cHByZXNzIiwiY2xpY2siLCJ3Iiwic3VwcHJlc3NDbGljayIsIm9mZiIsIm1vdXNlIiwiY29udGFpbmVyIiwiZDNfbW91c2VQb2ludCIsImQzX21vdXNlX2J1ZzQ0MDgzIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiY2hhbmdlZFRvdWNoZXMiLCJzdmciLCJvd25lclNWR0VsZW1lbnQiLCJjcmVhdGVTVkdQb2ludCIsInBvaW50Iiwid2luZG93Iiwic2Nyb2xsWCIsInNjcm9sbFkiLCJjdG0iLCJnZXRTY3JlZW5DVE0iLCJwYWdlWCIsInkiLCJwYWdlWSIsImNsaWVudFgiLCJjbGllbnRZIiwibWF0cml4VHJhbnNmb3JtIiwiaW52ZXJzZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRMZWZ0IiwidG9wIiwiY2xpZW50VG9wIiwidG91Y2giLCJ0b3VjaGVzIiwiaWRlbnRpZmllciIsImRyYWciLCJvcmlnaW4iLCJtb3VzZWRvd24iLCJkcmFnc3RhcnQiLCJ0b3VjaHN0YXJ0IiwiZDNfYmVoYXZpb3JfZHJhZ1RvdWNoSWQiLCJpZCIsInBvc2l0aW9uIiwic3ViamVjdCIsIm1vdmUiLCJlbmQiLCJ0aGF0IiwiZHJhZ2dlZCIsImRyYWdJZCIsImRyYWdOYW1lIiwiZHJhZ09mZnNldCIsImRyYWdTdWJqZWN0IiwibW92ZWQiLCJlbmRlZCIsImRyYWdSZXN0b3JlIiwicG9zaXRpb24wIiwicG9zaXRpb24xIiwiZHgiLCJkeSIsIs61IiwizrUyIiwiz4AiLCJQSSIsIs+EIiwiz4TOtSIsImhhbGbPgCIsImQzX3JhZGlhbnMiLCJkM19kZWdyZWVzIiwiZDNfc2duIiwiZDNfY3Jvc3MyZCIsImQzX2Fjb3MiLCJhY29zIiwiZDNfYXNpbiIsImFzaW4iLCJkM19zaW5oIiwiZXhwIiwiZDNfY29zaCIsImQzX3RhbmgiLCJkM19oYXZlcnNpbiIsInNpbiIsIs+BIiwiU1FSVDIiLCLPgTIiLCLPgTQiLCJpbnRlcnBvbGF0ZVpvb20iLCJ1eDAiLCJ1eTAiLCJ3MCIsInV4MSIsInV5MSIsIncxIiwiZDIiLCJTIiwibG9nIiwiZDEiLCJiMCIsImIxIiwicjAiLCJyMSIsImNvc2hyMCIsInUiLCJkdXJhdGlvbiIsInpvb20iLCJ2aWV3IiwidHJhbnNsYXRlMCIsImNlbnRlcjAiLCJjZW50ZXIiLCJzY2FsZUV4dGVudCIsImQzX2JlaGF2aW9yX3pvb21JbmZpbml0eSIsInpvb21pbmciLCJtb3VzZW1vdmUiLCJtb3VzZXVwIiwibW91c2V3aGVlbFRpbWVyIiwidG91Y2h0aW1lIiwieDAiLCJ4MSIsInkwIiwieTEiLCJkM19iZWhhdmlvcl96b29tV2hlZWwiLCJkM19iZWhhdmlvcl96b29tRGVsdGEiLCJkZWx0YVkiLCJkZWx0YU1vZGUiLCJ3aGVlbERlbHRhIiwiZGV0YWlsIiwiZyIsIm1vdXNlZG93bmVkIiwibW91c2V3aGVlbGVkIiwiZGJsY2xpY2tlZCIsInRvdWNoc3RhcnRlZCIsInZpZXcxIiwiZDNfdHJhbnNpdGlvbkluaGVyaXRJZCIsInRyYW5zaXRpb24iLCJfX2NoYXJ0X18iLCJ0d2VlbiIsImN4IiwiY3kiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsImNvcHkiLCJsb2NhdGlvbiIsInNjYWxlVG8iLCJ0cmFuc2xhdGVUbyIsInpvb21UbyIsInBvdyIsInJlc2NhbGUiLCJkb21haW4iLCJpbnZlcnQiLCJ6b29tc3RhcnRlZCIsInpvb21lZCIsInpvb21lbmRlZCIsImxvY2F0aW9uMCIsImxvY2F0aW9uczAiLCJkaXN0YW5jZTAiLCJzY2FsZTAiLCJ6b29tTmFtZSIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwidGFyZ2V0cyIsInN0YXJ0ZWQiLCJyZWxvY2F0ZSIsImNoYW5nZWQiLCJMTjIiLCJxIiwibDAiLCJsMSIsImRpc3RhbmNlMSIsInNjYWxlMSIsImNsZWFyVGltZW91dCIsImQzX3NlbGVjdGlvbl9pbnRlcnJ1cHQiLCJzZXRUaW1lb3V0Iiwic2hpZnRLZXkiLCJjZWlsIiwiY29sb3IiLCJkM19jb2xvciIsInRvU3RyaW5nIiwicmdiIiwiaHNsIiwiZDNfaHNsIiwiZDNfcmdiX3BhcnNlIiwiZDNfcmdiX2hzbCIsImQzX2hzbFByb3RvdHlwZSIsImJyaWdodGVyIiwiZGFya2VyIiwiZDNfaHNsX3JnYiIsIm0xIiwibTIiLCJ2diIsInJvdW5kIiwiZDNfcmdiIiwiaGNsIiwiZDNfaGNsIiwiZDNfbGFiIiwiZDNfbGFiX2hjbCIsImQzX3JnYl9sYWIiLCJyIiwiZDNfaGNsUHJvdG90eXBlIiwiZDNfbGFiX0siLCJkM19oY2xfbGFiIiwiY29zIiwibGFiIiwiZDNfbGFiX1giLCJkM19sYWJfWSIsImQzX2xhYl9aIiwiZDNfbGFiUHJvdG90eXBlIiwiZDNfbGFiX3JnYiIsImQzX2xhYl94eXoiLCJkM194eXpfcmdiIiwiYXRhbjIiLCJkM194eXpfbGFiIiwiZDNfcmdiTnVtYmVyIiwiZDNfcmdiU3RyaW5nIiwiZDNfcmdiUHJvdG90eXBlIiwiZDNfcmdiX2hleCIsImZvcm1hdCIsImV4ZWMiLCJ0b0xvd2VyQ2FzZSIsInBhcnNlRmxvYXQiLCJkM19yZ2JfcGFyc2VOdW1iZXIiLCJkM19yZ2JfbmFtZXMiLCJwYXJzZUludCIsImQzX3JnYl94eXoiLCJkM19mdW5jdG9yIiwiZnVuY3RvciIsInhociIsImQzX3hoclR5cGUiLCJyZXNwb25zZSIsIm1pbWVUeXBlIiwiZDNfeGhyIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwicmVzcG9uc2VUeXBlIiwiWERvbWFpblJlcXVlc3QiLCJvbmxvYWQiLCJvbmVycm9yIiwicmVzcG9uZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXN1bHQiLCJkM194aHJIYXNSZXNwb25zZSIsImxvYWQiLCJvbnByb2dyZXNzIiwicHJvZ3Jlc3MiLCJzZW5kIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwiYmVmb3Jlc2VuZCIsImFib3J0IiwiZDNfeGhyX2ZpeENhbGxiYWNrIiwicmVzcG9uc2VUZXh0IiwiZHN2IiwiZGVsaW1pdGVyIiwicmVGb3JtYXQiLCJkZWxpbWl0ZXJDb2RlIiwiY2hhckNvZGVBdCIsInJvdyIsInR5cGVkUmVzcG9uc2UiLCJwYXJzZSIsInBhcnNlUm93cyIsIkZ1bmN0aW9uIiwiSlNPTiIsInN0cmluZ2lmeSIsImpvaW4iLCJFT0wiLCJFT0YiLCJyb3dzIiwiTiIsIkkiLCJlb2wiLCJ0b2tlbiIsImZvcm1hdFJvd3MiLCJmaWVsZFNldCIsImZpZWxkcyIsImZpZWxkIiwiZm9ybWF0VmFsdWUiLCJmb3JtYXRSb3ciLCJjc3YiLCJ0c3YiLCJkM190aW1lcl9xdWV1ZUhlYWQiLCJkM190aW1lcl9xdWV1ZVRhaWwiLCJkM190aW1lcl9pbnRlcnZhbCIsImQzX3RpbWVyX3RpbWVvdXQiLCJkM190aW1lcl9mcmFtZSIsInRpbWVyIiwiZDNfdGltZXIiLCJkZWxheSIsInRoZW4iLCJ0aW1lIiwiZDNfdGltZXJfc3RlcCIsImQzX3RpbWVyX21hcmsiLCJkM190aW1lcl9zd2VlcCIsImlzRmluaXRlIiwiZmx1c2giLCJ0MCIsInQxIiwiZDNfZm9ybWF0X3ByZWNpc2lvbiIsIkxOMTAiLCJkM19mb3JtYXRQcmVmaXhlcyIsImQzX2Zvcm1hdFByZWZpeCIsImZvcm1hdFByZWZpeCIsInByZWNpc2lvbiIsImQzX2xvY2FsZV9udW1iZXJGb3JtYXQiLCJsb2NhbGUiLCJsb2NhbGVfZGVjaW1hbCIsImRlY2ltYWwiLCJsb2NhbGVfdGhvdXNhbmRzIiwidGhvdXNhbmRzIiwibG9jYWxlX2dyb3VwaW5nIiwiZ3JvdXBpbmciLCJsb2NhbGVfY3VycmVuY3kiLCJjdXJyZW5jeSIsImZvcm1hdEdyb3VwIiwid2lkdGgiLCJzdWJzdHJpbmciLCJyZXZlcnNlIiwic3BlY2lmaWVyIiwiZDNfZm9ybWF0X3JlIiwiZmlsbCIsImFsaWduIiwic2lnbiIsInN5bWJvbCIsInpmaWxsIiwiY29tbWEiLCJzdWZmaXgiLCJpbnRlZ2VyIiwiZXhwb25lbnQiLCJkM19mb3JtYXRfdHlwZXMiLCJkM19mb3JtYXRfdHlwZURlZmF1bHQiLCJ6Y29tbWEiLCJmdWxsU3VmZml4IiwibmVnYXRpdmUiLCJ1bml0IiwibGFzdEluZGV4T2YiLCJhZnRlciIsInBhZGRpbmciLCJmcm9tQ2hhckNvZGUiLCJ0b1ByZWNpc2lvbiIsInRvRXhwb25lbnRpYWwiLCJ0b0ZpeGVkIiwiZDNfdGltZSIsImQzX2RhdGUiLCJkM19kYXRlX3V0YyIsIlVUQyIsImdldFVUQ0RhdGUiLCJnZXRVVENEYXkiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDU2Vjb25kcyIsImdldFRpbWUiLCJ2YWx1ZU9mIiwic2V0VVRDRGF0ZSIsInNldFVUQ0RheSIsInNldFVUQ0Z1bGxZZWFyIiwic2V0VVRDSG91cnMiLCJzZXRVVENNaWxsaXNlY29uZHMiLCJzZXRVVENNaW51dGVzIiwic2V0VVRDTW9udGgiLCJzZXRVVENTZWNvbmRzIiwic2V0VGltZSIsImQzX3RpbWVfcHJvdG90eXBlIiwiZDNfdGltZV9pbnRlcnZhbCIsIm51bWJlciIsImRhdGUiLCJkMCIsIm9mZnNldCIsImR0IiwidGltZXMiLCJyYW5nZV91dGMiLCJ1dGMiLCJkM190aW1lX2ludGVydmFsX3V0YyIsInllYXIiLCJkYXkiLCJzZXRNb250aCIsInNldEZ1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJ5ZWFycyIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsInNldERhdGUiLCJkYXlzIiwiZGF5T2ZZZWFyIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJpbnRlcnZhbCIsImdldERheSIsIndlZWsiLCJzdW5kYXkiLCJ3ZWVrcyIsIndlZWtPZlllYXIiLCJzdW5kYXlPZlllYXIiLCJkM19sb2NhbGVfdGltZUZvcm1hdCIsImxvY2FsZV9kYXRlVGltZSIsImRhdGVUaW1lIiwibG9jYWxlX2RhdGUiLCJsb2NhbGVfdGltZSIsImxvY2FsZV9wZXJpb2RzIiwicGVyaW9kcyIsImxvY2FsZV9kYXlzIiwibG9jYWxlX3Nob3J0RGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsImQzX3RpbWVfZm9ybWF0IiwidGVtcGxhdGUiLCJzdHJpbmciLCJkM190aW1lX2Zvcm1hdFBhZHMiLCJkM190aW1lX2Zvcm1hdHMiLCJkM190aW1lX3BhcnNlIiwibG9jYWxaIiwiWiIsIlciLCJVIiwic2V0SG91cnMiLCJNIiwiTCIsImQzX3RpbWVfcGFyc2VycyIsIm11bHRpIiwiZDNfdGltZV9mb3JtYXRNdWx0aSIsImQzX3RpbWVfcGVyaW9kTG9va3VwIiwiZDNfdGltZV9kYXlSZSIsImQzX3RpbWVfZm9ybWF0UmUiLCJkM190aW1lX2RheUxvb2t1cCIsImQzX3RpbWVfZm9ybWF0TG9va3VwIiwiZDNfdGltZV9kYXlBYmJyZXZSZSIsImQzX3RpbWVfZGF5QWJicmV2TG9va3VwIiwiZDNfdGltZV9tb250aFJlIiwiZDNfdGltZV9tb250aExvb2t1cCIsImQzX3RpbWVfbW9udGhBYmJyZXZSZSIsImQzX3RpbWVfbW9udGhBYmJyZXZMb29rdXAiLCJkM190aW1lX2Zvcm1hdFBhZCIsImdldEhvdXJzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJtb25kYXlPZlllYXIiLCJkM190aW1lX3pvbmUiLCJkM190aW1lX3BhcnNlV2Vla2RheUFiYnJldiIsImQzX3RpbWVfcGFyc2VXZWVrZGF5IiwiZDNfdGltZV9wYXJzZU1vbnRoQWJicmV2IiwiZDNfdGltZV9wYXJzZU1vbnRoIiwiZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwiLCJkM190aW1lX3BhcnNlRGF5IiwiZDNfdGltZV9wYXJzZUhvdXIyNCIsImQzX3RpbWVfcGFyc2VEYXlPZlllYXIiLCJkM190aW1lX3BhcnNlTWlsbGlzZWNvbmRzIiwiZDNfdGltZV9wYXJzZU1vbnRoTnVtYmVyIiwiZDNfdGltZV9wYXJzZU1pbnV0ZXMiLCJkM190aW1lX3BhcnNlQW1QbSIsImQzX3RpbWVfcGFyc2VTZWNvbmRzIiwiZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJTdW5kYXkiLCJkM190aW1lX3BhcnNlV2Vla2RheU51bWJlciIsImQzX3RpbWVfcGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwiZDNfdGltZV9wYXJzZUxvY2FsZURhdGUiLCJkM190aW1lX3BhcnNlTG9jYWxlVGltZSIsImQzX3RpbWVfcGFyc2VZZWFyIiwiZDNfdGltZV9wYXJzZUZ1bGxZZWFyIiwiZDNfdGltZV9wYXJzZVpvbmUiLCJkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnQiLCJYIiwiZDNfdGltZV9udW1iZXJSZSIsImQzX3RpbWVfcGVyY2VudFJlIiwibmFtZXMiLCJkM190aW1lX2V4cGFuZFllYXIiLCJ6cyIsInpoIiwiem0iLCJmb3JtYXRzIiwiZDNfbG9jYWxlX2VuVVMiLCJudW1iZXJGb3JtYXQiLCJnZW8iLCJkM19hZGRlciIsImQzX2FkZGVyVGVtcCIsImQzX2FkZGVyU3VtIiwiYnYiLCJhdiIsInN0cmVhbSIsImQzX2dlb19zdHJlYW1PYmplY3RUeXBlIiwiZDNfZ2VvX3N0cmVhbUdlb21ldHJ5IiwiZ2VvbWV0cnkiLCJkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlIiwiZmVhdHVyZSIsImZlYXR1cmVzIiwic3BoZXJlIiwiY29vcmRpbmF0ZXMiLCJnZW9tZXRyaWVzIiwiZDNfZ2VvX3N0cmVhbUxpbmUiLCJjbG9zZWQiLCJjb29yZGluYXRlIiwibGluZVN0YXJ0IiwibGluZUVuZCIsImQzX2dlb19zdHJlYW1Qb2x5Z29uIiwicG9seWdvblN0YXJ0IiwicG9seWdvbkVuZCIsImFyZWEiLCJkM19nZW9fYXJlYSIsImQzX2dlb19hcmVhU3VtIiwiZDNfZ2VvX2FyZWFSaW5nU3VtIiwicmVzZXQiLCJkM19nZW9fYXJlYVJpbmdTdGFydCIsIs67MDAiLCLPhjAwIiwizrswIiwiY29zz4YwIiwic2luz4YwIiwizrsiLCLPhiIsIm5leHRQb2ludCIsImTOuyIsInNkzrsiLCJhZM67IiwiY29zz4YiLCJzaW7PhiIsImQzX2dlb19jYXJ0ZXNpYW4iLCJzcGhlcmljYWwiLCJkM19nZW9fY2FydGVzaWFuRG90IiwiZDNfZ2VvX2NhcnRlc2lhbkNyb3NzIiwiZDNfZ2VvX2NhcnRlc2lhbkFkZCIsImQzX2dlb19jYXJ0ZXNpYW5TY2FsZSIsInZlY3RvciIsImQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUiLCJkM19nZW9fc3BoZXJpY2FsIiwiY2FydGVzaWFuIiwiZDNfZ2VvX3NwaGVyaWNhbEVxdWFsIiwiYm91bmRzIiwiz4YwIiwizrsxIiwiz4YxIiwizrtfIiwizrtfXyIsIs+GX18iLCJkzrtTdW0iLCJyYW5nZXMiLCJib3VuZCIsInJpbmdQb2ludCIsInJpbmdTdGFydCIsInJpbmdFbmQiLCJsaW5lUG9pbnQiLCJub3JtYWwiLCJlcXVhdG9yaWFsIiwiaW5mbGVjdGlvbiIsIs67aSIsImFudGltZXJpZGlhbiIsIs+GaSIsImFuZ2xlIiwiY29tcGFyZVJhbmdlcyIsIndpdGhpblJhbmdlIiwiYmVzdCIsImNlbnRyb2lkIiwiZDNfZ2VvX2NlbnRyb2lkVzEiLCJkM19nZW9fY2VudHJvaWRYMCIsImQzX2dlb19jZW50cm9pZFkwIiwiZDNfZ2VvX2NlbnRyb2lkWjAiLCJkM19nZW9fY2VudHJvaWRYMSIsImQzX2dlb19jZW50cm9pZFkxIiwiZDNfZ2VvX2NlbnRyb2lkWjEiLCJkM19nZW9fY2VudHJvaWRYMiIsImQzX2dlb19jZW50cm9pZFkyIiwiZDNfZ2VvX2NlbnRyb2lkWjIiLCJkM19nZW9fY2VudHJvaWQiLCJkM19nZW9fY2VudHJvaWRXMCIsImQzX2dlb19jZW50cm9pZFBvaW50IiwiZDNfZ2VvX2NlbnRyb2lkTGluZVN0YXJ0IiwiZDNfZ2VvX2NlbnRyb2lkTGluZUVuZCIsImQzX2dlb19jZW50cm9pZFJpbmdTdGFydCIsImQzX2dlb19jZW50cm9pZFBvaW50WFlaIiwiejAiLCJjeiIsImQzX2dlb19jb21wb3NlIiwiY29tcG9zZSIsImQzX3RydWUiLCJkM19nZW9fY2xpcFBvbHlnb24iLCJzZWdtZW50cyIsImNsaXBTdGFydEluc2lkZSIsImludGVycG9sYXRlIiwiY2xpcCIsInNlZ21lbnQiLCJkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24iLCJlbnRyeSIsInBvaW50cyIsImN1cnJlbnQiLCJpc1N1YmplY3QiLCJkM19nZW9fY2xpcFBvbHlnb25MaW5rQ2lyY3VsYXIiLCJvdGhlciIsImQzX2dlb19jbGlwIiwicG9pbnRWaXNpYmxlIiwiY2xpcExpbmUiLCJjbGlwU3RhcnQiLCJyb3RhdGUiLCJsaW5lIiwicm90YXRlZENsaXBTdGFydCIsInBvaW50UmluZyIsImQzX2dlb19wb2ludEluUG9seWdvbiIsInBvbHlnb24iLCJwb2x5Z29uU3RhcnRlZCIsImQzX2dlb19jbGlwU29ydCIsInBvaW50TGluZSIsImJ1ZmZlciIsImQzX2dlb19jbGlwQnVmZmVyTGlzdGVuZXIiLCJyaW5nTGlzdGVuZXIiLCJyaW5nIiwiY2xlYW4iLCJyaW5nU2VnbWVudHMiLCJwb3AiLCJzaGlmdCIsImQzX2dlb19jbGlwU2VnbWVudExlbmd0aDEiLCJsaW5lcyIsImQzX2dlb19jbGlwQW50aW1lcmlkaWFuIiwiZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5MaW5lIiwiZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSIsInPOuzAiLCJzzrsxIiwiZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QiLCJjb3PPhjEiLCJzaW7OuzBfzrsxIiwiYXRhbiIsImZyb20iLCJ0byIsImRpcmVjdGlvbiIsIm1lcmlkaWFuIiwicGFyYWxsZWwiLCJtZXJpZGlhbk5vcm1hbCIsInBvbGFyQW5nbGUiLCJ3aW5kaW5nIiwicG9pbnQwIiwiYXJjIiwiaW50ZXJzZWN0aW9uIiwiz4ZhcmMiLCJkM19nZW9fY2xpcENpcmNsZSIsInJhZGl1cyIsImNyIiwic21hbGxSYWRpdXMiLCJub3RIZW1pc3BoZXJlIiwiZDNfZ2VvX2NpcmNsZUludGVycG9sYXRlIiwidmlzaWJsZSIsImMwIiwidjAiLCJ2MDAiLCJwb2ludDEiLCJwb2ludDIiLCJjb2RlIiwiaW50ZXJzZWN0IiwidHdvIiwicGEiLCJwYiIsIm4xIiwibjIiLCJuMm4yIiwibjFuMiIsImRldGVybWluYW50IiwiYzEiLCJjMiIsIm4xeG4yIiwiQSIsIkIiLCJ1dSIsInQyIiwizrTOuyIsInBvbGFyIiwicTEiLCJkM19nZW9tX2NsaXBMaW5lIiwiYXgiLCJheSIsImJ4IiwiYnkiLCJkM19nZW9fY2xpcEV4dGVudE1BWCIsImNsaXBFeHRlbnQiLCJvdXRwdXQiLCJ2YWxpZCIsImQzX2dlb19jbGlwRXh0ZW50IiwibGlzdGVuZXJfIiwiYnVmZmVyTGlzdGVuZXIiLCJpbnNpZGVQb2x5Z29uIiwiaW5zaWRlIiwid24iLCJhMSIsImNvcm5lciIsImNvbXBhcmVQb2ludHMiLCJ4X18iLCJ5X18iLCJ2X18iLCJ4XyIsInlfIiwidl8iLCJmaXJzdCIsInJlam9pbiIsImNhIiwiY2IiLCJkM19nZW9fY29uaWMiLCJwcm9qZWN0QXQiLCJkM19nZW9fcHJvamVjdGlvbk11dGF0b3IiLCJwYXJhbGxlbHMiLCJkM19nZW9fY29uaWNFcXVhbEFyZWEiLCJDIiwiz4EwIiwiZm9yd2FyZCIsIs+BMF95IiwiY29uaWNFcXVhbEFyZWEiLCJyYXciLCJhbGJlcnMiLCJhbGJlcnNVc2EiLCJsb3dlcjQ4IiwiYWxhc2thIiwiaGF3YWlpIiwicG9pbnRTdHJlYW0iLCJsb3dlcjQ4UG9pbnQiLCJhbGFza2FQb2ludCIsImhhd2FpaVBvaW50IiwibG93ZXI0OFN0cmVhbSIsImFsYXNrYVN0cmVhbSIsImhhd2FpaVN0cmVhbSIsImQzX2dlb19wYXRoQXJlYVN1bSIsImQzX2dlb19wYXRoQXJlYVBvbHlnb24iLCJkM19nZW9fcGF0aEFyZWEiLCJkM19nZW9fcGF0aEFyZWFSaW5nU3RhcnQiLCJ4MDAiLCJ5MDAiLCJkM19nZW9fcGF0aEJvdW5kc1gwIiwiZDNfZ2VvX3BhdGhCb3VuZHNZMCIsImQzX2dlb19wYXRoQm91bmRzWDEiLCJkM19nZW9fcGF0aEJvdW5kc1kxIiwiZDNfZ2VvX3BhdGhCb3VuZHMiLCJkM19nZW9fcGF0aEJvdW5kc1BvaW50IiwiZDNfZ2VvX3BhdGhCdWZmZXIiLCJwb2ludENpcmNsZSIsImQzX2dlb19wYXRoQnVmZmVyQ2lyY2xlIiwicG9pbnRMaW5lU3RhcnQiLCJsaW5lRW5kUG9seWdvbiIsImQzX2dlb19wYXRoQ2VudHJvaWQiLCJkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQiLCJkM19nZW9fcGF0aENlbnRyb2lkTGluZVN0YXJ0IiwiZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVFbmQiLCJkM19nZW9fcGF0aENlbnRyb2lkUmluZ1N0YXJ0IiwiZDNfZ2VvX3BhdGhDb250ZXh0IiwiY29udGV4dCIsInBvaW50UmFkaXVzIiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2VQYXRoIiwiZDNfZ2VvX3Jlc2FtcGxlIiwicHJvamVjdCIsIs60MiIsImNvc01pbkRpc3RhbmNlIiwibWF4RGVwdGgiLCJyZXNhbXBsZSIsInJlc2FtcGxlUmVjdXJzaXZlIiwicmVzYW1wbGVOb25lIiwiZDNfZ2VvX3RyYW5zZm9ybVBvaW50IiwiYTAwIiwiYjAwIiwiYzAwIiwiYTAiLCJyZXNhbXBsZUxpbmVUbyIsIs+GMiIsIs67MiIsIngyIiwieTIiLCJkeDIiLCJkeTIiLCJkeiIsInBhdGgiLCJwcm9qZWN0aW9uIiwicHJvamVjdFN0cmVhbSIsImNvbnRleHRTdHJlYW0iLCJjYWNoZVN0cmVhbSIsImQzX2dlb19wYXRoUHJvamVjdFN0cmVhbSIsImQzX2dlb19wcm9qZWN0aW9uUmFkaWFucyIsInRyYW5zZm9ybSIsIm1ldGhvZHMiLCJkM19nZW9fdHJhbnNmb3JtIiwiZDNfZ2VvX3Byb2plY3Rpb24iLCJwcm9qZWN0aW9uTXV0YXRvciIsInByb2plY3RSb3RhdGUiLCJwcm9qZWN0UmVzYW1wbGUiLCLOtHgiLCLOtHkiLCLOtM+GIiwizrTOsyIsInByZWNsaXAiLCJwb3N0Y2xpcCIsImNsaXBBbmdsZSIsImludmFsaWRhdGUiLCJkM19nZW9fcm90YXRpb24iLCJkM19nZW9fZXF1aXJlY3Rhbmd1bGFyIiwiZXF1aXJlY3Rhbmd1bGFyIiwicm90YXRpb24iLCJkM19nZW9faWRlbnRpdHlSb3RhdGlvbiIsImQzX2dlb19yb3RhdGlvbs67IiwiZDNfZ2VvX3JvdGF0aW9uz4bOsyIsImQzX2dlb19mb3J3YXJkUm90YXRpb27OuyIsImNvc860z4YiLCJzaW7OtM+GIiwiY29zzrTOsyIsInNpbs60zrMiLCJjaXJjbGUiLCJzciIsImQzX2dlb19jaXJjbGVBbmdsZSIsImRpc3RhbmNlIiwizpTOuyIsInNpbs6UzrsiLCJjb3POlM67Iiwic2luz4YxIiwiZ3JhdGljdWxlIiwiWDEiLCJYMCIsIlkxIiwiWTAiLCJEWCIsIkRZIiwiWSIsIm91dGxpbmUiLCJtaW5vckV4dGVudCIsIm1ham9yRXh0ZW50IiwibWlub3JTdGVwIiwibWFqb3JTdGVwIiwiZDNfZ2VvX2dyYXRpY3VsZVgiLCJkM19nZW9fZ3JhdGljdWxlWSIsImQzX3NvdXJjZSIsImQzX3RhcmdldCIsImdyZWF0QXJjIiwic291cmNlXyIsInRhcmdldF8iLCJkM19nZW9faW50ZXJwb2xhdGUiLCJjeTAiLCJzeTAiLCJjeTEiLCJzeTEiLCJreDAiLCJreTAiLCJreDEiLCJreTEiLCJkM19nZW9fbGVuZ3RoIiwiZDNfZ2VvX2xlbmd0aFN1bSIsImQzX2dlb19sZW5ndGhMaW5lU3RhcnQiLCJkM19nZW9fYXppbXV0aGFsIiwiYXppbXV0aGFsIiwiY29zzrsiLCJzaW5jIiwiY29zYyIsImQzX2dlb19hemltdXRoYWxFcXVhbEFyZWEiLCJjb3POu2Nvc8+GIiwiYXppbXV0aGFsRXF1YWxBcmVhIiwiZDNfZ2VvX2F6aW11dGhhbEVxdWlkaXN0YW50IiwiYXppbXV0aGFsRXF1aWRpc3RhbnQiLCJkM19nZW9fY29uaWNDb25mb3JtYWwiLCJ0YW4iLCJGIiwiZDNfZ2VvX21lcmNhdG9yIiwiY29uaWNDb25mb3JtYWwiLCJkM19nZW9fY29uaWNFcXVpZGlzdGFudCIsIkciLCJjb25pY0VxdWlkaXN0YW50IiwiZDNfZ2VvX2dub21vbmljIiwiZ25vbW9uaWMiLCJkM19nZW9fbWVyY2F0b3JQcm9qZWN0aW9uIiwiY2xpcEF1dG8iLCJtZXJjYXRvciIsImQzX2dlb19vcnRob2dyYXBoaWMiLCJvcnRob2dyYXBoaWMiLCJkM19nZW9fc3RlcmVvZ3JhcGhpYyIsInN0ZXJlb2dyYXBoaWMiLCJkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yIiwidHJhbnN2ZXJzZU1lcmNhdG9yIiwiZ2VvbSIsImQzX2dlb21fcG9pbnRYIiwiZDNfZ2VvbV9wb2ludFkiLCJodWxsIiwidmVydGljZXMiLCJmeCIsImZ5IiwiZmxpcHBlZFBvaW50cyIsImQzX2dlb21faHVsbE9yZGVyIiwidXBwZXIiLCJkM19nZW9tX2h1bGxVcHBlciIsImxvd2VyIiwic2tpcExlZnQiLCJza2lwUmlnaHQiLCJocyIsImQzX2dlb21fcG9seWdvblByb3RvdHlwZSIsImlucHV0IiwiZDNfZ2VvbV9wb2x5Z29uQ2xvc2VkIiwiZDNfZ2VvbV9wb2x5Z29uSW5zaWRlIiwiZDNfZ2VvbV9wb2x5Z29uSW50ZXJzZWN0IiwieDMiLCJ4MjEiLCJ4NDMiLCJ5MyIsInkyMSIsInk0MyIsInVhIiwiZDNfZ2VvbV92b3Jvbm9pRWRnZXMiLCJkM19nZW9tX3Zvcm9ub2lDZWxscyIsImQzX2dlb21fdm9yb25vaUJlYWNoZXMiLCJkM19nZW9tX3Zvcm9ub2lCZWFjaFBvb2wiLCJkM19nZW9tX3Zvcm9ub2lGaXJzdENpcmNsZSIsImQzX2dlb21fdm9yb25vaUNpcmNsZXMiLCJkM19nZW9tX3Zvcm9ub2lDaXJjbGVQb29sIiwiZDNfZ2VvbV92b3Jvbm9pQmVhY2giLCJlZGdlIiwic2l0ZSIsImQzX2dlb21fdm9yb25vaUNyZWF0ZUJlYWNoIiwiYmVhY2giLCJkM19nZW9tX3Zvcm9ub2lEZXRhY2hCZWFjaCIsImQzX2dlb21fdm9yb25vaVJlbW92ZUJlYWNoIiwidmVydGV4IiwicHJldmlvdXMiLCJQIiwiZGlzYXBwZWFyaW5nIiwibEFyYyIsInVuc2hpZnQiLCJyQXJjIiwibkFyY3MiLCJpQXJjIiwiZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZSIsImQzX2dlb21fdm9yb25vaUFkZEJlYWNoIiwiZGlyZWN0cml4IiwiZHhsIiwiZHhyIiwiZDNfZ2VvbV92b3Jvbm9pTGVmdEJyZWFrUG9pbnQiLCJkM19nZW9tX3Zvcm9ub2lSaWdodEJyZWFrUG9pbnQiLCJSIiwibmV3QXJjIiwibFNpdGUiLCJyU2l0ZSIsImhiIiwiaGMiLCJyZm9jeCIsInJmb2N5IiwicGJ5MiIsImxmb2N4IiwibGZvY3kiLCJwbGJ5MiIsImhsIiwiYWJ5MiIsImQzX2dlb21fdm9yb25vaUNlbGwiLCJlZGdlcyIsInByZXBhcmUiLCJoYWxmRWRnZXMiLCJpSGFsZkVkZ2UiLCJzcGxpY2UiLCJkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZU9yZGVyIiwiZDNfZ2VvbV92b3Jvbm9pQ2xvc2VDZWxscyIsImNlbGxzIiwiaUNlbGwiLCJjZWxsIiwibkhhbGZFZGdlcyIsImQzX2dlb21fdm9yb25vaUhhbGZFZGdlIiwiZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQm9yZGVyRWRnZSIsImQzX2dlb21fdm9yb25vaUNpcmNsZSIsImQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZSIsImNTaXRlIiwiaGEiLCJkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUiLCJkM19nZW9tX3Zvcm9ub2lDbGlwRWRnZXMiLCJkM19nZW9tX3Zvcm9ub2lDb25uZWN0RWRnZSIsInZiIiwidmEiLCJseCIsImx5IiwicngiLCJyeSIsImZtIiwiZmIiLCJkM19nZW9tX3Zvcm9ub2lFZGdlIiwiZDNfZ2VvbV92b3Jvbm9pU2V0RWRnZUVuZCIsImQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSIsImQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZSIsImdyYW5kcGEiLCJ1bmNsZSIsImQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QiLCJzaWJsaW5nIiwicmVkIiwiZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0IiwidHJlZSIsImQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQiLCJkM19nZW9tX3Zvcm9ub2kiLCJzaXRlcyIsImJib3giLCJkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlciIsImRpYWdyYW0iLCJ2b3Jvbm9pIiwiZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudCIsInBvbHlnb25zIiwibGlua3MiLCJ0cmlhbmdsZXMiLCJzMCIsInMxIiwiZDNfZ2VvbV92b3Jvbm9pVHJpYW5nbGVBcmVhIiwiZGVsYXVuYXkiLCJxdWFkdHJlZSIsImNvbXBhdCIsImQzX2dlb21fcXVhZHRyZWVDb21wYXRYIiwiZDNfZ2VvbV9xdWFkdHJlZUNvbXBhdFkiLCJ4cyIsInlzIiwieDFfIiwieTFfIiwieDJfIiwieTJfIiwibGVhZiIsIm54IiwibnkiLCJuUG9pbnQiLCJpbnNlcnRDaGlsZCIsInhtIiwieW0iLCJiZWxvdyIsImQzX2dlb21fcXVhZHRyZWVOb2RlIiwicm9vdCIsInZpc2l0IiwiZmluZCIsImQzX2dlb21fcXVhZHRyZWVGaW5kIiwiZDNfZ2VvbV9xdWFkdHJlZVZpc2l0Iiwic3giLCJzeSIsImNoaWxkcmVuIiwibWluRGlzdGFuY2UyIiwiY2xvc2VzdFBvaW50IiwiZGlzdGFuY2UyIiwiaW50ZXJwb2xhdGVSZ2IiLCJkM19pbnRlcnBvbGF0ZVJnYiIsImFyIiwiYWciLCJhYiIsImJyIiwiYmciLCJiYiIsImludGVycG9sYXRlT2JqZWN0IiwiZDNfaW50ZXJwb2xhdGVPYmplY3QiLCJkM19pbnRlcnBvbGF0ZSIsImludGVycG9sYXRlTnVtYmVyIiwiZDNfaW50ZXJwb2xhdGVOdW1iZXIiLCJpbnRlcnBvbGF0ZVN0cmluZyIsImQzX2ludGVycG9sYXRlU3RyaW5nIiwiYmkiLCJkM19pbnRlcnBvbGF0ZV9udW1iZXJBIiwiZDNfaW50ZXJwb2xhdGVfbnVtYmVyQiIsImFtIiwiYm0iLCJicyIsImluZGV4IiwiaW50ZXJwb2xhdG9ycyIsImQzX2ludGVycG9sYXRlQXJyYXkiLCJpbnRlcnBvbGF0ZUFycmF5IiwibmEiLCJuYiIsImQzX2Vhc2VfZGVmYXVsdCIsImQzX2Vhc2UiLCJkM19lYXNlX3BvbHkiLCJkM19lYXNlX3F1YWQiLCJkM19lYXNlX2N1YmljIiwiZDNfZWFzZV9zaW4iLCJkM19lYXNlX2V4cCIsImQzX2Vhc2VfY2lyY2xlIiwiZDNfZWFzZV9lbGFzdGljIiwiZDNfZWFzZV9iYWNrIiwiZDNfZWFzZV9ib3VuY2UiLCJkM19lYXNlX21vZGUiLCJkM19lYXNlX3JldmVyc2UiLCJkM19lYXNlX3JlZmxlY3QiLCJlYXNlIiwiZDNfZWFzZV9jbGFtcCIsImQzX2Vhc2VfY3ViaWNJbk91dCIsInQzIiwiaW50ZXJwb2xhdGVIY2wiLCJkM19pbnRlcnBvbGF0ZUhjbCIsImFoIiwiYWMiLCJhbCIsImJoIiwiYmMiLCJibCIsImludGVycG9sYXRlSHNsIiwiZDNfaW50ZXJwb2xhdGVIc2wiLCJhcyIsImludGVycG9sYXRlTGFiIiwiZDNfaW50ZXJwb2xhdGVMYWIiLCJhYSIsImJhIiwiaW50ZXJwb2xhdGVSb3VuZCIsImQzX2ludGVycG9sYXRlUm91bmQiLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJkM190cmFuc2Zvcm0iLCJkM190cmFuc2Zvcm1JZGVudGl0eSIsImt4IiwiZDNfdHJhbnNmb3JtTm9ybWFsaXplIiwia3oiLCJkM190cmFuc2Zvcm1Eb3QiLCJreSIsImQzX3RyYW5zZm9ybUNvbWJpbmUiLCJza2V3IiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybSIsImQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wIiwiZDNfaW50ZXJwb2xhdGVUcmFuc2xhdGUiLCJ0YSIsInRiIiwiZDNfaW50ZXJwb2xhdGVSb3RhdGUiLCJyYSIsInJiIiwiZDNfaW50ZXJwb2xhdGVTa2V3Iiwid2EiLCJ3YiIsImQzX2ludGVycG9sYXRlU2NhbGUiLCJrYSIsImtiIiwiZDNfdW5pbnRlcnBvbGF0ZU51bWJlciIsImQzX3VuaW50ZXJwb2xhdGVDbGFtcCIsImxheW91dCIsImJ1bmRsZSIsInBhdGhzIiwiZDNfbGF5b3V0X2J1bmRsZVBhdGgiLCJsaW5rIiwibGNhIiwiZDNfbGF5b3V0X2J1bmRsZUxlYXN0Q29tbW9uQW5jZXN0b3IiLCJkM19sYXlvdXRfYnVuZGxlQW5jZXN0b3JzIiwiYW5jZXN0b3JzIiwiYU5vZGVzIiwiYk5vZGVzIiwiYU5vZGUiLCJiTm9kZSIsInNoYXJlZE5vZGUiLCJjaG9yZCIsImNob3JkcyIsInNvcnRHcm91cHMiLCJzb3J0U3ViZ3JvdXBzIiwic29ydENob3JkcyIsInJlbGF5b3V0IiwiZ3JvdXBTdW1zIiwiZ3JvdXBJbmRleCIsInN1Ymdyb3VwSW5kZXgiLCJkaSIsImRqIiwicmVzb3J0IiwiZm9yY2UiLCJhbHBoYSIsImZyaWN0aW9uIiwibGlua0Rpc3RhbmNlIiwiZDNfbGF5b3V0X2ZvcmNlTGlua0Rpc3RhbmNlIiwibGlua1N0cmVuZ3RoIiwiZDNfbGF5b3V0X2ZvcmNlTGlua1N0cmVuZ3RoIiwiY2hhcmdlIiwiY2hhcmdlRGlzdGFuY2UyIiwiZDNfbGF5b3V0X2ZvcmNlQ2hhcmdlRGlzdGFuY2UyIiwiZ3Jhdml0eSIsInRoZXRhMiIsImRpc3RhbmNlcyIsInN0cmVuZ3RocyIsImNoYXJnZXMiLCJyZXB1bHNlIiwicXVhZCIsImR3IiwiZG4iLCJweCIsInB5IiwicG9pbnRDaGFyZ2UiLCJ0aWNrIiwid2VpZ2h0IiwiZml4ZWQiLCJjaGFyZ2VEaXN0YW5jZSIsInRoZXRhIiwibmVpZ2hib3JzIiwiZGltZW5zaW9uIiwiY2FuZGlkYXRlcyIsInJlc3VtZSIsImQzX2xheW91dF9mb3JjZURyYWdzdGFydCIsImRyYWdtb3ZlIiwiZDNfbGF5b3V0X2ZvcmNlRHJhZ2VuZCIsImQzX2xheW91dF9mb3JjZU1vdXNlb3ZlciIsImQzX2xheW91dF9mb3JjZU1vdXNlb3V0IiwiZDNfbGF5b3V0X2ZvcmNlQWNjdW11bGF0ZSIsImhpZXJhcmNoeSIsImQzX2xheW91dF9oaWVyYXJjaHlTb3J0IiwiZDNfbGF5b3V0X2hpZXJhcmNoeUNoaWxkcmVuIiwiZDNfbGF5b3V0X2hpZXJhcmNoeVZhbHVlIiwic3RhY2siLCJjaGlsZHMiLCJjaGlsZCIsInJldmFsdWUiLCJkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kIiwiZDNfbGF5b3V0X2hpZXJhcmNoeUxpbmtzIiwiZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QmVmb3JlIiwiZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIiLCJub2RlczIiLCJwYXJ0aXRpb24iLCJwaWUiLCJOdW1iZXIiLCJkM19sYXlvdXRfcGllU29ydEJ5VmFsdWUiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJwYWRBbmdsZSIsImRhIiwiYXJjcyIsImQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdCIsImQzX2xheW91dF9zdGFja09mZnNldFplcm8iLCJvdXQiLCJkM19sYXlvdXRfc3RhY2tPdXQiLCJkM19sYXlvdXRfc3RhY2tYIiwiZDNfbGF5b3V0X3N0YWNrWSIsInNlcmllcyIsIm9yZGVycyIsIm9mZnNldHMiLCJkM19sYXlvdXRfc3RhY2tPcmRlcnMiLCJkM19sYXlvdXRfc3RhY2tPZmZzZXRzIiwiZDNfbGF5b3V0X3N0YWNrTWF4SW5kZXgiLCJzdW1zIiwiZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtIiwiYm90dG9tIiwidG9wcyIsImJvdHRvbXMiLCJzMiIsInMzIiwibzAiLCJyZWR1Y2UiLCJkM19sYXlvdXRfc3RhY2tTdW0iLCJoaXN0b2dyYW0iLCJmcmVxdWVuY3kiLCJ2YWx1ZXIiLCJyYW5nZXIiLCJkM19sYXlvdXRfaGlzdG9ncmFtUmFuZ2UiLCJiaW5uZXIiLCJkM19sYXlvdXRfaGlzdG9ncmFtQmluU3R1cmdlcyIsImJpbnMiLCJ0aHJlc2hvbGRzIiwiYmluIiwiZDNfbGF5b3V0X2hpc3RvZ3JhbUJpbkZpeGVkIiwicGFjayIsImQzX2xheW91dF9wYWNrU29ydCIsImQzX2xheW91dF9wYWNrU2libGluZ3MiLCJkciIsImQzX2xheW91dF9wYWNrSW5zZXJ0IiwiX3BhY2tfbmV4dCIsIl9wYWNrX3ByZXYiLCJkM19sYXlvdXRfcGFja1NwbGljZSIsImQzX2xheW91dF9wYWNrSW50ZXJzZWN0cyIsInhNaW4iLCJ4TWF4IiwieU1pbiIsInlNYXgiLCJkM19sYXlvdXRfcGFja0xpbmsiLCJpc2VjdCIsImQzX2xheW91dF9wYWNrVW5saW5rIiwiZDNfbGF5b3V0X3BhY2tUcmFuc2Zvcm0iLCJkM19sYXlvdXRfcGFja1BsYWNlIiwiZGIiLCJkYyIsInNlcGFyYXRpb24iLCJkM19sYXlvdXRfdHJlZVNlcGFyYXRpb24iLCJub2RlU2l6ZSIsInJvb3QwIiwicm9vdDEiLCJ3cmFwVHJlZSIsImZpcnN0V2FsayIsInNlY29uZFdhbGsiLCJzaXplTm9kZSIsInR4IiwicXVldWUiLCJub2RlMSIsInNpYmxpbmdzIiwibWlkcG9pbnQiLCJhcHBvcnRpb24iLCJhbmNlc3RvciIsInZpcCIsInZvcCIsInZpbSIsInZvbSIsInNpcCIsInNvcCIsInNpbSIsInNvbSIsImQzX2xheW91dF90cmVlUmlnaHQiLCJkM19sYXlvdXRfdHJlZUxlZnQiLCJkM19sYXlvdXRfdHJlZUFuY2VzdG9yIiwiZDNfbGF5b3V0X3RyZWVNb3ZlIiwid20iLCJ3cCIsImNoYW5nZSIsImQzX2xheW91dF90cmVlU2hpZnQiLCJjbHVzdGVyIiwicHJldmlvdXNOb2RlIiwiZDNfbGF5b3V0X2NsdXN0ZXJYIiwiZDNfbGF5b3V0X2NsdXN0ZXJZIiwiZDNfbGF5b3V0X2NsdXN0ZXJMZWZ0IiwiZDNfbGF5b3V0X2NsdXN0ZXJSaWdodCIsInRyZWVtYXAiLCJwYWQiLCJkM19sYXlvdXRfdHJlZW1hcFBhZE51bGwiLCJzdGlja3kiLCJzdGlja2llcyIsIm1vZGUiLCJyYXRpbyIsInNxdWFyaWZ5IiwicmVtYWluaW5nIiwic2NvcmUiLCJ3b3JzdCIsInN0aWNraWZ5Iiwicm1heCIsInJtaW4iLCJwYWRGdW5jdGlvbiIsImQzX2xheW91dF90cmVlbWFwUGFkIiwicGFkQ29uc3RhbnQiLCLCtSIsIs+DIiwiaXJ3aW5IYWxsIiwiZDNfc2NhbGVFeHRlbnQiLCJkM19zY2FsZVJhbmdlIiwicmFuZ2VFeHRlbnQiLCJkM19zY2FsZV9iaWxpbmVhciIsInVuaW50ZXJwb2xhdGUiLCJkM19zY2FsZV9uaWNlIiwibmljZSIsImQzX3NjYWxlX25pY2VTdGVwIiwiZDNfc2NhbGVfbmljZUlkZW50aXR5IiwiZDNfc2NhbGVfcG9seWxpbmVhciIsImxpbmVhciIsImQzX3NjYWxlX2xpbmVhciIsImNsYW1wIiwicmFuZ2VSb3VuZCIsInRpY2tzIiwiZDNfc2NhbGVfbGluZWFyVGlja3MiLCJ0aWNrRm9ybWF0IiwiZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdCIsImQzX3NjYWxlX2xpbmVhclJlYmluZCIsImQzX3NjYWxlX2xpbmVhck5pY2UiLCJkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UiLCJzcGFuIiwiZXJyIiwiZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uIiwiZDNfc2NhbGVfbGluZWFyRm9ybWF0UHJlY2lzaW9uIiwiZDNfc2NhbGVfbGluZWFyRm9ybWF0U2lnbmlmaWNhbnQiLCJkM19zY2FsZV9sb2ciLCJiYXNlIiwicG9zaXRpdmUiLCJuaWNlZCIsImQzX3NjYWxlX2xvZ05pY2VOZWdhdGl2ZSIsImQzX3NjYWxlX2xvZ0Zvcm1hdCIsImQzX3NjYWxlX3BvdyIsInBvd3AiLCJkM19zY2FsZV9wb3dQb3ciLCJwb3diIiwib3JkaW5hbCIsImQzX3NjYWxlX29yZGluYWwiLCJyYW5nZUJhbmQiLCJzdGVwcyIsInhpIiwicmFuZ2VQb2ludHMiLCJyYW5nZVJvdW5kUG9pbnRzIiwicmFuZ2VCYW5kcyIsIm91dGVyUGFkZGluZyIsInJhbmdlUm91bmRCYW5kcyIsImNhdGVnb3J5MTAiLCJkM19jYXRlZ29yeTEwIiwiY2F0ZWdvcnkyMCIsImQzX2NhdGVnb3J5MjAiLCJjYXRlZ29yeTIwYiIsImQzX2NhdGVnb3J5MjBiIiwiY2F0ZWdvcnkyMGMiLCJkM19jYXRlZ29yeTIwYyIsImQzX3NjYWxlX3F1YW50aWxlIiwicXVhbnRpbGVzIiwiaW52ZXJ0RXh0ZW50IiwicXVhbnRpemUiLCJkM19zY2FsZV9xdWFudGl6ZSIsInRocmVzaG9sZCIsImQzX3NjYWxlX3RocmVzaG9sZCIsImlkZW50aXR5IiwiZDNfc2NhbGVfaWRlbnRpdHkiLCJkM196ZXJvIiwiaW5uZXJSYWRpdXMiLCJkM19zdmdfYXJjSW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsImQzX3N2Z19hcmNPdXRlclJhZGl1cyIsImNvcm5lclJhZGl1cyIsInBhZFJhZGl1cyIsImQzX3N2Z19hcmNBdXRvIiwiZDNfc3ZnX2FyY1N0YXJ0QW5nbGUiLCJkM19zdmdfYXJjRW5kQW5nbGUiLCJkM19zdmdfYXJjUGFkQW5nbGUiLCJjdyIsInJjIiwiY2lyY2xlU2VnbWVudCIsInJwIiwiYXAiLCJkM19zdmdfYXJjU3dlZXAiLCJoMSIsImgwIiwicmMxIiwicmMwIiwib2MiLCJrYyIsImxjIiwidDMwIiwiZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzIiwidDEyIiwidDAzIiwidDIxIiwieDAxIiwieTAxIiwib3giLCJveSIsIkQiLCJjeDAiLCJjeDEiLCJkeDAiLCJkeTAiLCJkeDEiLCJkeTEiLCJkM19zdmdfbGluZSIsImRlZmluZWQiLCJkM19zdmdfbGluZUxpbmVhciIsImludGVycG9sYXRlS2V5IiwidGVuc2lvbiIsImQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycyIsImQzX3N2Z19saW5lTGluZWFyQ2xvc2VkIiwiZDNfc3ZnX2xpbmVTdGVwIiwiZDNfc3ZnX2xpbmVTdGVwQmVmb3JlIiwiZDNfc3ZnX2xpbmVTdGVwQWZ0ZXIiLCJkM19zdmdfbGluZUJhc2lzIiwiZDNfc3ZnX2xpbmVCYXNpc09wZW4iLCJkM19zdmdfbGluZUJhc2lzQ2xvc2VkIiwiZDNfc3ZnX2xpbmVCdW5kbGUiLCJkM19zdmdfbGluZUNhcmRpbmFsIiwiZDNfc3ZnX2xpbmVDYXJkaW5hbE9wZW4iLCJkM19zdmdfbGluZUNhcmRpbmFsQ2xvc2VkIiwiZDNfc3ZnX2xpbmVNb25vdG9uZSIsImQzX3N2Z19saW5lSGVybWl0ZSIsImQzX3N2Z19saW5lQ2FyZGluYWxUYW5nZW50cyIsInRhbmdlbnRzIiwicGkiLCJscCIsInAyIiwiZDNfc3ZnX2xpbmVEb3Q0IiwiZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMiLCJkM19zdmdfbGluZUJhc2lzQmV6aWVyMSIsImQzX3N2Z19saW5lQmFzaXNCZXppZXIyIiwiZDNfc3ZnX2xpbmVCYXNpc0JlemllciIsImQzX3N2Z19saW5lU2xvcGUiLCJkM19zdmdfbGluZUZpbml0ZURpZmZlcmVuY2VzIiwiZDNfc3ZnX2xpbmVNb25vdG9uZVRhbmdlbnRzIiwicmFkaWFsIiwiZDNfc3ZnX2xpbmVSYWRpYWwiLCJkM19zdmdfYXJlYSIsImludGVycG9sYXRlUmV2ZXJzZSIsInBvaW50czAiLCJwb2ludHMxIiwiZngwIiwiZnkwIiwiZngxIiwiZnkxIiwiZDNfc3ZnX2Nob3JkUmFkaXVzIiwiZXF1YWxzIiwiY3VydmUiLCJkaWFnb25hbCIsImQzX3N2Z19kaWFnb25hbFByb2plY3Rpb24iLCJwMyIsInByb2plY3Rpb25fIiwiZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbiIsImQzX3N2Z19zeW1ib2xUeXBlIiwiZDNfc3ZnX3N5bWJvbFNpemUiLCJkM19zdmdfc3ltYm9scyIsImQzX3N2Z19zeW1ib2xDaXJjbGUiLCJkM19zdmdfc3ltYm9sVGFuMzAiLCJkM19zdmdfc3ltYm9sU3FydDMiLCJzeW1ib2xUeXBlcyIsImQzX3RyYW5zaXRpb25JZCIsImQzX3RyYW5zaXRpb25OYW1lc3BhY2UiLCJkM190cmFuc2l0aW9uSW5oZXJpdCIsImQzX3RyYW5zaXRpb25Ob2RlIiwiZDNfdHJhbnNpdGlvbiIsImludGVycnVwdCIsImQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyIsImxvY2siLCJhY3RpdmVJZCIsImFjdGl2ZSIsImNvdW50IiwiZDNfdHJhbnNpdGlvblByb3RvdHlwZSIsInN1Ym5vZGVzIiwiZDNfdHJhbnNpdGlvbl90d2VlbiIsIm5hbWVOUyIsImF0dHJUd2VlbiIsImF0dHJUd2Vlbk5TIiwic3R5bGVTdHJpbmciLCJzdHlsZVR3ZWVuIiwiZDNfdHJhbnNpdGlvbl90ZXh0IiwiaW5oZXJpdCIsImluaGVyaXRJZCIsImlkMCIsImlkMSIsInR3ZWVucyIsInNjaGVkdWxlIiwiZWxhcHNlZCIsImNhbmNlbElkIiwiY2FuY2VsIiwiYXhpcyIsIm9yaWVudCIsImQzX3N2Z19heGlzRGVmYXVsdE9yaWVudCIsImlubmVyVGlja1NpemUiLCJvdXRlclRpY2tTaXplIiwidGlja1BhZGRpbmciLCJ0aWNrQXJndW1lbnRzXyIsInRpY2tWYWx1ZXMiLCJ0aWNrRm9ybWF0XyIsInRpY2tFbnRlciIsInRpY2tFeGl0IiwidGlja1VwZGF0ZSIsInRpY2tTcGFjaW5nIiwidGlja1RyYW5zZm9ybSIsInBhdGhVcGRhdGUiLCJsaW5lRW50ZXIiLCJsaW5lVXBkYXRlIiwidGV4dEVudGVyIiwidGV4dFVwZGF0ZSIsImQzX3N2Z19heGlzWCIsImQzX3N2Z19heGlzWSIsImQzX3N2Z19heGlzT3JpZW50cyIsInRpY2tTaXplIiwidGlja1N1YmRpdmlkZSIsImJydXNoIiwieEV4dGVudCIsInlFeHRlbnQiLCJ4RXh0ZW50RG9tYWluIiwieUV4dGVudERvbWFpbiIsInhDbGFtcCIsInlDbGFtcCIsInJlc2l6ZXMiLCJkM19zdmdfYnJ1c2hSZXNpemVzIiwiYnJ1c2hzdGFydCIsImJhY2tncm91bmQiLCJyZXNpemUiLCJkM19zdmdfYnJ1c2hDdXJzb3IiLCJnVXBkYXRlIiwiYmFja2dyb3VuZFVwZGF0ZSIsImV2ZW50XyIsImV4dGVudDEiLCJleHRlbnQwIiwieWkiLCJyZWRyYXciLCJyZWRyYXdYIiwicmVkcmF3WSIsImV2ZW50VGFyZ2V0IiwicmVzaXppbmciLCJyZXNpemluZ1giLCJyZXNpemluZ1kiLCJkcmFnZ2luZyIsImtleWRvd24iLCJrZXl1cCIsImJydXNobW92ZSIsImJydXNoZW5kIiwiZXgiLCJleSIsImFsdEtleSIsImtleUNvZGUiLCJtb3ZlMSIsImNsZWFyIiwidGltZUZvcm1hdCIsImQzX3RpbWVfZm9ybWF0VXRjIiwiZDNfdGltZV9mb3JtYXRJc28iLCJpc28iLCJ0b0lTT1N0cmluZyIsImQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlIiwic2Vjb25kIiwic2Vjb25kcyIsIm1pbnV0ZSIsIm1pbnV0ZXMiLCJob3VyIiwidGltZXpvbmUiLCJob3VycyIsIm1vbnRoIiwiZDNfdGltZV9zY2FsZSIsImQzX3RpbWVfc2NhbGVEYXRlIiwidGlja01ldGhvZCIsImQzX3RpbWVfc2NhbGVTdGVwcyIsImQzX3RpbWVfc2NhbGVNaWxsaXNlY29uZHMiLCJza2lwIiwic2tpcHBlZCIsImQzX3RpbWVfc2NhbGVMb2NhbE1ldGhvZHMiLCJkM190aW1lX3NjYWxlTG9jYWxGb3JtYXQiLCJkM190aW1lX3NjYWxlVXRjTWV0aG9kcyIsImQzX3RpbWVfc2NhbGVVdGNGb3JtYXQiLCJqc29uIiwiZDNfanNvbiIsImQzX2h0bWwiLCJjcmVhdGVSYW5nZSIsInNlbGVjdE5vZGUiLCJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiLCJ4bWwiLCJyZXNwb25zZVhNTCIsImRlZmluZSIsImFtZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJhbGxidWNrZXRzIiwiaG91cmJ1Y2tldHMiLCJidWNrZXRzIiwiU1RPUFdPUkRTIiwicmF3VG9VcmwiLCJhc3NpZ24iLCJ1cmxUb0RyYXciLCJ1cmxzIiwib2JqIiwiZHJhd1RvS2V5d29yZCIsImRvbWFpbl9leHBhbmRlZCIsIkRvbWFpbkV4cGFuZGVkIiwidXJsRGF0YSIsInRvX2RyYXciLCJrd190b19kcmF3IiwidmVydGljYWxfb3B0aW9uIiwiVmVydGljYWxPcHRpb24iLCJfb3B0aW9ucyIsIl93cmFwcGVyX2NsYXNzIiwib3B0cyIsIndyYXBwZXJfY2xhc3MiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJ2ZXJzaW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUFBTUEsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFTQyxNQUFULEVBQWdCQyxRQUFoQixFQUF5QkMsSUFBekIsRUFBOEJDLElBQTlCLEVBQW1DQyxNQUFuQyxFQUEyQztNQUNsRUYsT0FBT0EsUUFBUSxLQUFuQjtNQUNJRyxhQUFhTCxPQUFPTSxTQUFQLENBQWlCTCxRQUFqQixFQUEyQkUsSUFBM0IsQ0FDZixVQUFTSSxDQUFULEVBQVc7V0FBUUosT0FBTyxDQUFDQSxJ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
