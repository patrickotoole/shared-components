lua_package_path    "/etc/nginx/?.lua";
lua_shared_dict     log_dict    1M;

server {
  
  listen 80;
  listen 443 ssl; 
  ssl_certificate /etc/nginx/ssl/nginx.crt;
  ssl_certificate_key /etc/nginx/ssl/nginx.key;
 
  root /srv/metrics/current/;

  log_format main '$request $time_local $arg_auction_id';
  log_format referrer '$request $time_local "$http_referer" $http_user_agent $remote_addr';
  log_format uid_referrer '$request_method /pixel?adnxs_uid=$cookie_uuid&$query_string $time_local "$http_referer" $http_user_agent $remote_addr';

  log_format track_formatted '$arg_auction_id $arg_price $arg_ecp $arg_creative $arg_height $arg_width $arg_uid $arg_seller $arg_tag $arg_venue $arg_campaign_id $arg_auction_id "$arg_ip_address" "$ref"';
  log_format track_formatted_v2 '$arg_auction_id $arg_price $arg_ecp $arg_creative $arg_height $arg_width $arg_uid $arg_seller $arg_tag $arg_venue $arg_campaign_id $arg_auction_id "$arg_ip_address" "$ref" $arg_source $arg_vendor';


  log_format viewability_tracking '$request $time_local $arg_auction_id'; 
  log_format view_formatted '$arg_auction_id $arg_uid $arg_seller $arg_tag $arg_pub $arg_venue $arg_ecp $arg_price $arg_creative $arg_visible $arg_elapsed $arg_action "$ref" "$parent"';

  log_format getviewability '$request $time_local $arg_auction_id $is_user $is_arb';
  log_format ab '$arg_auction_id $new_auction_id $buyer_id $arg_price $bid $clear $creative_id "$ref" "$ab" $is_arb';
  log_format arb_result '$arg_auction_id $ref $arg_uid $arg_creative $arg_price $new_auction_id $buyer_id $creative_id $brand_id $bid $alpha $time_local $is_arb';

  log_format pixel '$cookie_uuid $arg_adnxs_uid $arg_source $arg_type $arg_an_seg';
  log_format click '$arg_auction_id $arg_price $arg_ecp $arg_creative $arg_height $arg_width $arg_uid $arg_seller $arg_tag $arg_venue $arg_campaign_id $arg_auction_id "$arg_ip_address" "$ref" "$http_referer"';

  location ~ /assets/ {
    access_log  /var/log/nginx/asset.log main;
  }

  location ~ /track/v2 {
    default_type image/gif;
    content_by_lua '
      ngx.var.ref = ngx.unescape_uri(ngx.var.arg_referrer)
      ngx.say(ngx.location.capture("/empty.gif").body) 
    ';
    access_log  /var/log/nginx/served.log main;
    access_log  /var/log/nginx/track_v2.log track_formatted_v2;
  }

  location ~ /track {
    default_type image/gif;
    content_by_lua '
      ngx.var.ref = ngx.unescape_uri(ngx.var.arg_referrer)
      ngx.say(ngx.location.capture("/empty.gif").body) 
    ';
    access_log  /var/log/nginx/raw.log main;
    access_log  /var/log/nginx/formatted.log track_formatted;
  }

  


  location ~ /getviewability {
    set $new_auction_id '-';
    set $bid '-';
    set $clear '-';

    set $buyer_id '-';
    set $creative_id '-';
    set $brand_id '-';
    set $alpha '-';
    set $ref '-';
    set $ab '-';
    set $is_arb 'false';
    set $is_user 'false';

    resolver 8.8.8.8;

    content_by_lua '
      ngx.var.ref = ngx.unescape_uri(ngx.var.arg_referrer)
      local args = ngx.req.get_uri_args()

      local http = require "resty.http"
      local redis = require "resty.redis"
      local cjson = require "cjson"
      --local red = redis:new()
      --local red2 = redis:new()

      --local ok, err = red2:connect("162.243.123.240", 6379)
      --red2:set_timeout(100)

      --if (false and string.len(args["uid"]) > 0 and tonumber(args["uid"]) > 0 and string.find(ngx.var.uri,"js") ) then
      if false then

        local user, err = red2:get(args["uid"])
        if (user ~= ngx.null) then 
          ngx.var.is_user = "true"
          
          local hc = http:new()
          
          local foobar = {
            an_placement_id = 2261194,
            an_user_id = "user_id",
            page_url = ngx.var.ref,
            ad_format = "iframe",
            width = tonumber(args["width"]),
            ext_auction_id = "db" .. args["auction_id"],
            ip_address = args["ip_address"],
            height = tonumber(args["height"])
          }
          local json_text = cjson.encode(foobar)
          json_text = string.gsub(json_text,"\\\"user_id\\\"",args["uid"])
          json_text = string.gsub(json_text,"\\\\/","/")
          local ok, code, headers, status, body  = hc:request {
            url = "http://ib.adnxs.com/asi?member_id=2024",
            method = "POST",
            body = json_text
          }
          
          local auction = cjson.decode(body)
          local old_price = tonumber(args["price"])
          if auction["bid"] then
            ngx.var.alpha = auction["bid"] - old_price
            if (auction["bid"] - old_price > 0 ) then
              ngx.var.is_arb = "true"
            end
            
            ngx.var.new_auction_id = string.match(body,"appnexus_auction_id\\\":%s?(%d+),") 
            ngx.var.buyer_id = auction["buyer_member_id"]
            ngx.var.creative_id = auction["creative_id"]
            ngx.var.brand_id = auction["brand_id"]
            ngx.var.bid = auction["bid"]

            local tag = auction["ad_tag"]
            
            tag = string.gsub(tag,"%%%%pricepaid%%%%",auction["bid"]*0.8)
            ngx.var.ab = string.match(tag,"SRC=\'(.*)\' FR")
            ngx.var.buyer_id = auction["buyer_member_id"]
            ngx.var.creative_id = auction["creative_id"]
            ngx.var.clear = auction["bid"]*0.8

            if ( auction["bid"]*0.7 > old_price) then
              
              ngx.var.is_arb = "true"

              local creative = args["creative"]
              local id_str = "\\\"cr_" .. creative .. "_" ..  args["auction_id"] .. "_" .. args["cb"] .. "\\\""
              ngx.say("var ecalper = document.getElementById(" .. id_str .. ")")
              ngx.say("var tnemecalper = document.createElement(\\\"div\\\")")
              ngx.say("tnemecalper.innerHTML = \\\"" .. tag .. "\\\"")
              ngx.say("ecalper.parentNode.replaceChild(tnemecalper,ecalper)")
            else
              ngx.redirect("/assets" .. ngx.var.request_uri)
            end
          else
            ngx.redirect("/assets" .. ngx.var.request_uri)
          end
        else
          ngx.redirect("/assets" .. ngx.var.request_uri)
        end
      else
        local file = io.open("/srv/metrics/current/assets" .. ngx.var.uri, "r")
        local t = file:read("*all")
        ngx.say(t)

      end
    ';

    access_log  /var/log/nginx/getviewability.log getviewability;
    access_log  /var/log/nginx/ab.log ab;  
    access_log  /var/log/nginx/arb.log arb_result;
    
  }

  location ~ /viewability { 
    default_type image/gif; 
    set $ref '-';
    set $parent '-';
    
    access_log  /var/log/nginx/view_raw.log viewability_tracking; 
    content_by_lua '
      ngx.var.ref = ngx.unescape_uri(ngx.var.arg_referrer)
      ngx.var.parent = ngx.unescape_uri(ngx.var.arg_parent)
      ngx.say(".")
    ';

    access_log /var/log/nginx/view.log view_formatted;
  }

  location = /empty.gif {
    empty_gif;
  }

  location ~ /uuid_debug {
    content_by_lua '
      ngx.header.content_type = "text/javascript"

      local before = "window.RB = window.RB || {}; window.RB.debug = {\\"uuid\\": "
      local after = "}"
      local args = ngx.req.get_uri_args()
      if args["jsonp"] ~= nil then
        before = args["jsonp"] .. "("
        after = ")"
      end
      ngx.say(before .. ngx.var.cookie_uuid .. after)
      ngx.exit(ngx.HTTP_OK)
    ';
  }

  location ~ /run_debug {
    content_by_lua '
      ngx.header.content_type = "text/javascript"
      local tag = "http://getrockerbox.com/run_debug?" .. tostring(math.random()) 

      local execute = "var a = document.createElement(\\"script\\"); a.type=\\"text/javascript\\"; a.async=!0; a.src=\\"" .. tag .. "\\"; f=document.getElementsByTagName(\\"script\\")[0]; f.parentNode.insertBefore(a,f);"
      local uuid = "undefined"
      if ngx.var.cookie_uuid ~= nil then
        uuid = ngx.var.cookie_uuid
      end
      ngx.say("window.RB = window.RB || {}; window.RB.debug_queue = window.RB.debug_queue || []; if (window.RB.debug_queue.length) { window.RB.debug_queue[0](function(){".. execute .."}," .. uuid .. "); window.RB.debug_queue = window.RB.debug_queue.slice(1) }")
      ngx.exit(ngx.HTTP_OK)
    ';
  }


  location ~ /sync {
    content_by_lua '
      local args = ngx.req.get_uri_args()
      local rockerbox = require("rockerbox_metrics")

      -- if the adnxs_uid is included, dont redirect
      local redirect = ngx.var.scheme .. "://" .. ngx.var.host .. "/empty.gif"
      if args["redirect"] then
        redirect = args["redirect"] 
      end
      
      if ngx.var.cookie_uuid ~= nil then
        local redirect_to = string.gsub(redirect,"${UUID}",ngx.var.cookie_uuid)
        ngx.redirect(redirect_to)
      
      elseif args["adnxs_uid"] ~= nil then
        ngx.header["Set-Cookie"] = "uuid=" .. args["adnxs_uid"] .. "; path=/;Max-Age=2592000;"
        local redirect_to = string.gsub(redirect,"${UUID}",args["adnxs_uid"])

        ngx.redirect(redirect_to)

      else
        rockerbox.get_uid(args) -- loop through AN to get UID 
      end
    ';
   
  }

  location ~ /clear {
    content_by_lua '
      ngx.header["Set-Cookie"] = "uuid=0; path=/;expires=Thu, 01 Jan 1970 00:00:00 GMT"
      if string.sub(ngx.var.uri,-4,-1) == ".gif" then
        ngx.header.content_type = "image/gif"
        ngx.say(ngx.location.capture("/empty.gif").body)
      else
        ngx.header.content_type = "text/javascript"
        ngx.say("cleared")
      end

      ngx.exit(ngx.HTTP_OK)
    ';
  }

  location ~ /pixel {

    set_by_lua $log_type '
      if ngx.var.arg_adnxs_uid ~= nil then
        return "qs_uid"
      elseif ngx.var.cookie_uuid ~= nil then
        return "cookie_uid"
      else
        return "bounce"
      end
    ';

    content_by_lua '
      local args = ngx.req.get_uri_args()
      local rockerbox = require("rockerbox_metrics")

      -- if the adnxs_uid is included, dont redirect
      if args["adnxs_uid"] == nil then
        rockerbox.get_uid(args) -- loop through AN to get UID 
        rockerbox.set_seg(args) -- redirect to AN to add seg
      else
        ngx.var.log_type = "qs_uid"
        rockerbox.set_uid(args) -- sets the uuid to cookie if on QS
        rockerbox.set_content_type(args)
        rockerbox.send_pixel_response()
      end
    ';

    
    if ($log_type = 'qs_uid' ) {
      access_log  /var/log/nginx/pixel.log referrer;
    }

    if ($log_type = 'cookie_uid') {
      access_log  /var/log/nginx/pixel.log uid_referrer;
    }

    if ($log_type = 'bounce') {
      access_log  /var/log/nginx/bounce.log referrer;
    }

  }
  
  location ~ /click {

    content_by_lua '
      local uriargs = ngx.var.args
      local args = ngx.req.get_uri_args()
      ngx.var.ref = ngx.unescape_uri(ngx.var.arg_referrer)
      local rockerbox = require("rockerbox_metrics")

      if false and args["redir"] == nil or args["redir"] == "" then
        local r = ngx.location.capture("/pixel.gif")
        ngx.header.content_type = "image/gif"
        ngx.say(r.body)
      else
        local first, last = string.find(uriargs,"redir")
        local parsed_uri = string.sub(uriargs,last+2)
        
        rockerbox.redirect_with_debug(args["debug"],ngx.unescape_uri(parsed_uri) )
      end
    ';

    access_log  /var/log/nginx/click.log click;
    access_log  /var/log/nginx/click_raw.log main;


  }

  location ~ /test {
    default_type text/html;
    content_by_lua '
      local r = ngx.location.capture("/pixel.gif")
      ngx.header.content_type = "image/gif"
      ngx.say(r.body)
    ';
  }

  location / {
    rewrite ^(.*) http://rockerbox.com permanent;
  }

  
}
