lua_package_path    "/etc/nginx/?.lua";
lua_shared_dict     log_dict    1M;

server {
  
  listen 80;
  listen 443 ssl; 
  ssl_certificate /etc/nginx/certificates/getrockerbox.com.full.csr;
  ssl_certificate_key /etc/nginx/certificates/getrockerbox.com.key;
 
  root /srv/metrics/current/;

  log_format main '$request $time_local $arg_auction_id';
  log_format referrer '$request $time_local "$http_referer" $http_user_agent $remote_addr';

  log_format track_formatted '$arg_auction_id $arg_price $arg_ecp $arg_creative $arg_height $arg_width $arg_uid $arg_seller $arg_tag $arg_venue $arg_campaign_id $arg_auction_id "$arg_ip_address" "$ref"';

  log_format viewability_tracking '$request $time_local $arg_auction_id'; 
  log_format view_formatted '$arg_auction_id $arg_uid $arg_seller $arg_tag $arg_pub $arg_venue $arg_ecp $arg_price $arg_creative $arg_visible $arg_elapsed $arg_action "$ref" "$parent"';

  log_format getviewability '$request $time_local $arg_auction_id $is_user $is_arb';
  log_format ab '$arg_auction_id $new_auction_id $buyer_id $arg_price $bid $clear $creative_id "$ref" "$ab" $is_arb';
  log_format arb_result '$arg_auction_id $ref $arg_uid $arg_creative $arg_price $new_auction_id $buyer_id $creative_id $brand_id $bid $alpha $time_local $is_arb';

  location ~ /assets/ {
    access_log  /var/log/nginx/asset.log main;
  }

  location ~ /track {
    default_type text/html;
    content_by_lua '
      ngx.var.ref = ngx.unescape_uri(ngx.var.arg_referrer)
      ngx.say("")
    ';
    access_log  /var/log/nginx/raw.log main;
    access_log  /var/log/nginx/formatted.log track_formatted;
  }

  location ~ /getviewability {
    set $new_auction_id '-';
    set $bid '-';
    set $clear '-';

    set $buyer_id '-';
    set $creative_id '-';
    set $brand_id '-';
    set $alpha '-';
    set $ref '-';
    set $ab '-';
    set $is_arb 'false';
    set $is_user 'false';

    resolver 8.8.8.8;

    content_by_lua '
      ngx.var.ref = ngx.unescape_uri(ngx.var.arg_referrer)
      local args = ngx.req.get_uri_args()

      local http = require "resty.http"
      local redis = require "resty.redis"
      local cjson = require "cjson"
      local red = redis:new()
      local red2 = redis:new()

      local ok, err = red2:connect("162.243.123.240", 6379)
      red2:set_timeout(100)

      --if (false and string.len(args["uid"]) > 0 and tonumber(args["uid"]) > 0 and string.find(ngx.var.uri,"js") ) then
      if false then

        local user, err = red2:get(args["uid"])
        if (user ~= ngx.null) then 
          ngx.var.is_user = "true"
          
          local hc = http:new()
          
          local foobar = {
            an_placement_id = 2261194,
            an_user_id = "user_id",
            page_url = ngx.var.ref,
            ad_format = "iframe",
            width = tonumber(args["width"]),
            ext_auction_id = "db" .. args["auction_id"],
            ip_address = args["ip_address"],
            height = tonumber(args["height"])
          }
          local json_text = cjson.encode(foobar)
          json_text = string.gsub(json_text,"\\\"user_id\\\"",args["uid"])
          json_text = string.gsub(json_text,"\\\\/","/")
          local ok, code, headers, status, body  = hc:request {
            url = "http://ib.adnxs.com/asi?member_id=2024",
            method = "POST",
            body = json_text
          }
          
          local auction = cjson.decode(body)
          local old_price = tonumber(args["price"])
          if auction["bid"] then
            ngx.var.alpha = auction["bid"] - old_price
            if (auction["bid"] - old_price > 0 ) then
              ngx.var.is_arb = "true"
            end
            
            ngx.var.new_auction_id = string.match(body,"appnexus_auction_id\\\":%s?(%d+),") 
            ngx.var.buyer_id = auction["buyer_member_id"]
            ngx.var.creative_id = auction["creative_id"]
            ngx.var.brand_id = auction["brand_id"]
            ngx.var.bid = auction["bid"]

            local tag = auction["ad_tag"]
            
            tag = string.gsub(tag,"%%%%pricepaid%%%%",auction["bid"]*0.8)
            ngx.var.ab = string.match(tag,"SRC=\'(.*)\' FR")
            ngx.var.buyer_id = auction["buyer_member_id"]
            ngx.var.creative_id = auction["creative_id"]
            ngx.var.clear = auction["bid"]*0.8

            if ( auction["bid"]*0.7 > old_price) then
              
              ngx.var.is_arb = "true"

              local creative = args["creative"]
              local id_str = "\\\"cr_" .. creative .. "_" ..  args["auction_id"] .. "_" .. args["cb"] .. "\\\""
              ngx.say("var ecalper = document.getElementById(" .. id_str .. ")")
              ngx.say("var tnemecalper = document.createElement(\\\"div\\\")")
              ngx.say("tnemecalper.innerHTML = \\\"" .. tag .. "\\\"")
              ngx.say("ecalper.parentNode.replaceChild(tnemecalper,ecalper)")
            else
              ngx.redirect("/assets" .. ngx.var.request_uri)
            end
          else
            ngx.redirect("/assets" .. ngx.var.request_uri)
          end
        else
          ngx.redirect("/assets" .. ngx.var.request_uri)
        end
      else
        ngx.redirect("/assets" .. ngx.var.request_uri)	
      end
    ';

    access_log  /var/log/nginx/getviewability.log getviewability;
    access_log  /var/log/nginx/ab.log ab;  
    access_log  /var/log/nginx/arb.log arb_result;
    
  }

  location ~ /viewability { 
    default_type image/gif; 
    set $ref '-';
    set $parent '-';
    
    access_log  /var/log/nginx/view_raw.log viewability_tracking; 
    content_by_lua '
      ngx.var.ref = ngx.unescape_uri(ngx.var.arg_referrer)
      ngx.var.parent = ngx.unescape_uri(ngx.var.arg_parent)
      ngx.say(".")
    ';

    access_log /var/log/nginx/view.log view_formatted;
  }

  location = /pixel.gif {
    empty_gif;
  }

  location ~ /pixel {

    content_by_lua '
      local args = ngx.req.get_uri_args()
      if args["img"] then
        ngx.header.content_type = "image/gif"
      else
        ngx.header.content_type = "text/javascript"
      end

      if args["adnxs_uid"] then
        if args["img"] then
          ngx.say(ngx.location.capture("/pixel.gif").body)
        else
          ngx.say("") 
        end
        
      else
        local url = "https://getrockerbox.com/pixel?adnxs_uid=$UID"
        if ngx.var.query_string then
          url = url .. "&" .. ngx.var.query_string
        end
        if args["an_seg"] then
          url = "/seg?add=" .. args["an_seg"] .."&redir=" .. ngx.escape_uri(url)
        end
        ngx.redirect("https://secure.adnxs.com/getuid?" .. ngx.escape_uri(url))
      end
    ';
    if ($args ~ 'adnxs_uid') {
      access_log  /var/log/nginx/pixel.log referrer;
    }
    if ($args !~ 'adnxs_uid') {
      access_log  /var/log/nginx/bounce.log referrer;
    }

  }
  
  location ~ /test {
    default_type text/html;
    content_by_lua '
      local r = ngx.location.capture("/pixel.gif")
      ngx.header.content_type = "image/gif"
      ngx.say(r.body)
    ';
  }

  location / {
    rewrite ^(.*) http://rockerbox.com permanent;
  }

  #location ~ /{
  #  proxy_set_header Host $host;
  #  proxy_set_header X-Real-IP $remote_addr;
  #  proxy_pass http://tornado_server;
  #}
}
